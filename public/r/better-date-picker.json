{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "better-date-picker",
  "type": "registry:ui",
  "title": "Better Date Picker",
  "dependencies": [
    "lucide-react",
    "date-fns",
    "react-day-picker",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-popover",
    "date-fns",
    "lucide-react",
    "@radix-ui/react-icons",
    "@radix-ui/react-select",
    "react-day-picker"
  ],
  "registryDependencies": [
    "popover",
    "input",
    "button",
    "select"
  ],
  "files": [
    {
      "path": "src/components/extensions/better-date-picker.tsx",
      "content": "import { Button, buttonVariants } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\nimport { add, format } from \"date-fns\";\nimport { type Locale, enUS } from \"date-fns/locale\";\nimport { CalendarIcon, ChevronLeft, ChevronRight, Clock } from \"lucide-react\";\nimport * as React from \"react\";\nimport { useImperativeHandle, useRef } from \"react\";\n\nimport {\n\tSelect,\n\tSelectContent,\n\tSelectItem,\n\tSelectTrigger,\n\tSelectValue,\n} from \"@/components/ui/select\";\nimport { DayPicker, DayPickerProps } from \"react-day-picker\";\n\n// ---------- utils start ----------\n/**\n * regular expression to check for valid hour format (01-23)\n */\nfunction isValidHour(value: string) {\n\treturn /^(0[0-9]|1[0-9]|2[0-3])$/.test(value);\n}\n\n/**\n * regular expression to check for valid 12 hour format (01-12)\n */\nfunction isValid12Hour(value: string) {\n\treturn /^(0[1-9]|1[0-2])$/.test(value);\n}\n\n/**\n * regular expression to check for valid minute format (00-59)\n */\nfunction isValidMinuteOrSecond(value: string) {\n\treturn /^[0-5][0-9]$/.test(value);\n}\n\ntype GetValidNumberConfig = { max: number; min?: number; loop?: boolean };\n\nfunction getValidNumber(\n\tvalue: string,\n\t{ max, min = 0, loop = false }: GetValidNumberConfig,\n) {\n\tlet numericValue = Number.parseInt(value, 10);\n\n\tif (!Number.isNaN(numericValue)) {\n\t\tif (!loop) {\n\t\t\tif (numericValue > max) numericValue = max;\n\t\t\tif (numericValue < min) numericValue = min;\n\t\t} else {\n\t\t\tif (numericValue > max) numericValue = min;\n\t\t\tif (numericValue < min) numericValue = max;\n\t\t}\n\t\treturn numericValue.toString().padStart(2, \"0\");\n\t}\n\n\treturn \"00\";\n}\n\nfunction getValidHour(value: string) {\n\tif (isValidHour(value)) return value;\n\treturn getValidNumber(value, { max: 23 });\n}\n\nfunction getValid12Hour(value: string) {\n\tif (isValid12Hour(value)) return value;\n\treturn getValidNumber(value, { min: 1, max: 12 });\n}\n\nfunction getValidMinuteOrSecond(value: string) {\n\tif (isValidMinuteOrSecond(value)) return value;\n\treturn getValidNumber(value, { max: 59 });\n}\n\ntype GetValidArrowNumberConfig = {\n\tmin: number;\n\tmax: number;\n\tstep: number;\n};\n\nfunction getValidArrowNumber(\n\tvalue: string,\n\t{ min, max, step }: GetValidArrowNumberConfig,\n) {\n\tlet numericValue = Number.parseInt(value, 10);\n\tif (!Number.isNaN(numericValue)) {\n\t\tnumericValue += step;\n\t\treturn getValidNumber(String(numericValue), { min, max, loop: true });\n\t}\n\treturn \"00\";\n}\n\nfunction getValidArrowHour(value: string, step: number) {\n\treturn getValidArrowNumber(value, { min: 0, max: 23, step });\n}\n\nfunction getValidArrow12Hour(value: string, step: number) {\n\treturn getValidArrowNumber(value, { min: 1, max: 12, step });\n}\n\nfunction getValidArrowMinuteOrSecond(value: string, step: number) {\n\treturn getValidArrowNumber(value, { min: 0, max: 59, step });\n}\n\nfunction setMinutes(date: Date, value: string) {\n\tconst minutes = getValidMinuteOrSecond(value);\n\tdate.setMinutes(Number.parseInt(minutes, 10));\n\treturn date;\n}\n\nfunction setSeconds(date: Date, value: string) {\n\tconst seconds = getValidMinuteOrSecond(value);\n\tdate.setSeconds(Number.parseInt(seconds, 10));\n\treturn date;\n}\n\nfunction setHours(date: Date, value: string) {\n\tconst hours = getValidHour(value);\n\tdate.setHours(Number.parseInt(hours, 10));\n\treturn date;\n}\n\nfunction set12Hours(date: Date, value: string, period: Period) {\n\tconst hours = Number.parseInt(getValid12Hour(value), 10);\n\tconst convertedHours = convert12HourTo24Hour(hours, period);\n\tdate.setHours(convertedHours);\n\treturn date;\n}\n\ntype TimePickerType = \"minutes\" | \"seconds\" | \"hours\" | \"12hours\";\ntype Period = \"AM\" | \"PM\";\n\nfunction setDateByType(\n\tdate: Date,\n\tvalue: string,\n\ttype: TimePickerType,\n\tperiod?: Period,\n) {\n\tswitch (type) {\n\t\tcase \"minutes\":\n\t\t\treturn setMinutes(date, value);\n\t\tcase \"seconds\":\n\t\t\treturn setSeconds(date, value);\n\t\tcase \"hours\":\n\t\t\treturn setHours(date, value);\n\t\tcase \"12hours\": {\n\t\t\tif (!period) return date;\n\t\t\treturn set12Hours(date, value, period);\n\t\t}\n\t\tdefault:\n\t\t\treturn date;\n\t}\n}\n\nfunction getDateByType(date: Date | null, type: TimePickerType) {\n\tif (!date) return \"00\";\n\tswitch (type) {\n\t\tcase \"minutes\":\n\t\t\treturn getValidMinuteOrSecond(String(date.getMinutes()));\n\t\tcase \"seconds\":\n\t\t\treturn getValidMinuteOrSecond(String(date.getSeconds()));\n\t\tcase \"hours\":\n\t\t\treturn getValidHour(String(date.getHours()));\n\t\tcase \"12hours\":\n\t\t\treturn getValid12Hour(String(display12HourValue(date.getHours())));\n\t\tdefault:\n\t\t\treturn \"00\";\n\t}\n}\n\nfunction getArrowByType(value: string, step: number, type: TimePickerType) {\n\tswitch (type) {\n\t\tcase \"minutes\":\n\t\t\treturn getValidArrowMinuteOrSecond(value, step);\n\t\tcase \"seconds\":\n\t\t\treturn getValidArrowMinuteOrSecond(value, step);\n\t\tcase \"hours\":\n\t\t\treturn getValidArrowHour(value, step);\n\t\tcase \"12hours\":\n\t\t\treturn getValidArrow12Hour(value, step);\n\t\tdefault:\n\t\t\treturn \"00\";\n\t}\n}\n\n/**\n * handles value change of 12-hour input\n * 12:00 PM is 12:00\n * 12:00 AM is 00:00\n */\nfunction convert12HourTo24Hour(hour: number, period: Period) {\n\tif (period === \"PM\") {\n\t\tif (hour <= 11) {\n\t\t\treturn hour + 12;\n\t\t}\n\t\treturn hour;\n\t}\n\n\tif (period === \"AM\") {\n\t\tif (hour === 12) return 0;\n\t\treturn hour;\n\t}\n\treturn hour;\n}\n\n/**\n * time is stored in the 24-hour form,\n * but needs to be displayed to the user\n * in its 12-hour representation\n */\nfunction display12HourValue(hours: number) {\n\tif (hours === 0 || hours === 12) return \"12\";\n\tif (hours >= 22) return `${hours - 12}`;\n\tif (hours % 12 > 9) return `${hours}`;\n\treturn `0${hours % 12}`;\n}\n\nfunction genMonths(\n\tlocale: Pick<Locale, \"options\" | \"localize\" | \"formatLong\">,\n) {\n\treturn Array.from({ length: 12 }, (_, i) => ({\n\t\tvalue: i,\n\t\tlabel: format(new Date(2021, i), \"MMMM\", { locale }),\n\t}));\n}\n\nfunction genYears(yearRange = 50) {\n\tconst today = new Date();\n\treturn Array.from({ length: yearRange * 2 + 1 }, (_, i) => ({\n\t\tvalue: today.getFullYear() - yearRange + i,\n\t\tlabel: (today.getFullYear() - yearRange + i).toString(),\n\t}));\n}\n\n// ---------- utils end ----------\n\nfunction Calendar({\n\tclassName,\n\tclassNames,\n\tshowOutsideDays = true,\n\tyearRange = 50,\n\t...props\n}: DayPickerProps & { yearRange?: number }) {\n\tconst MONTHS = React.useMemo(() => {\n\t\tlet locale: Pick<Locale, \"options\" | \"localize\" | \"formatLong\"> = enUS;\n\t\tconst { options, localize, formatLong } = props.locale || {};\n\t\tif (options && localize && formatLong) {\n\t\t\tlocale = {\n\t\t\t\toptions,\n\t\t\t\tlocalize,\n\t\t\t\tformatLong,\n\t\t\t};\n\t\t}\n\t\treturn genMonths(locale);\n\t}, []);\n\n\tconst YEARS = React.useMemo(() => genYears(yearRange), []);\n\tconst disableLeftNavigation = () => {\n\t\tconst today = new Date();\n\t\tconst startDate = new Date(today.getFullYear() - yearRange, 0, 1);\n\t\tif (props.month) {\n\t\t\treturn (\n\t\t\t\tprops.month.getMonth() === startDate.getMonth() &&\n\t\t\t\tprops.month.getFullYear() === startDate.getFullYear()\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t};\n\tconst disableRightNavigation = () => {\n\t\tconst today = new Date();\n\t\tconst endDate = new Date(today.getFullYear() + yearRange, 11, 31);\n\t\tif (props.month) {\n\t\t\treturn (\n\t\t\t\tprops.month.getMonth() === endDate.getMonth() &&\n\t\t\t\tprops.month.getFullYear() === endDate.getFullYear()\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t};\n\n\treturn (\n\t\t<DayPicker\n\t\t\tshowOutsideDays={showOutsideDays}\n\t\t\tclassName={cn(\"p-3\", className)}\n\t\t\tclassNames={{\n\t\t\t\tmonths:\n\t\t\t\t\t\"flex flex-col sm:flex-row space-y-4  sm:space-y-0 justify-center\",\n\t\t\t\tmonth: \"flex flex-col items-center space-y-4\",\n\t\t\t\tmonth_caption: \"flex justify-center pt-1 relative items-center\",\n\t\t\t\tcaption_label: \"text-sm font-medium\",\n\t\t\t\tnav: \"space-x-1 flex items-center \",\n\t\t\t\tbutton_previous: cn(\n\t\t\t\t\tbuttonVariants({ variant: \"outline\" }),\n\t\t\t\t\t\"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100 absolute left-5 top-5\",\n\t\t\t\t\tdisableLeftNavigation() && \"pointer-events-none\",\n\t\t\t\t),\n\t\t\t\tbutton_next: cn(\n\t\t\t\t\tbuttonVariants({ variant: \"outline\" }),\n\t\t\t\t\t\"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100 absolute right-5 top-5\",\n\t\t\t\t\tdisableRightNavigation() && \"pointer-events-none\",\n\t\t\t\t),\n\t\t\t\tmonth_grid: \"w-full border-collapse space-y-1\",\n\t\t\t\tweekdays: cn(\"flex\", props.showWeekNumber && \"justify-end\"),\n\t\t\t\tweekday:\n\t\t\t\t\t\"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n\t\t\t\tweek: \"flex w-full mt-2\",\n\t\t\t\tday: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20 rounded-1\",\n\t\t\t\tday_button: cn(\n\t\t\t\t\tbuttonVariants({ variant: \"ghost\" }),\n\t\t\t\t\t\"h-9 w-9 p-0 font-normal aria-selected:opacity-100 rounded-l-md rounded-r-md\",\n\t\t\t\t),\n\t\t\t\trange_end: \"day-range-end\",\n\t\t\t\tselected:\n\t\t\t\t\t\"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground rounded-l-md rounded-r-md\",\n\t\t\t\ttoday: \"bg-accent text-accent-foreground\",\n\t\t\t\toutside:\n\t\t\t\t\t\"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n\t\t\t\tdisabled: \"text-muted-foreground opacity-50\",\n\t\t\t\trange_middle:\n\t\t\t\t\t\"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n\t\t\t\thidden: \"invisible\",\n\t\t\t\t...classNames,\n\t\t\t}}\n\t\t\tcomponents={{\n\t\t\t\tChevron: ({ ...props }) =>\n\t\t\t\t\tprops.orientation === \"left\" ? (\n\t\t\t\t\t\t<ChevronLeft className=\"w-4 h-4\" />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<ChevronRight className=\"w-4 h-4\" />\n\t\t\t\t\t),\n\t\t\t\tMonthCaption: ({ calendarMonth }) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"inline-flex gap-2\">\n\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\tdefaultValue={calendarMonth.date.getMonth().toString()}\n\t\t\t\t\t\t\t\tonValueChange={(value) => {\n\t\t\t\t\t\t\t\t\tconst newDate = new Date(calendarMonth.date);\n\t\t\t\t\t\t\t\t\tnewDate.setMonth(Number.parseInt(value, 10));\n\t\t\t\t\t\t\t\t\tprops.onMonthChange?.(newDate);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<SelectTrigger className=\"gap-1 focus:bg-accent p-0 border-none w-fit focus:text-accent-foreground\">\n\t\t\t\t\t\t\t\t\t<SelectValue />\n\t\t\t\t\t\t\t\t</SelectTrigger>\n\t\t\t\t\t\t\t\t<SelectContent>\n\t\t\t\t\t\t\t\t\t{MONTHS.map((month) => (\n\t\t\t\t\t\t\t\t\t\t<SelectItem\n\t\t\t\t\t\t\t\t\t\t\tkey={month.value}\n\t\t\t\t\t\t\t\t\t\t\tvalue={month.value.toString()}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{month.label}\n\t\t\t\t\t\t\t\t\t\t</SelectItem>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</SelectContent>\n\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\tdefaultValue={calendarMonth.date.getFullYear().toString()}\n\t\t\t\t\t\t\t\tonValueChange={(value) => {\n\t\t\t\t\t\t\t\t\tconst newDate = new Date(calendarMonth.date);\n\t\t\t\t\t\t\t\t\tnewDate.setFullYear(Number.parseInt(value, 10));\n\t\t\t\t\t\t\t\t\tprops.onMonthChange?.(newDate);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<SelectTrigger className=\"gap-1 focus:bg-accent p-0 border-none w-fit focus:text-accent-foreground\">\n\t\t\t\t\t\t\t\t\t<SelectValue />\n\t\t\t\t\t\t\t\t</SelectTrigger>\n\t\t\t\t\t\t\t\t<SelectContent>\n\t\t\t\t\t\t\t\t\t{YEARS.map((year) => (\n\t\t\t\t\t\t\t\t\t\t<SelectItem key={year.value} value={year.value.toString()}>\n\t\t\t\t\t\t\t\t\t\t\t{year.label}\n\t\t\t\t\t\t\t\t\t\t</SelectItem>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</SelectContent>\n\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t}}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\nCalendar.displayName = \"Calendar\";\n\ninterface PeriodSelectorProps {\n\tperiod: Period;\n\tsetPeriod?: (m: Period) => void;\n\tdate?: Date | null;\n\tonDateChange?: (date: Date | undefined) => void;\n\tonRightFocus?: () => void;\n\tonLeftFocus?: () => void;\n}\n\nconst TimePeriodSelect = React.forwardRef<\n\tHTMLButtonElement,\n\tPeriodSelectorProps\n>(\n\t(\n\t\t{ period, setPeriod, date, onDateChange, onLeftFocus, onRightFocus },\n\t\tref,\n\t) => {\n\t\tconst handleKeyDown = (e: React.KeyboardEvent<HTMLButtonElement>) => {\n\t\t\tif (e.key === \"ArrowRight\") onRightFocus?.();\n\t\t\tif (e.key === \"ArrowLeft\") onLeftFocus?.();\n\t\t};\n\n\t\tconst handleValueChange = (value: Period) => {\n\t\t\tsetPeriod?.(value);\n\n\t\t\t/**\n\t\t\t * trigger an update whenever the user switches between AM and PM;\n\t\t\t * otherwise user must manually change the hour each time\n\t\t\t */\n\t\t\tif (date) {\n\t\t\t\tconst tempDate = new Date(date);\n\t\t\t\tconst hours = display12HourValue(date.getHours());\n\t\t\t\tonDateChange?.(\n\t\t\t\t\tsetDateByType(\n\t\t\t\t\t\ttempDate,\n\t\t\t\t\t\thours.toString(),\n\t\t\t\t\t\t\"12hours\",\n\t\t\t\t\t\tperiod === \"AM\" ? \"PM\" : \"AM\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\treturn (\n\t\t\t<div className=\"flex items-center h-10\">\n\t\t\t\t<Select\n\t\t\t\t\tdefaultValue={period}\n\t\t\t\t\tonValueChange={(value: Period) => handleValueChange(value)}\n\t\t\t\t>\n\t\t\t\t\t<SelectTrigger\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\tclassName=\"focus:bg-accent w-[65px] focus:text-accent-foreground\"\n\t\t\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\t\t>\n\t\t\t\t\t\t<SelectValue />\n\t\t\t\t\t</SelectTrigger>\n\t\t\t\t\t<SelectContent>\n\t\t\t\t\t\t<SelectItem value=\"AM\">AM</SelectItem>\n\t\t\t\t\t\t<SelectItem value=\"PM\">PM</SelectItem>\n\t\t\t\t\t</SelectContent>\n\t\t\t\t</Select>\n\t\t\t</div>\n\t\t);\n\t},\n);\n\nTimePeriodSelect.displayName = \"TimePeriodSelect\";\n\ninterface TimePickerInputProps\n\textends React.InputHTMLAttributes<HTMLInputElement> {\n\tpicker: TimePickerType;\n\tdate?: Date | null;\n\tonDateChange?: (date: Date | undefined) => void;\n\tperiod?: Period;\n\tonRightFocus?: () => void;\n\tonLeftFocus?: () => void;\n}\n\nconst TimePickerInput = React.forwardRef<\n\tHTMLInputElement,\n\tTimePickerInputProps\n>(\n\t(\n\t\t{\n\t\t\tclassName,\n\t\t\ttype = \"tel\",\n\t\t\tvalue,\n\t\t\tid,\n\t\t\tname,\n\t\t\tdate = new Date(new Date().setHours(0, 0, 0, 0)),\n\t\t\tonDateChange,\n\t\t\tonChange,\n\t\t\tonKeyDown,\n\t\t\tpicker,\n\t\t\tperiod,\n\t\t\tonLeftFocus,\n\t\t\tonRightFocus,\n\t\t\t...props\n\t\t},\n\t\tref,\n\t) => {\n\t\tconst [flag, setFlag] = React.useState<boolean>(false);\n\t\tconst [prevIntKey, setPrevIntKey] = React.useState<string>(\"0\");\n\n\t\t/**\n\t\t * allow the user to enter the second digit within 2 seconds\n\t\t * otherwise start again with entering first digit\n\t\t */\n\t\tReact.useEffect(() => {\n\t\t\tif (flag) {\n\t\t\t\tconst timer = setTimeout(() => {\n\t\t\t\t\tsetFlag(false);\n\t\t\t\t}, 2000);\n\n\t\t\t\treturn () => clearTimeout(timer);\n\t\t\t}\n\t\t}, [flag]);\n\n\t\tconst calculatedValue = React.useMemo(() => {\n\t\t\treturn getDateByType(date, picker);\n\t\t}, [date, picker]);\n\n\t\tconst calculateNewValue = (key: string) => {\n\t\t\t/*\n\t\t\t * If picker is '12hours' and the first digit is 0, then the second digit is automatically set to 1.\n\t\t\t * The second entered digit will break the condition and the value will be set to 10-12.\n\t\t\t */\n\t\t\tif (picker === \"12hours\") {\n\t\t\t\tif (flag && calculatedValue.slice(1, 2) === \"1\" && prevIntKey === \"0\")\n\t\t\t\t\treturn `0${key}`;\n\t\t\t}\n\n\t\t\treturn !flag ? `0${key}` : calculatedValue.slice(1, 2) + key;\n\t\t};\n\n\t\tconst handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n\t\t\tif (e.key === \"Tab\") return;\n\t\t\te.preventDefault();\n\t\t\tif (e.key === \"ArrowRight\") onRightFocus?.();\n\t\t\tif (e.key === \"ArrowLeft\") onLeftFocus?.();\n\t\t\tif ([\"ArrowUp\", \"ArrowDown\"].includes(e.key)) {\n\t\t\t\tconst step = e.key === \"ArrowUp\" ? 1 : -1;\n\t\t\t\tconst newValue = getArrowByType(calculatedValue, step, picker);\n\t\t\t\tif (flag) setFlag(false);\n\t\t\t\tconst tempDate = date ? new Date(date) : new Date();\n\t\t\t\tonDateChange?.(setDateByType(tempDate, newValue, picker, period));\n\t\t\t}\n\t\t\tif (e.key >= \"0\" && e.key <= \"9\") {\n\t\t\t\tif (picker === \"12hours\") setPrevIntKey(e.key);\n\n\t\t\t\tconst newValue = calculateNewValue(e.key);\n\t\t\t\tif (flag) onRightFocus?.();\n\t\t\t\tsetFlag((prev) => !prev);\n\t\t\t\tconst tempDate = date ? new Date(date) : new Date();\n\t\t\t\tonDateChange?.(setDateByType(tempDate, newValue, picker, period));\n\t\t\t}\n\t\t};\n\n\t\treturn (\n\t\t\t<Input\n\t\t\t\tref={ref}\n\t\t\t\tid={id || picker}\n\t\t\t\tname={name || picker}\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"focus:bg-accent focus:text-accent-foreground w-[48px] text-center font-mono text-base tabular-nums caret-transparent [&::-webkit-inner-spin-button]:appearance-none\",\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t\tvalue={value || calculatedValue}\n\t\t\t\tonChange={(e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tonChange?.(e);\n\t\t\t\t}}\n\t\t\t\ttype={type}\n\t\t\t\tinputMode=\"decimal\"\n\t\t\t\tonKeyDown={(e) => {\n\t\t\t\t\tonKeyDown?.(e);\n\t\t\t\t\thandleKeyDown(e);\n\t\t\t\t}}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t);\n\t},\n);\n\nTimePickerInput.displayName = \"TimePickerInput\";\n\ninterface TimePickerProps {\n\tdate?: Date | null;\n\tonChange?: (date: Date | undefined) => void;\n\thourCycle?: 12 | 24;\n\t/**\n\t * Determines the smallest unit that is displayed in the datetime picker.\n\t * Default is 'second'.\n\t * */\n\tgranularity?: Granularity;\n}\n\ninterface TimePickerRef {\n\tminuteRef: HTMLInputElement | null;\n\thourRef: HTMLInputElement | null;\n\tsecondRef: HTMLInputElement | null;\n}\n\nconst TimePicker = React.forwardRef<TimePickerRef, TimePickerProps>(\n\t({ date, onChange, hourCycle = 24, granularity = \"second\" }, ref) => {\n\t\tconst minuteRef = React.useRef<HTMLInputElement>(null);\n\t\tconst hourRef = React.useRef<HTMLInputElement>(null);\n\t\tconst secondRef = React.useRef<HTMLInputElement>(null);\n\t\tconst periodRef = React.useRef<HTMLButtonElement>(null);\n\t\tconst [period, setPeriod] = React.useState<Period>(\n\t\t\tdate && date.getHours() >= 12 ? \"PM\" : \"AM\",\n\t\t);\n\n\t\tuseImperativeHandle(\n\t\t\tref,\n\t\t\t() => ({\n\t\t\t\tminuteRef: minuteRef.current,\n\t\t\t\thourRef: hourRef.current,\n\t\t\t\tsecondRef: secondRef.current,\n\t\t\t\tperiodRef: periodRef.current,\n\t\t\t}),\n\t\t\t[minuteRef, hourRef, secondRef],\n\t\t);\n\t\treturn (\n\t\t\t<div className=\"flex justify-center items-center gap-2\">\n\t\t\t\t<label htmlFor=\"datetime-picker-hour-input\" className=\"cursor-pointer\">\n\t\t\t\t\t<Clock className=\"mr-2 w-4 h-4\" />\n\t\t\t\t</label>\n\t\t\t\t<TimePickerInput\n\t\t\t\t\tpicker={hourCycle === 24 ? \"hours\" : \"12hours\"}\n\t\t\t\t\tdate={date}\n\t\t\t\t\tid=\"datetime-picker-hour-input\"\n\t\t\t\t\tonDateChange={onChange}\n\t\t\t\t\tref={hourRef}\n\t\t\t\t\tperiod={period}\n\t\t\t\t\tonRightFocus={() => minuteRef?.current?.focus()}\n\t\t\t\t/>\n\t\t\t\t{(granularity === \"minute\" || granularity === \"second\") && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<TimePickerInput\n\t\t\t\t\t\t\tpicker=\"minutes\"\n\t\t\t\t\t\t\tdate={date}\n\t\t\t\t\t\t\tonDateChange={onChange}\n\t\t\t\t\t\t\tref={minuteRef}\n\t\t\t\t\t\t\tonLeftFocus={() => hourRef?.current?.focus()}\n\t\t\t\t\t\t\tonRightFocus={() => secondRef?.current?.focus()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{granularity === \"second\" && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<TimePickerInput\n\t\t\t\t\t\t\tpicker=\"seconds\"\n\t\t\t\t\t\t\tdate={date}\n\t\t\t\t\t\t\tonDateChange={onChange}\n\t\t\t\t\t\t\tref={secondRef}\n\t\t\t\t\t\t\tonLeftFocus={() => minuteRef?.current?.focus()}\n\t\t\t\t\t\t\tonRightFocus={() => periodRef?.current?.focus()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{hourCycle === 12 && (\n\t\t\t\t\t<div className=\"gap-1 grid text-center\">\n\t\t\t\t\t\t<TimePeriodSelect\n\t\t\t\t\t\t\tperiod={period}\n\t\t\t\t\t\t\tsetPeriod={setPeriod}\n\t\t\t\t\t\t\tdate={date}\n\t\t\t\t\t\t\tonDateChange={(date) => {\n\t\t\t\t\t\t\t\tonChange?.(date);\n\t\t\t\t\t\t\t\tif (date && date?.getHours() >= 12) {\n\t\t\t\t\t\t\t\t\tsetPeriod(\"PM\");\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsetPeriod(\"AM\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tref={periodRef}\n\t\t\t\t\t\t\tonLeftFocus={() => secondRef?.current?.focus()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t},\n);\nTimePicker.displayName = \"TimePicker\";\n\ntype Granularity = \"day\" | \"hour\" | \"minute\" | \"second\";\n\ntype BetterDatePickerProps = {\n\tvalue?: Date;\n\tonChange?: (date: Date | undefined) => void;\n\tonMonthChange?: (date: Date | undefined) => void;\n\tdisabled?: boolean;\n\t/** showing `AM/PM` or not. */\n\thourCycle?: 12 | 24;\n\tplaceholder?: string;\n\t/**\n\t * The year range will be: `This year + yearRange` and `this year - yearRange`.\n\t * Default is 50.\n\t * For example:\n\t * This year is 2024, The year dropdown will be 1974 to 2024 which is generated by `2024 - 50 = 1974` and `2024 + 50 = 2074`.\n\t * */\n\tyearRange?: number;\n\t/**\n\t * The format is derived from the `date-fns` documentation.\n\t * @reference https://date-fns.org/v3.6.0/docs/format\n\t **/\n\tdisplayFormat?: { hour24?: string; hour12?: string };\n\t/**\n\t * The granularity prop allows you to control the smallest unit that is displayed by BetterDatePicker.\n\t * By default, the value is `second` which shows all time inputs.\n\t **/\n\tgranularity?: Granularity;\n\tclassName?: string;\n\t/**\n\t * Show the default month and time when popup the calendar. Default is the current Date().\n\t **/\n\tdefaultPopupValue?: Date;\n\n\t/**\n\t * this prop is used to show the input field for typing date manually.\n\t * Default is `false`.\n\t *\n\t **/\n\tshowInput?: boolean;\n} & Pick<\n\tDayPickerProps,\n\t\"locale\" | \"weekStartsOn\" | \"showWeekNumber\" | \"showOutsideDays\"\n>;\n\ntype BetterDatePickerRef = {\n\tvalue?: Date;\n} & Omit<HTMLButtonElement, \"value\">;\n\nconst BetterDatePicker = React.forwardRef<\n\tPartial<BetterDatePickerRef>,\n\tBetterDatePickerProps\n>(\n\t(\n\t\t{\n\t\t\tlocale = enUS,\n\t\t\tdefaultPopupValue = new Date(new Date().setHours(0, 0, 0, 0)),\n\t\t\tvalue,\n\t\t\tonChange,\n\t\t\tonMonthChange,\n\t\t\thourCycle = 24,\n\t\t\tyearRange = 50,\n\t\t\tdisabled = false,\n\t\t\tdisplayFormat,\n\t\t\tgranularity = \"day\",\n\t\t\tplaceholder = \"Pick a date\",\n\t\t\tclassName,\n\t\t\tshowInput,\n\t\t\t...props\n\t\t},\n\t\tref,\n\t) => {\n\t\tconst [month, setMonth] = React.useState<Date>(value ?? defaultPopupValue);\n\t\tconst buttonRef = useRef<HTMLButtonElement>(null);\n\t\tconst [displayDate, setDisplayDate] = React.useState<Date | undefined>(\n\t\t\tvalue ?? undefined,\n\t\t);\n\t\tonMonthChange ||= onChange;\n\n\t\t/**\n\t\t * Makes sure display date updates when value change on\n\t\t * parent component\n\t\t */\n\t\tReact.useEffect(() => {\n\t\t\tsetDisplayDate(value);\n\t\t}, [value]);\n\n\t\t/**\n\t\t * carry over the current time when a user clicks a new day\n\t\t * instead of resetting to 00:00\n\t\t */\n\t\tconst handleMonthChange = (newDay: Date | undefined) => {\n\t\t\tif (!newDay) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!defaultPopupValue) {\n\t\t\t\tnewDay.setHours(\n\t\t\t\t\tmonth?.getHours() ?? 0,\n\t\t\t\t\tmonth?.getMinutes() ?? 0,\n\t\t\t\t\tmonth?.getSeconds() ?? 0,\n\t\t\t\t);\n\t\t\t\tonMonthChange?.(newDay);\n\t\t\t\tsetMonth(newDay);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst diff = newDay.getTime() - defaultPopupValue.getTime();\n\t\t\tconst diffInDays = diff / (1000 * 60 * 60 * 24);\n\t\t\tconst newDateFull = add(defaultPopupValue, {\n\t\t\t\tdays: Math.ceil(diffInDays),\n\t\t\t});\n\t\t\tnewDateFull.setHours(\n\t\t\t\tmonth?.getHours() ?? 0,\n\t\t\t\tmonth?.getMinutes() ?? 0,\n\t\t\t\tmonth?.getSeconds() ?? 0,\n\t\t\t);\n\t\t\tonMonthChange?.(newDateFull);\n\t\t\tsetMonth(newDateFull);\n\t\t};\n\n\t\tconst onSelect = (newDay?: Date) => {\n\t\t\tif (!newDay) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tonChange?.(newDay);\n\t\t\tsetMonth(newDay);\n\t\t\tsetDisplayDate(newDay);\n\t\t};\n\n\t\tuseImperativeHandle(\n\t\t\tref,\n\t\t\t() => ({\n\t\t\t\t...buttonRef.current,\n\t\t\t\tvalue: displayDate,\n\t\t\t}),\n\t\t\t[displayDate],\n\t\t);\n\n\t\tconst initHourFormat = {\n\t\t\thour24:\n\t\t\t\tdisplayFormat?.hour24 ??\n\t\t\t\t`PPP HH:mm${!granularity || granularity === \"second\" ? \":ss\" : \"\"}`,\n\t\t\thour12:\n\t\t\t\tdisplayFormat?.hour12 ??\n\t\t\t\t`PP hh:mm${!granularity || granularity === \"second\" ? \":ss\" : \"\"} b`,\n\t\t};\n\n\t\tlet loc = enUS;\n\t\tconst { options, localize, formatLong } = locale;\n\t\tif (options && localize && formatLong) {\n\t\t\tloc = {\n\t\t\t\t...enUS,\n\t\t\t\toptions,\n\t\t\t\tlocalize,\n\t\t\t\tformatLong,\n\t\t\t};\n\t\t}\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Popover>\n\t\t\t\t\t{showInput ? (\n\t\t\t\t\t\t<div className=\"flex\">\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\t\t\ttype=\"date\"\n\t\t\t\t\t\t\t\tclassName=\"[&::-webkit-calendar-picker-indicator]:hidden\"\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t/* Hide calendar picker icon */\n\t\t\t\t\t\t\t\t\tWebkitAppearance: \"none\",\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvalue={displayDate ? format(displayDate, \"yyyy-MM-dd\") : \"\"}\n\t\t\t\t\t\t\t\tmin={`${new Date().getFullYear() - yearRange}-01-01`}\n\t\t\t\t\t\t\t\tmax={`${new Date().getFullYear() + yearRange}-12-31`}\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tconst newDate = new Date(e.target.value);\n\n\t\t\t\t\t\t\t\t\tif (!Number.isNaN(newDate.getTime())) {\n\t\t\t\t\t\t\t\t\t\tnewDate.setHours(\n\t\t\t\t\t\t\t\t\t\t\tmonth?.getHours() ?? 0,\n\t\t\t\t\t\t\t\t\t\t\tmonth?.getMinutes() ?? 0,\n\t\t\t\t\t\t\t\t\t\t\tmonth?.getSeconds() ?? 0,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tonSelect(newDate);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tconsole.warn(\"Invalid date format\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonBlur={(e) => {\n\t\t\t\t\t\t\t\t\tconst enteredDate = new Date(e.target.value);\n\t\t\t\t\t\t\t\t\tif (!Number.isNaN(enteredDate.getTime())) {\n\t\t\t\t\t\t\t\t\t\tconst currentYear = new Date().getFullYear();\n\t\t\t\t\t\t\t\t\t\tconst minYear = currentYear - yearRange;\n\t\t\t\t\t\t\t\t\t\tconst maxYear = currentYear + yearRange;\n\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tenteredDate.getFullYear() < minYear ||\n\t\t\t\t\t\t\t\t\t\t\tenteredDate.getFullYear() > maxYear\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\talert(\"Date out of allowed year range\");\n\t\t\t\t\t\t\t\t\t\t\t// Either reset to the closest valid date or clear the input\n\t\t\t\t\t\t\t\t\t\t\tif (enteredDate.getFullYear() < minYear) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst validDate = new Date(enteredDate);\n\t\t\t\t\t\t\t\t\t\t\t\tvalidDate.setFullYear(minYear);\n\t\t\t\t\t\t\t\t\t\t\t\tonSelect(validDate);\n\t\t\t\t\t\t\t\t\t\t\t} else if (enteredDate.getFullYear() > maxYear) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst validDate = new Date(enteredDate);\n\t\t\t\t\t\t\t\t\t\t\t\tvalidDate.setFullYear(maxYear);\n\t\t\t\t\t\t\t\t\t\t\t\tonSelect(validDate);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<PopoverTrigger asChild disabled={disabled}>\n\t\t\t\t\t\t\t\t<Button className=\"z-10 flex justify-center items-center bg-transparent hover:bg-transparent -ms-9 -me-px data-focus-visible:border-ring rounded-e-md outline-none data-focus-visible:ring-[3px] data-focus-visible:ring-ring/50 w-9 text-muted-foreground/80 hover:text-foreground transition-[color,box-shadow]\">\n\t\t\t\t\t\t\t\t\t<CalendarIcon size={16} />\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</PopoverTrigger>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<PopoverTrigger asChild disabled={disabled}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\"w-full justify-start text-left font-normal\",\n\t\t\t\t\t\t\t\t\t!displayDate && \"text-muted-foreground\",\n\t\t\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\tref={buttonRef}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CalendarIcon className=\"mr-2 w-4 h-4\" />\n\t\t\t\t\t\t\t\t{displayDate ? (\n\t\t\t\t\t\t\t\t\tformat(\n\t\t\t\t\t\t\t\t\t\tdisplayDate,\n\t\t\t\t\t\t\t\t\t\thourCycle === 24\n\t\t\t\t\t\t\t\t\t\t\t? initHourFormat.hour24\n\t\t\t\t\t\t\t\t\t\t\t: initHourFormat.hour12,\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlocale: loc,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<span>{placeholder}</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</PopoverTrigger>\n\t\t\t\t\t)}\n\n\t\t\t\t\t<PopoverContent className=\"p-0 w-auto\">\n\t\t\t\t\t\t<Calendar\n\t\t\t\t\t\t\tmode=\"single\"\n\t\t\t\t\t\t\tselected={displayDate}\n\t\t\t\t\t\t\tmonth={month}\n\t\t\t\t\t\t\tonSelect={(newDate) => {\n\t\t\t\t\t\t\t\tif (newDate) {\n\t\t\t\t\t\t\t\t\tnewDate.setHours(\n\t\t\t\t\t\t\t\t\t\tmonth?.getHours() ?? 0,\n\t\t\t\t\t\t\t\t\t\tmonth?.getMinutes() ?? 0,\n\t\t\t\t\t\t\t\t\t\tmonth?.getSeconds() ?? 0,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tonSelect(newDate);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonMonthChange={handleMonthChange}\n\t\t\t\t\t\t\tyearRange={yearRange}\n\t\t\t\t\t\t\tlocale={locale}\n\t\t\t\t\t\t\t{...props}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{granularity !== \"day\" && (\n\t\t\t\t\t\t\t<div className=\"p-3 border-t border-border\">\n\t\t\t\t\t\t\t\t<TimePicker\n\t\t\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\t\t\tonChange?.(value);\n\t\t\t\t\t\t\t\t\t\tsetDisplayDate(value);\n\t\t\t\t\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\t\t\t\t\tsetMonth(value);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tdate={month}\n\t\t\t\t\t\t\t\t\thourCycle={hourCycle}\n\t\t\t\t\t\t\t\t\tgranularity={granularity}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</PopoverContent>\n\t\t\t\t</Popover>\n\t\t\t</>\n\t\t);\n\t},\n);\n\nBetterDatePicker.displayName = \"BetterDatePicker\";\n\nexport { BetterDatePicker, TimePicker, TimePickerInput };\nexport type { BetterDatePickerProps, BetterDatePickerRef, TimePickerType };\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { config } from \"@/config\";\nimport { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n\treturn twMerge(clsx(inputs));\n}\n\nexport function capitalize(str: string) {\n\treturn str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype GroupBy<T, K extends keyof T> = Record<string, T[]>;\n\nexport function groupBy<T, K extends keyof T>(\n\tarray: T[],\n\tkey: K,\n): GroupBy<T, K> {\n\treturn array.reduce(\n\t\t(acc, item) => {\n\t\t\tconst keyValue = String(item[key]);\n\t\t\tif (!acc[keyValue]) {\n\t\t\t\tacc[keyValue] = [];\n\t\t\t}\n\t\t\tacc[keyValue].push(item);\n\t\t\treturn acc;\n\t\t},\n\t\t{} as GroupBy<T, K>,\n\t);\n}\n\nexport function absoluteUrl(path: string) {\n\treturn process.env.NODE_ENV === \"development\"\n\t\t? `http://localhost:3000${path}`\n\t\t: `https://${config.appUrl}${path}`;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/config.ts",
      "content": "export const config = {\n  appUrl:\n    process.env.NODE_ENV === \"production\"\n      ? process.env.VERCEL_PROJECT_PRODUCTION_URL ??\n        process.env.NEXT_PUBLIC_APP_URL!\n      : \"localhost:3000\",\n  social: {\n    github: \"https://github.com/akash3444/shadcn-ui-blocks\",\n    twitter: \"https://twitter.com/akash_3444\",\n  },\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "src/components/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/components/ui/popover.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/components/ui/select.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport {\n  CaretSortIcon,\n  CheckIcon,\n  ChevronDownIcon,\n  ChevronUpIcon,\n} from \"@radix-ui/react-icons\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <CaretSortIcon className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUpIcon />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDownIcon />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <CheckIcon className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}