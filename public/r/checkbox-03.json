{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkbox-03",
  "type": "registry:component",
  "title": "Indeterminate Checkbox",
  "description": "An indeterminate checkbox component",
  "dependencies": [
    "lucide-react",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-checkbox",
    "lucide-react"
  ],
  "registryDependencies": [
    "checkbox"
  ],
  "files": [
    {
      "path": "src/components/customized/checkbox/checkbox-03.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\";\nimport { CheckIcon, MinusIcon } from \"lucide-react\";\nimport * as React from \"react\";\n\n// Replace the `Checkbox` component in `@components/ui/checkbox` with below component and use it here to support indeterminate.\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"group peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=indeterminate]:bg-primary data-[state=checked]:text-primary-foreground data-[state=indeterminate]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <MinusIcon className=\"h-4 w-4 hidden group-data-[state=indeterminate]:block\" />\n      <CheckIcon className=\"h-4 w-4 hidden group-data-[state=checked]:block\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n));\nCheckbox.displayName = CheckboxPrimitive.Root.displayName;\n\nexport default function IndeterminateCheckboxDemo() {\n  const [checked, setChecked] = React.useState<\n    Record<string, CheckboxPrimitive.CheckedState>\n  >({\n    child1: true,\n    child2: false,\n  });\n\n  const handleCheckedChange = (\n    name: string,\n    checked: CheckboxPrimitive.CheckedState\n  ) => {\n    setChecked((prev) => ({\n      ...prev,\n      [name]: checked,\n    }));\n  };\n\n  const handleParentCheckedChange = (\n    checked: CheckboxPrimitive.CheckedState\n  ) => {\n    setChecked({\n      child1: checked,\n      child2: checked,\n    });\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center\">\n        <Checkbox\n          id=\"parent\"\n          checked={\n            checked.child1 === checked.child2 ? checked.child1 : \"indeterminate\"\n          }\n          onCheckedChange={handleParentCheckedChange}\n        />\n        <label\n          htmlFor=\"parent\"\n          className=\"ml-2 text-sm font-medium leading-none\"\n        >\n          Parent\n        </label>\n      </div>\n      <div className=\"pl-6 space-y-2\">\n        <div className=\"flex items-center\">\n          <Checkbox\n            id=\"child1\"\n            checked={checked.child1}\n            onCheckedChange={(checked) =>\n              handleCheckedChange(\"child1\", checked)\n            }\n          />\n          <label\n            htmlFor=\"child1\"\n            className=\"ml-2 text-sm font-medium leading-none\"\n          >\n            Child 1\n          </label>\n        </div>\n        <div className=\"flex items-center\">\n          <Checkbox\n            id=\"child2\"\n            checked={checked.child2}\n            onCheckedChange={(checked) =>\n              handleCheckedChange(\"child2\", checked)\n            }\n          />\n          <label\n            htmlFor=\"child2\"\n            className=\"ml-2 text-sm font-medium leading-none\"\n          >\n            Child 2\n          </label>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { config } from \"@/config\";\nimport { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n\treturn twMerge(clsx(inputs));\n}\n\nexport function capitalize(str: string) {\n\treturn str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype GroupBy<T, K extends keyof T> = Record<string, T[]>;\n\nexport function groupBy<T, K extends keyof T>(\n\tarray: T[],\n\tkey: K,\n): GroupBy<T, K> {\n\treturn array.reduce(\n\t\t(acc, item) => {\n\t\t\tconst keyValue = String(item[key]);\n\t\t\tif (!acc[keyValue]) {\n\t\t\t\tacc[keyValue] = [];\n\t\t\t}\n\t\t\tacc[keyValue].push(item);\n\t\t\treturn acc;\n\t\t},\n\t\t{} as GroupBy<T, K>,\n\t);\n}\n\nexport function absoluteUrl(path: string) {\n\treturn process.env.NODE_ENV === \"development\"\n\t\t? `http://localhost:3000${path}`\n\t\t: `https://${config.appUrl}${path}`;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/config.ts",
      "content": "export const config = {\n  appUrl:\n    process.env.NODE_ENV === \"production\"\n      ? process.env.VERCEL_PROJECT_PRODUCTION_URL ??\n        process.env.NEXT_PUBLIC_APP_URL!\n      : \"localhost:3000\",\n  social: {\n    github: \"https://github.com/akash3444/shadcn-ui-blocks\",\n    twitter: \"https://twitter.com/akash_3444\",\n  },\n};\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}