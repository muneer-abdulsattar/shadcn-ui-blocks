{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table",
  "type": "registry:ui",
  "title": "Table",
  "files": [
    {
      "path": "src/components/extensions/Table/index.tsx",
      "content": "\"use client\";\nimport type { Row } from \"@tanstack/react-table\";\nimport {\n\ttype VisibilityState,\n\tflexRender,\n\tgetCoreRowModel,\n\tuseReactTable,\n} from \"@tanstack/react-table\";\nimport * as React from \"react\";\n\nimport {\n\tTable as CNTable,\n\tTableBody,\n\tTableCell,\n\tTableHead,\n\tTableHeader,\n\tTableRow,\n} from \"@/components/ui/table\";\n\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\n\nimport TableHeaderDropdown from \"@/components/extensions/Table/TableHeaderDropdown\";\nimport type { ColumnDef, Table as TTable } from \"@tanstack/react-table\";\n\ninterface DataTableProps<TData, TValue> {\n\tcolumns: ColumnDef<TData, TValue>[];\n\tdata?: TData[] | null;\n\tisLoading?: boolean;\n\tExpandableChildren?: (props: {\n\t\trow: Row<TData>;\n\t\tcolSpan: number;\n\t\tclassName: string;\n\t}) => React.ReactNode;\n\tclassName?: string;\n\tchildren?: (Table: TTable<TData>) => React.ReactNode;\n}\n\nexport default function Table<TData, TValue>({\n\tcolumns,\n\tdata,\n\tisLoading,\n\tExpandableChildren,\n\tclassName,\n\tchildren,\n}: DataTableProps<TData, TValue>) {\n\tconst [columnVisibility, setColumnVisibility] =\n\t\tReact.useState<VisibilityState>({});\n\n\tconst table = useReactTable({\n\t\tdata: data || [],\n\t\t// @ts-ignore\n\t\tcolumns: columns.map((column) => ({\n\t\t\tenableSorting: false,\n\t\t\tenableHiding: false,\n\t\t\tenableColumnFilter: false,\n\t\t\theader: ({ column }) => (\n\t\t\t\t<TableHeaderDropdown column={column} title={column.id} />\n\t\t\t),\n\t\t\t...column,\n\t\t})),\n\t\tstate: {\n\t\t\tcolumnVisibility,\n\t\t},\n\n\t\tonColumnVisibilityChange: setColumnVisibility,\n\t\tgetCoreRowModel: getCoreRowModel(),\n\t});\n\n\tReact.useEffect(() => {\n\t\t// Load column visibility from localStorage on initial render\n\t\tconst savedVisibility = localStorage.getItem(\n\t\t\t`table-visibility-${columns[0]?.id || \"default\"}`,\n\t\t);\n\t\tif (savedVisibility) {\n\t\t\ttry {\n\t\t\t\tconst parsedVisibility = JSON.parse(savedVisibility);\n\t\t\t\tsetColumnVisibility(parsedVisibility);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(\"Failed to parse saved column visibility\", error);\n\t\t\t}\n\t\t}\n\t}, []);\n\n\t// Save column visibility to localStorage when it changes\n\tReact.useEffect(() => {\n\t\tif (Object.keys(columnVisibility).length) {\n\t\t\tlocalStorage.setItem(\n\t\t\t\t`table-visibility-${columns[0]?.id || \"default\"}`,\n\t\t\t\tJSON.stringify(columnVisibility),\n\t\t\t);\n\t\t}\n\t}, [columnVisibility, columns]);\n\n\treturn (\n\t\t<div className=\"space-y-1\">\n\t\t\t{children?.(table)}\n\t\t\t<div className=\"flex\">\n\t\t\t\t<ScrollArea className={cn(\"flex-1 w-1\", className)}>\n\t\t\t\t\t<>\n\t\t\t\t\t\t<CNTable className=\"relative border rounded-lg\">\n\t\t\t\t\t\t\t<TableHeader>\n\t\t\t\t\t\t\t\t{table.getHeaderGroups().map((headerGroup) => (\n\t\t\t\t\t\t\t\t\t<TableRow key={headerGroup.id}>\n\t\t\t\t\t\t\t\t\t\t{headerGroup.headers.map((header) => {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<TableHead\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={header.id}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolSpan={header.colSpan}\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\twidth: `${header.getSize()}px`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"font-normal text-primary text-sm\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{header.isPlaceholder\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: flexRender(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theader.column.columnDef.header,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theader.getContext(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</TableHeader>\n\t\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t\t{isLoading ? (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t{Array.from({ length: 10 }).map(() => (\n\t\t\t\t\t\t\t\t\t\t\t<TableRow key={Math.random() * 25}>\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolSpan={columns.length}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"dark:odd:bg-gray-900 odd:bg-gray-50\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Skeleton className=\"h-5\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t{table.getRowModel().rows?.length ? (\n\t\t\t\t\t\t\t\t\t\t\ttable.getRowModel().rows.map((row) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<React.Fragment key={row.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableRow\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdata-state={row.getIsSelected() && \"selected\"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.getVisibleCells().map((cell) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trow.getIsExpanded()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"bg-neutral-50 dark:bg-neutral-900\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t${cell.column.getIsPinned() ? \"sticky z-50 right-0\" : \"\"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={cell.id}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{flexRender(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcell.column.columnDef.cell,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcell.getContext(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{row.getIsExpanded() && ExpandableChildren ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ExpandableChildren({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trow,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolSpan: columns.length,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"bg-neutral-50 dark:bg-neutral-900 pl-24\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolSpan={columns.length}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"h-24 text-center\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\tNo results.\n\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t\t</CNTable>\n\n\t\t\t\t\t\t<ScrollBar orientation=\"horizontal\" className=\"w-full\" />\n\t\t\t\t\t</>\n\t\t\t\t</ScrollArea>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/extensions/Table/TableColumnView.tsx",
      "content": "import type { Table } from \"@tanstack/react-table\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tDropdownMenu,\n\tDropdownMenuCheckboxItem,\n\tDropdownMenuContent,\n\tDropdownMenuLabel,\n\tDropdownMenuSeparator,\n\tDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Settings2 } from \"lucide-react\";\n\ninterface DataTableViewOptionsProps<TData> {\n\ttable: Table<TData>;\n\n\tshowHideColumns?: boolean;\n}\n\nexport default function TableColumnView<TData>({\n\ttable,\n\tshowHideColumns = true,\n}: DataTableViewOptionsProps<TData>) {\n\tconst columns = table\n\t\t.getAllColumns()\n\t\t.filter(\n\t\t\t(column) =>\n\t\t\t\ttypeof column.accessorFn !== \"undefined\" && column.getCanHide(),\n\t\t);\n\n\tif (columns.length === 0) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<DropdownMenu>\n\t\t\t\t<DropdownMenuTrigger asChild>\n\t\t\t\t\t{showHideColumns ? (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\tclassName=\"hidden lg:flex ml-auto h-8\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Settings2 className=\"mr-2 w-4 h-4\" />\n\t\t\t\t\t\t\tView\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t) : null}\n\t\t\t\t</DropdownMenuTrigger>\n\t\t\t\t<DropdownMenuContent align=\"end\" className=\"w-[150px]\">\n\t\t\t\t\t<DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n\t\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t\t{columns.map((column) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<DropdownMenuCheckboxItem\n\t\t\t\t\t\t\t\tkey={column.id}\n\t\t\t\t\t\t\t\tclassName=\"capitalize\"\n\t\t\t\t\t\t\t\tchecked={column.getIsVisible()}\n\t\t\t\t\t\t\t\tonCheckedChange={(value) => column.toggleVisibility(!!value)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{column.id}\n\t\t\t\t\t\t\t</DropdownMenuCheckboxItem>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</DropdownMenuContent>\n\t\t\t</DropdownMenu>\n\t\t</>\n\t);\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/extensions/Table/TableHeaderDropdown.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { DropdownMenuSeparator } from \"@/components/ui/dropdown-menu\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n\tSelect,\n\tSelectContent,\n\tSelectGroup,\n\tSelectItem,\n\tSelectTrigger,\n\tSelectValue,\n} from \"@/components/ui/select\";\nimport { cn } from \"@/lib/utils\";\nimport type { Column } from \"@tanstack/react-table\";\nimport {\n\tArrowDown,\n\tArrowUp,\n\tBan,\n\tChevronsUpDown,\n\tEyeOff,\n\tX,\n} from \"lucide-react\";\nimport { parseAsString, useQueryState } from \"nuqs\";\nimport type React from \"react\";\n\n// import { SortKey, sortValueKey } from \"@/variables/tableVars\";\n\nconst sortValueKey = \"sortValue\";\nconst SortKey = \"sortKey\";\n\ninterface TableHeaderDropdownProps<TData, TValue>\n\textends React.HTMLAttributes<HTMLDivElement> {\n\tcolumn: Column<TData, TValue>;\n\ttitle: string;\n}\n\nexport default function TableHeaderDropdown<TData, TValue>({\n\tcolumn,\n\ttitle,\n\tclassName,\n}: TableHeaderDropdownProps<TData, TValue>) {\n\tconst [sortKey, setSortKey] = useQueryState(SortKey, parseAsString);\n\n\tconst [sortValue, setSortValue] = useQueryState(sortValueKey, parseAsString);\n\n\tconst [filterValue, setFilterValue] = useQueryState(\n\t\tcolumn.id,\n\t\tparseAsString.withDefault(\"\").withOptions({\n\t\t\tthrottleMs: 500,\n\t\t\tclearOnDefault: true,\n\t\t}),\n\t);\n\n\tif (!column.getCanSort() && !column.getCanFilter() && !column.getCanHide()) {\n\t\treturn <div className={cn(className)}>{title}</div>;\n\t}\n\n\treturn (\n\t\t<div className={cn(\"flex min-w-0 items-center space-x-2\", className)}>\n\t\t\t<Popover>\n\t\t\t\t<PopoverTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant={filterValue ? \"secondary\" : \"ghost\"}\n\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\tclassName=\"data-[state=open]:bg-accent -mx-0 px-3 h-8\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<span>{title}</span>\n\t\t\t\t\t\t{sortKey === column.id ? (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{sortValue === \"asc\" ? (\n\t\t\t\t\t\t\t\t\t<ArrowUp className=\"ml-2 w-4 h-4\" />\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<ArrowDown className=\"ml-2 w-4 h-4\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\tcolumn.getCanSort() && <ChevronsUpDown className=\"ml-2 w-4 h-4\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Button>\n\t\t\t\t</PopoverTrigger>\n\t\t\t\t<PopoverContent align=\"start\" className=\"p-1 w-[180px]\">\n\t\t\t\t\t{column.getCanSort() && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\tclassName=\"justify-start w-full\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tsetSortKey(column.id);\n\t\t\t\t\t\t\t\t\tsetSortValue(\"asc\");\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<ArrowUp className=\"mr-2 w-3.5 h-3.5 text-muted-foreground/70\" />\n\t\t\t\t\t\t\t\tAsc\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\tclassName=\"justify-start w-full\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tsetSortKey(column.id);\n\t\t\t\t\t\t\t\t\tsetSortValue(\"desc\");\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<ArrowDown className=\"mr-2 w-3.5 h-3.5 text-muted-foreground/70\" />\n\t\t\t\t\t\t\t\tDesc\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t\t{sortValue ? (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\tclassName=\"justify-start w-full\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetSortKey(null);\n\t\t\t\t\t\t\t\tsetSortValue(null);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Ban className=\"mr-2 w-3.5 h-3.5 text-muted-foreground/70\" />\n\t\t\t\t\t\t\tNone\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t) : null}\n\n\t\t\t\t\t{column.getCanHide() && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{column.getCanSort() && <DropdownMenuSeparator />}\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\tclassName=\"justify-start w-full\"\n\t\t\t\t\t\t\t\tonClick={() => column.toggleVisibility(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<EyeOff className=\"mr-2 w-3.5 h-3.5 text-muted-foreground/70\" />\n\t\t\t\t\t\t\t\tHide\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t{column.columnDef.enableColumnFilter && <DropdownMenuSeparator />}\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t\t{column.columnDef.enableColumnFilter && (\n\t\t\t\t\t\t<TableHeaderDropdownFilter column={column} />\n\t\t\t\t\t)}\n\t\t\t\t</PopoverContent>\n\t\t\t</Popover>\n\t\t</div>\n\t);\n}\n\nfunction TableHeaderDropdownFilter<TData, TValue>({\n\tcolumn,\n}: {\n\tcolumn: Column<TData, TValue>;\n}) {\n\tconst {\n\t\tplaceholder = `Filter ${column.id}`,\n\t\tinputType = \"text\",\n\t\tinput,\n\t\toptions = [],\n\t\tclassName = [],\n\t} = (column.columnDef.meta || {}) as {\n\t\tplaceholder?: string;\n\t\tinputType?: \"text\" | \"number\" | \"select\";\n\t\tinput?: (\n\t\t\tvalue: string,\n\t\t\tonChange: (value: string) => void,\n\t\t) => React.ReactNode;\n\t\toptions?:\n\t\t\t| {\n\t\t\t\t\tlabel: string;\n\t\t\t\t\tvalue: string;\n\t\t\t  }[]\n\t\t\t| undefined;\n\t\tclassName?: string;\n\t};\n\n\tconst [filterValue, setFilterValue] = useQueryState(\n\t\tcolumn.id,\n\t\tparseAsString.withDefault(\"\").withOptions({\n\t\t\tthrottleMs: 500,\n\t\t\tclearOnDefault: true,\n\t\t}),\n\t);\n\n\treturn (\n\t\t<div className=\"flex gap-1\">\n\t\t\t{input ? (\n\t\t\t\tinput(filterValue, setFilterValue)\n\t\t\t) : inputType === \"select\" ? (\n\t\t\t\t<Select value={filterValue} onValueChange={setFilterValue}>\n\t\t\t\t\t<SelectTrigger className=\"w-[180px]\">\n\t\t\t\t\t\t<SelectValue placeholder={placeholder ?? `Select ${column.id}`} />\n\t\t\t\t\t</SelectTrigger>\n\t\t\t\t\t<SelectContent>\n\t\t\t\t\t\t<SelectGroup>\n\t\t\t\t\t\t\t{options?.map((option) => (\n\t\t\t\t\t\t\t\t<SelectItem key={option.value} value={option.value}>\n\t\t\t\t\t\t\t\t\t{option.label}\n\t\t\t\t\t\t\t\t</SelectItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</SelectGroup>\n\t\t\t\t\t</SelectContent>\n\t\t\t\t</Select>\n\t\t\t) : (\n\t\t\t\t<Input\n\t\t\t\t\tvalue={filterValue || \"\"}\n\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\tsetFilterValue(e.target.value);\n\t\t\t\t\t}}\n\t\t\t\t\ttype={inputType}\n\t\t\t\t\tplaceholder={placeholder ?? `Filter ${column.id}`}\n\t\t\t\t\tclassName={cn(\"px-2 py-1\", className)}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t<Button\n\t\t\t\tsize=\"icon\"\n\t\t\t\tvariant=\"outline\"\n\t\t\t\tonClick={() => setFilterValue(null)}\n\t\t\t>\n\t\t\t\t<X />\n\t\t\t</Button>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:ui"
    }
  ]
}