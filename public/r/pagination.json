{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pagination",
  "type": "registry:component",
  "title": "Pagination",
  "dependencies": [
    "nuqs"
  ],
  "registryDependencies": [
    "pagination",
    "label",
    "button",
    "select"
  ],
  "files": [
    {
      "path": "src/registry/default/extensions/pagination.tsx",
      "content": "\"use client\";\nimport { useMemo } from \"react\";\n\nimport {\n\tPagination as CNPagination,\n\tPaginationContent,\n\tPaginationItem,\n\tPaginationLink,\n} from \"@/components/ui/pagination\";\n\nimport { Label } from \"@/components/ui/label\";\n\nimport { Button } from \"@/components/ui/button\";\n\nimport {\n\tSelect,\n\tSelectContent,\n\tSelectGroup,\n\tSelectItem,\n\tSelectTrigger,\n\tSelectValue,\n} from \"@/components/ui/select\";\n\nimport {\n\tChevronLeft,\n\tChevronRight,\n\tChevronsLeft,\n\tChevronsRight,\n} from \"lucide-react\";\nimport { parseAsInteger, useQueryState } from \"nuqs\";\n\nimport { cn } from \"@/lib/utils\";\n// import {\n// \tPageNumberDefault,\n// \tPageNumberKey,\n// \tRowSizes,\n// \tTakeDefault,\n// \tTakeKey,\n// } from \"@/variables/paginationVars\";\n\nconst RowSizes = [5, 10, 20, 50, 100];\n\nconst PageNumberKey = \"page\";\nconst PageNumberDefault = 0;\nconst TakeDefault = 10;\nconst TakeKey = \"take\";\n\nexport const Pagination = ({\n\ttotal,\n\tshowFastButtons = false,\n}: { showFastButtons?: boolean; total: number }) => {\n\tconst [take] = useQueryState(\n\t\tTakeKey,\n\t\tparseAsInteger.withDefault(TakeDefault),\n\t);\n\tconst [page, setPage] = useQueryState(\n\t\tPageNumberKey,\n\t\tparseAsInteger.withDefault(PageNumberDefault),\n\t);\n\n\tconst totalPages = useMemo(() => {\n\t\treturn Math.ceil(total / Number(take));\n\t}, [total, take]);\n\n\tconst createPageNumbers = useMemo(() => {\n\t\tconst pageNumbers: number[] = [];\n\t\tconst currentPage = Number(page);\n\n\t\tif (totalPages <= 4) {\n\t\t\tfor (let i = 1; i <= totalPages; i++) {\n\t\t\t\tpageNumbers.push(i);\n\t\t\t}\n\t\t} else {\n\t\t\tlet startPage = Math.max(1, currentPage - 1);\n\t\t\tlet endPage = Math.min(totalPages, currentPage + 2);\n\n\t\t\t// Adjust start and end if they don't fit exactly 4 pages\n\t\t\tif (endPage - startPage < 3) {\n\t\t\t\tif (startPage === 1) {\n\t\t\t\t\tendPage = startPage + 3;\n\t\t\t\t} else if (endPage === totalPages) {\n\t\t\t\t\tstartPage = endPage - 3;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i = startPage; i <= endPage; i++) {\n\t\t\t\tpageNumbers.push(i);\n\t\t\t}\n\t\t}\n\n\t\treturn pageNumbers;\n\t}, [totalPages, page]);\n\n\treturn (\n\t\t<div className=\"flex flex-wrap justify-between items-center gap-5 px-5 py-2 select-none\">\n\t\t\t<div className=\"text-muted-foreground text-sm\">\n\t\t\t\tShow {page * take}-{page * take + take} from {total}\n\t\t\t</div>\n\t\t\t{totalPages > 0 && (\n\t\t\t\t<div>\n\t\t\t\t\t<CNPagination className=\"block\">\n\t\t\t\t\t\t<PaginationContent>\n\t\t\t\t\t\t\t{showFastButtons && (\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\t\tdisabled={Number(page) <= 0}\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tsetPage(0);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChevronsLeft size={15} />\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\tdisabled={Number(page) <= 0}\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tsetPage(Number(page) - 1);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<ChevronLeft size={15} />\n\t\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t\t{createPageNumbers.map((pageNum, i) => (\n\t\t\t\t\t\t\t\t<PaginationItem key={`${pageNum}-${i + 1}`}>\n\t\t\t\t\t\t\t\t\t<PaginationLink\n\t\t\t\t\t\t\t\t\t\thref=\"\"\n\t\t\t\t\t\t\t\t\t\tisActive={Number(page) + 1 === pageNum}\n\t\t\t\t\t\t\t\t\t\tclassName={cn(\"rounded-sm w-8 h-8 cursor-pointer\", {\n\t\t\t\t\t\t\t\t\t\t\t\"bg-primary/10 text-primary border-none\":\n\t\t\t\t\t\t\t\t\t\t\t\tpageNum - 1 === page,\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetPage(pageNum - 1);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{pageNum}\n\t\t\t\t\t\t\t\t\t</PaginationLink>\n\t\t\t\t\t\t\t\t</PaginationItem>\n\t\t\t\t\t\t\t))}\n\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\tdisabled={Number(totalPages) <= Number(page) + 1}\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tsetPage(Number(page) + 1);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<ChevronRight size={15} />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t{showFastButtons && (\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\t\tdisabled={Number(totalPages) <= Number(page) + 1}\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tsetPage(totalPages - 1);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChevronsRight size={15} />\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</PaginationContent>\n\t\t\t\t\t</CNPagination>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport const PaginationTakeSelection = () => {\n\tconst [take, setTake] = useQueryState(\n\t\tTakeKey,\n\t\tparseAsInteger.withDefault(TakeDefault),\n\t);\n\tconst [, setPage] = useQueryState(\n\t\tPageNumberKey,\n\t\tparseAsInteger.withDefault(PageNumberDefault),\n\t);\n\n\tconsole.log(\"take\", take);\n\n\treturn (\n\t\t<>\n\t\t\t<div>\n\t\t\t\t<Label className=\"flex items-center gap-2\">\n\t\t\t\t\t<span className=\"text-muted-foreground\">Show</span>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tonValueChange={(value: string) => {\n\t\t\t\t\t\t\tsetTake(Number.parseInt(value));\n\t\t\t\t\t\t\tsetPage(0);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdefaultValue={String(take)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<SelectTrigger className=\"w-[80px]\">\n\t\t\t\t\t\t\t<SelectValue placeholder=\"Rows per page\" />\n\t\t\t\t\t\t</SelectTrigger>\n\t\t\t\t\t\t<SelectContent>\n\t\t\t\t\t\t\t<SelectGroup>\n\t\t\t\t\t\t\t\t{RowSizes.map((size) => (\n\t\t\t\t\t\t\t\t\t<SelectItem key={size} value={String(size)}>\n\t\t\t\t\t\t\t\t\t\t{size}\n\t\t\t\t\t\t\t\t\t</SelectItem>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</SelectGroup>\n\t\t\t\t\t\t</SelectContent>\n\t\t\t\t\t</Select>\n\t\t\t\t</Label>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n",
      "type": "registry:component"
    }
  ]
}