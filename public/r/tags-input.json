{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tags-input",
  "type": "registry:ui",
  "title": "Tags Input",
  "description": "A simple tags input",
  "dependencies": [
    "lucide-react",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "lucide-react"
  ],
  "registryDependencies": [
    "badge",
    "input"
  ],
  "files": [
    {
      "path": "src/components/extensions/tags-input.tsx",
      "content": "\"use client\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport { X as RemoveIcon } from \"lucide-react\";\nimport React from \"react\";\n\n/**\n * used for identifying the split char and use will pasting\n */\nconst SPLITTER_REGEX = /[\\n#?=&\\t,./-]+/;\n\n/**\n * used for formatting the pasted element for the correct value format to be added\n */\n\nconst FORMATTING_REGEX = /^[^a-zA-Z0-9]*|[^a-zA-Z0-9]*$/g;\n\nexport interface TagsInputProps extends React.HTMLAttributes<HTMLDivElement> {\n\tvalue: string[];\n\tonValueChange: (value: string[]) => void;\n\tplaceholder?: string;\n\tmaxItems?: number;\n\tminItems?: number;\n}\n\ninterface TagsInputContextProps {\n\tvalue: string[];\n\tonValueChange: (value: any) => void;\n\tinputValue: string;\n\tsetInputValue: React.Dispatch<React.SetStateAction<string>>;\n\tactiveIndex: number;\n\tsetActiveIndex: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst TagInputContext = React.createContext<TagsInputContextProps | null>(null);\n\nconst TagsInput = React.forwardRef<HTMLDivElement, TagsInputProps>(\n\t(\n\t\t{\n\t\t\tvalue = [],\n\t\t\tonValueChange,\n\t\t\tplaceholder,\n\t\t\tmaxItems,\n\t\t\tminItems,\n\t\t\tclassName,\n\t\t\tdir,\n\t\t\t...props\n\t\t},\n\t\tref,\n\t) => {\n\t\tconst [activeIndex, setActiveIndex] = React.useState(-1);\n\t\tconst [inputValue, setInputValue] = React.useState(\"\");\n\t\tconst [disableInput, setDisableInput] = React.useState(false);\n\t\tconst [disableButton, setDisableButton] = React.useState(false);\n\t\tconst [isValueSelected, setIsValueSelected] = React.useState(false);\n\t\tconst [selectedValue, setSelectedValue] = React.useState(\"\");\n\n\t\tconst parseMinItems = minItems ?? 0;\n\t\tconst parseMaxItems = maxItems ?? Number.POSITIVE_INFINITY;\n\n\t\tconst onValueChangeHandler = React.useCallback(\n\t\t\t(val: string) => {\n\t\t\t\tif (!value.includes(val) && value.length < parseMaxItems) {\n\t\t\t\t\tonValueChange([...value, val]);\n\t\t\t\t}\n\t\t\t},\n\t\t\t[value],\n\t\t);\n\n\t\tconst RemoveValue = React.useCallback(\n\t\t\t(val: string) => {\n\t\t\t\tif (value.includes(val) && value.length > parseMinItems) {\n\t\t\t\t\tonValueChange(value.filter((item) => item !== val));\n\t\t\t\t}\n\t\t\t},\n\t\t\t[value],\n\t\t);\n\n\t\tconst handlePaste = React.useCallback(\n\t\t\t(e: React.ClipboardEvent<HTMLInputElement>) => {\n\t\t\t\te.preventDefault();\n\t\t\t\tconst tags = e.clipboardData.getData(\"text\").split(SPLITTER_REGEX);\n\t\t\t\tconst newValue = [...value];\n\t\t\t\ttags.forEach((item) => {\n\t\t\t\t\tconst parsedItem = item.replaceAll(FORMATTING_REGEX, \"\").trim();\n\t\t\t\t\tif (\n\t\t\t\t\t\tparsedItem.length > 0 &&\n\t\t\t\t\t\t!newValue.includes(parsedItem) &&\n\t\t\t\t\t\tnewValue.length < parseMaxItems\n\t\t\t\t\t) {\n\t\t\t\t\t\tnewValue.push(parsedItem);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tonValueChange(newValue);\n\t\t\t\tsetInputValue(\"\");\n\t\t\t},\n\t\t\t[value],\n\t\t);\n\n\t\tconst handleSelect = React.useCallback(\n\t\t\t(e: React.SyntheticEvent<HTMLInputElement>) => {\n\t\t\t\tconst target = e.currentTarget;\n\t\t\t\tconst selection = target.value.substring(\n\t\t\t\t\ttarget.selectionStart ?? 0,\n\t\t\t\t\ttarget.selectionEnd ?? 0,\n\t\t\t\t);\n\n\t\t\t\tsetSelectedValue(selection);\n\t\t\t\tsetIsValueSelected(selection === inputValue);\n\t\t\t},\n\t\t\t[inputValue],\n\t\t);\n\n\t\t// ? suggest : a refactor rather then using a useEffect\n\n\t\tReact.useEffect(() => {\n\t\t\tconst VerifyDisable = () => {\n\t\t\t\tif (value.length - 1 >= parseMinItems) {\n\t\t\t\t\tsetDisableButton(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetDisableButton(true);\n\t\t\t\t}\n\t\t\t\tif (value.length + 1 <= parseMaxItems) {\n\t\t\t\t\tsetDisableInput(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetDisableInput(true);\n\t\t\t\t}\n\t\t\t};\n\t\t\tVerifyDisable();\n\t\t}, [value]);\n\n\t\t// ? check: Under build , default option support\n\t\t// * support : for the uncontrolled && controlled ui\n\n\t\t/*  React.useEffect(() => {\n      if (!defaultOptions) return;\n      onValueChange([...value, ...defaultOptions]);\n    }, []); */\n\n\t\tconst handleKeyDown = React.useCallback(\n\t\t\tasync (e: React.KeyboardEvent<HTMLInputElement>) => {\n\t\t\t\te.stopPropagation();\n\n\t\t\t\tconst moveNext = () => {\n\t\t\t\t\tconst nextIndex =\n\t\t\t\t\t\tactiveIndex + 1 > value.length - 1 ? -1 : activeIndex + 1;\n\t\t\t\t\tsetActiveIndex(nextIndex);\n\t\t\t\t};\n\n\t\t\t\tconst movePrev = () => {\n\t\t\t\t\tconst prevIndex =\n\t\t\t\t\t\tactiveIndex - 1 < 0 ? value.length - 1 : activeIndex - 1;\n\t\t\t\t\tsetActiveIndex(prevIndex);\n\t\t\t\t};\n\n\t\t\t\tconst moveCurrent = () => {\n\t\t\t\t\tconst newIndex =\n\t\t\t\t\t\tactiveIndex - 1 <= 0\n\t\t\t\t\t\t\t? value.length - 1 === 0\n\t\t\t\t\t\t\t\t? -1\n\t\t\t\t\t\t\t\t: 0\n\t\t\t\t\t\t\t: activeIndex - 1;\n\t\t\t\t\tsetActiveIndex(newIndex);\n\t\t\t\t};\n\t\t\t\tconst target = e.currentTarget;\n\n\t\t\t\t// ? Suggest : the multi select should support the same pattern\n\n\t\t\t\tswitch (e.key) {\n\t\t\t\t\tcase \"ArrowLeft\":\n\t\t\t\t\t\tif (dir === \"rtl\") {\n\t\t\t\t\t\t\tif (value.length > 0 && activeIndex !== -1) {\n\t\t\t\t\t\t\t\tmoveNext();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (value.length > 0 && target.selectionStart === 0) {\n\t\t\t\t\t\t\t\tmovePrev();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"ArrowRight\":\n\t\t\t\t\t\tif (dir === \"rtl\") {\n\t\t\t\t\t\t\tif (value.length > 0 && target.selectionStart === 0) {\n\t\t\t\t\t\t\t\tmovePrev();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (value.length > 0 && activeIndex !== -1) {\n\t\t\t\t\t\t\t\tmoveNext();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"Backspace\":\n\t\t\t\t\tcase \"Delete\":\n\t\t\t\t\t\tif (value.length > 0) {\n\t\t\t\t\t\t\tif (activeIndex !== -1 && activeIndex < value.length) {\n\t\t\t\t\t\t\t\tRemoveValue(value[activeIndex]);\n\t\t\t\t\t\t\t\tmoveCurrent();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (target.selectionStart === 0) {\n\t\t\t\t\t\t\t\t\tif (selectedValue === inputValue || isValueSelected) {\n\t\t\t\t\t\t\t\t\t\tRemoveValue(value[value.length - 1]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"Escape\":\n\t\t\t\t\t\tconst newIndex = activeIndex === -1 ? value.length - 1 : -1;\n\t\t\t\t\t\tsetActiveIndex(newIndex);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"Enter\":\n\t\t\t\t\t\tif (inputValue.trim() !== \"\") {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\tonValueChangeHandler(inputValue);\n\t\t\t\t\t\t\tsetInputValue(\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t},\n\t\t\t[activeIndex, value, inputValue, RemoveValue],\n\t\t);\n\n\t\tconst mousePreventDefault = React.useCallback((e: React.MouseEvent) => {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t}, []);\n\n\t\tconst handleChange = React.useCallback(\n\t\t\t(e: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\t\tsetInputValue(e.currentTarget.value);\n\t\t\t},\n\t\t\t[],\n\t\t);\n\n\t\treturn (\n\t\t\t<TagInputContext.Provider\n\t\t\t\tvalue={{\n\t\t\t\t\tvalue,\n\t\t\t\t\tonValueChange,\n\t\t\t\t\tinputValue,\n\t\t\t\t\tsetInputValue,\n\t\t\t\t\tactiveIndex,\n\t\t\t\t\tsetActiveIndex,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\t{...props}\n\t\t\t\t\tref={ref}\n\t\t\t\t\tdir={dir}\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\"flex items-center flex-wrap gap-1 p-1 rounded-md border border-input bg-background overflow-hidden  min-h-10   ring-muted  \",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"focus-within:ring-ring\": activeIndex === -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tclassName,\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{value?.map((item, index) => (\n\t\t\t\t\t\t<Badge\n\t\t\t\t\t\t\ttabIndex={activeIndex !== -1 ? 0 : activeIndex}\n\t\t\t\t\t\t\tkey={item}\n\t\t\t\t\t\t\taria-disabled={disableButton}\n\t\t\t\t\t\t\tdata-active={activeIndex === index}\n\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\"relative px-1 rounded flex items-center gap-1 data-[active='true']:ring-2 data-[active='true']:ring-muted-foreground truncate aria-disabled:opacity-50 aria-disabled:cursor-not-allowed\",\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tvariant={\"secondary\"}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className=\"text-xs\">{item}</span>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\taria-label={`Remove ${item} option`}\n\t\t\t\t\t\t\t\taria-roledescription=\"button to remove option\"\n\t\t\t\t\t\t\t\tdisabled={disableButton}\n\t\t\t\t\t\t\t\tonMouseDown={mousePreventDefault}\n\t\t\t\t\t\t\t\tonClick={() => RemoveValue(item)}\n\t\t\t\t\t\t\t\tclassName=\"disabled:cursor-not-allowed\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span className=\"sr-only\">Remove {item} option</span>\n\t\t\t\t\t\t\t\t<RemoveIcon className=\"hover:stroke-destructive w-4 h-4\" />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</Badge>\n\t\t\t\t\t))}\n\t\t\t\t\t<Input\n\t\t\t\t\t\ttabIndex={0}\n\t\t\t\t\t\taria-label=\"input tag\"\n\t\t\t\t\t\tdisabled={disableInput}\n\t\t\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\t\t\tonPaste={handlePaste}\n\t\t\t\t\t\tvalue={inputValue}\n\t\t\t\t\t\tonSelect={handleSelect}\n\t\t\t\t\t\tonChange={activeIndex === -1 ? handleChange : undefined}\n\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\tonClick={() => setActiveIndex(-1)}\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"outline-0 border-none h-7 min-w-fit flex-1 focus-visible:outline-0 border-input focus-visible:ring-0 focus-visible:ring-offset-0 focus-visible:border-0 placeholder:text-muted-foreground px-1 border\",\n\t\t\t\t\t\t\tactiveIndex !== -1 && \"caret-transparent\",\n\t\t\t\t\t\t)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</TagInputContext.Provider>\n\t\t);\n\t},\n);\n\nTagsInput.displayName = \"TagsInput\";\n\nexport default TagsInput;\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/ui/badge.tsx",
      "content": "import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 focus:ring-offset-background\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { config } from \"@/config\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function capitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype GroupBy<T, K extends keyof T> = Record<string, T[]>;\n\nexport function groupBy<T, K extends keyof T>(\n  array: T[],\n  key: K\n): GroupBy<T, K> {\n  return array.reduce((acc, item) => {\n    const keyValue = String(item[key]);\n    if (!acc[keyValue]) {\n      acc[keyValue] = [];\n    }\n    acc[keyValue].push(item);\n    return acc;\n  }, {} as GroupBy<T, K>);\n}\n\nexport function absoluteUrl(path: string) {\n  return process.env.NODE_ENV === \"development\"\n    ? `http://localhost:3000${path}`\n    : `https://${config.appUrl}${path}`;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/config.ts",
      "content": "export const config = {\n  appUrl:\n    process.env.NODE_ENV === \"production\"\n      ? process.env.VERCEL_PROJECT_PRODUCTION_URL ??\n        process.env.NEXT_PUBLIC_APP_URL!\n      : \"localhost:3000\",\n  social: {\n    github: \"https://github.com/akash3444/shadcn-ui-blocks\",\n    twitter: \"https://twitter.com/akash_3444\",\n  },\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "src/components/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}