{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs-18",
  "type": "registry:component",
  "title": "Animated Tabs",
  "description": "Tabs with content animation",
  "dependencies": [
    "lucide-react",
    "framer-motion",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-tabs",
    "lucide-react",
    "framer-motion"
  ],
  "registryDependencies": [
    "tabs",
    "button"
  ],
  "files": [
    {
      "path": "src/components/customized/tabs/tabs-18.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { BanIcon, MoreHorizontalIcon } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nconst followers = [\n  { username: \"jane_doe\", fullName: \"Jane Doe\" },\n  { username: \"tech_guru\", fullName: \"Alex Thompson\" },\n  { username: \"nature_lover\", fullName: \"Emma Green\" },\n  { username: \"photogirl\", fullName: \"Sophia Martinez\" },\n  { username: \"code_master\", fullName: \"Liam Patel\" },\n];\n\nconst following = [\n  { username: \"startup_guy\", fullName: \"James Lee\" },\n  { username: \"design_dreamer\", fullName: \"Mia Wilson\" },\n  { username: \"art_addict\", fullName: \"Benjamin White\" },\n  { username: \"web_wizard\", fullName: \"Lucas Nguyen\" },\n  { username: \"health_nut\", fullName: \"Ella Singh\" },\n];\n\nconst listVariants = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n    transition: {\n      staggerChildren: 0.15,\n    },\n  },\n};\n\nconst itemVariants = {\n  hidden: { opacity: 0, y: 20 },\n  visible: { opacity: 1, y: 0 },\n};\n\nconst UserList = ({ users }: { users: typeof following }) => (\n  <AnimatePresence>\n    <motion.div\n      className=\"space-y-4\"\n      initial=\"hidden\"\n      animate=\"visible\"\n      exit=\"hidden\"\n      variants={listVariants}\n    >\n      {users.map(({ username, fullName }) => (\n        <motion.div\n          key={username}\n          className=\"flex items-center gap-2 justify-between\"\n          variants={itemVariants}\n          transition={{ type: \"tween\" }}\n        >\n          <div className=\"flex items-center gap-4\">\n            <div className=\"h-10 w-10 rounded-full bg-secondary\" />\n            <div>\n              <span className=\"block text-sm leading-none font-semibold\">\n                {fullName}\n              </span>\n              <span className=\"text-xs leading-none\">@{username}</span>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button size=\"icon\" variant=\"outline\">\n              <MoreHorizontalIcon className=\"h-5 w-5\" />\n            </Button>\n            <Button size=\"icon\" variant=\"outline\" className=\"text-destructive\">\n              <BanIcon className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        </motion.div>\n      ))}\n    </motion.div>\n  </AnimatePresence>\n);\n\nexport default function AnimatedTabsDemo() {\n  return (\n    <Tabs defaultValue=\"followers\" className=\"max-w-xs w-full\">\n      <TabsList className=\"w-full grid grid-cols-2\">\n        <TabsTrigger value=\"followers\">Followers</TabsTrigger>\n        <TabsTrigger value=\"following\">Following</TabsTrigger>\n      </TabsList>\n\n      <div className=\"mt-2 p-4 border rounded-md\">\n        <TabsContent value=\"followers\">\n          <UserList users={followers} />\n        </TabsContent>\n        <TabsContent value=\"following\">\n          <UserList users={following} />\n        </TabsContent>\n      </div>\n    </Tabs>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { config } from \"@/config\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function capitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype GroupBy<T, K extends keyof T> = Record<string, T[]>;\n\nexport function groupBy<T, K extends keyof T>(\n  array: T[],\n  key: K\n): GroupBy<T, K> {\n  return array.reduce((acc, item) => {\n    const keyValue = String(item[key]);\n    if (!acc[keyValue]) {\n      acc[keyValue] = [];\n    }\n    acc[keyValue].push(item);\n    return acc;\n  }, {} as GroupBy<T, K>);\n}\n\nexport function absoluteUrl(path: string) {\n  return process.env.NODE_ENV === \"development\"\n    ? `http://localhost:3000${path}`\n    : `https://${config.appUrl}${path}`;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/config.ts",
      "content": "export const config = {\n  appUrl:\n    process.env.NODE_ENV === \"production\"\n      ? process.env.VERCEL_PROJECT_PRODUCTION_URL ??\n        process.env.NEXT_PUBLIC_APP_URL!\n      : \"localhost:3000\",\n  social: {\n    github: \"https://github.com/akash3444/shadcn-ui-blocks\",\n    twitter: \"https://twitter.com/akash_3444\",\n  },\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "src/components/ui/tabs.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}