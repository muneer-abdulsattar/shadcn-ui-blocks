{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing-04",
  "type": "registry:block",
  "title": "Pricing 04",
  "description": "A simple pricing block",
  "dependencies": [
    "lucide-react",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-slot",
    "@radix-ui/react-separator",
    "@radix-ui/react-tabs",
    "@radix-ui/react-tooltip",
    "lucide-react"
  ],
  "registryDependencies": [
    "badge",
    "button",
    "separator",
    "tabs",
    "tooltip"
  ],
  "files": [
    {
      "path": "src/blocks/pricing-04/page.tsx",
      "content": "\"use client\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { ArrowUpRight, CircleCheck, CircleHelp } from \"lucide-react\";\nimport { useState } from \"react\";\n\nconst tooltipContent = {\n  styles: \"Choose from a variety of styles to suit your preferences.\",\n  filters: \"Choose from a variety of filters to enhance your portraits.\",\n  credits: \"Use these credits to retouch your portraits.\",\n};\n\nconst YEARLY_DISCOUNT = 20;\nconst plans = [\n  {\n    name: \"Starter\",\n    price: 20,\n    description:\n      \"Get 20 AI-generated portraits with 2 unique styles and filters.\",\n    features: [\n      { title: \"5 hours turnaround time\" },\n      { title: \"20 AI portraits\" },\n      { title: \"Choice of 2 styles\", tooltip: tooltipContent.styles },\n      { title: \"Choice of 2 filters\", tooltip: tooltipContent.filters },\n      { title: \"2 retouch credits\", tooltip: tooltipContent.credits },\n    ],\n  },\n  {\n    name: \"Advanced\",\n    price: 40,\n    isRecommended: true,\n    description:\n      \"Get 50 AI-generated portraits with 5 unique styles and filters.\",\n    features: [\n      { title: \"3 hours turnaround time\" },\n      { title: \"50 AI portraits\" },\n      { title: \"Choice of 5 styles\", tooltip: tooltipContent.styles },\n      { title: \"Choice of 5 filters\", tooltip: tooltipContent.filters },\n      { title: \"5 retouch credits\", tooltip: tooltipContent.credits },\n    ],\n    isPopular: true,\n  },\n  {\n    name: \"Premium\",\n    price: 80,\n    description:\n      \"Get 100 AI-generated portraits with 10 unique styles and filters.\",\n    features: [\n      { title: \"1-hour turnaround time\" },\n      { title: \"100 AI portraits\" },\n      { title: \"Choice of 10 styles\", tooltip: tooltipContent.styles },\n      { title: \"Choice of 10 filters\", tooltip: tooltipContent.filters },\n      { title: \"10 retouch credits\", tooltip: tooltipContent.credits },\n    ],\n  },\n];\n\nconst Pricing04 = () => {\n  const [selectedBillingPeriod, setSelectedBillingPeriod] = useState(\"monthly\");\n\n  return (\n    <div className=\"min-h-screen bg-accent flex flex-col items-center justify-center py-12 px-6\">\n      <h1 className=\"text-5xl font-bold text-center tracking-tight\">Pricing</h1>\n      <Tabs\n        value={selectedBillingPeriod}\n        onValueChange={setSelectedBillingPeriod}\n        className=\"mt-8\"\n      >\n        <TabsList className=\"h-11 bg-background border px-1.5 rounded-full\">\n          <TabsTrigger\n            value=\"monthly\"\n            className=\"px-4 py-1.5 rounded-full data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\n          >\n            Monthly\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"yearly\"\n            className=\"px-4 py-1.5 rounded-full data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\n          >\n            Yearly (Save {YEARLY_DISCOUNT}%)\n          </TabsTrigger>\n        </TabsList>\n      </Tabs>\n      <div className=\"mt-12 max-w-screen-lg mx-auto grid grid-cols-1 lg:grid-cols-3 items-center gap-8 lg:gap-0\">\n        {plans.map((plan) => (\n          <div\n            key={plan.name}\n            className={cn(\"relative p-6 bg-background border px-8\", {\n              \"shadow-[0px_2px_10px_0px_rgba(0,0,0,0.1)] py-14 z-[1] px-10 lg:-mx-2 overflow-hidden\":\n                plan.isPopular,\n            })}\n          >\n            {plan.isPopular && (\n              <Badge className=\"absolute top-10 right-10 rotate-[45deg] rounded-none px-10 uppercase translate-x-1/2 -translate-y-1/2\">\n                Most Popular\n              </Badge>\n            )}\n            <h3 className=\"text-lg font-medium\">{plan.name}</h3>\n            <p className=\"mt-2 text-4xl font-bold\">\n              $\n              {selectedBillingPeriod === \"monthly\"\n                ? plan.price\n                : plan.price * ((100 - YEARLY_DISCOUNT) / 100)}\n              <span className=\"ml-1.5 text-sm text-muted-foreground font-normal\">\n                /month\n              </span>\n            </p>\n            <p className=\"mt-4 font-medium text-muted-foreground\">\n              {plan.description}\n            </p>\n\n            <Button\n              variant={plan.isPopular ? \"default\" : \"outline\"}\n              size=\"lg\"\n              className=\"w-full mt-6 rounded-full text-base\"\n            >\n              Get Started <ArrowUpRight className=\"w-4 h-4\" />\n            </Button>\n            <Separator className=\"my-8\" />\n            <ul className=\"space-y-3\">\n              {plan.features.map((feature) => (\n                <li key={feature.title} className=\"flex items-start gap-1.5\">\n                  <CircleCheck className=\"h-4 w-4 mt-1 text-green-600\" />\n                  {feature.title}\n                  {feature.tooltip && (\n                    <Tooltip>\n                      <TooltipTrigger className=\"cursor-help\">\n                        <CircleHelp className=\"h-4 w-4 mt-1 text-gray-500\" />\n                      </TooltipTrigger>\n                      <TooltipContent>{feature.tooltip}</TooltipContent>\n                    </Tooltip>\n                  )}\n                </li>\n              ))}\n            </ul>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Pricing04;\n",
      "type": "registry:page",
      "target": "app/pricing/page.tsx"
    },
    {
      "path": "src/components/ui/badge.tsx",
      "content": "import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 focus:ring-offset-background\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { config } from \"@/config\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function capitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype GroupBy<T, K extends keyof T> = Record<string, T[]>;\n\nexport function groupBy<T, K extends keyof T>(\n  array: T[],\n  key: K\n): GroupBy<T, K> {\n  return array.reduce((acc, item) => {\n    const keyValue = String(item[key]);\n    if (!acc[keyValue]) {\n      acc[keyValue] = [];\n    }\n    acc[keyValue].push(item);\n    return acc;\n  }, {} as GroupBy<T, K>);\n}\n\nexport function absoluteUrl(path: string) {\n  return process.env.NODE_ENV === \"development\"\n    ? `http://localhost:3000${path}`\n    : `https://${config.appUrl}${path}`;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/config.ts",
      "content": "export const config = {\n  appUrl:\n    process.env.NODE_ENV === \"production\"\n      ? process.env.VERCEL_PROJECT_PRODUCTION_URL ??\n        process.env.NEXT_PUBLIC_APP_URL!\n      : \"localhost:3000\",\n  social: {\n    github: \"https://github.com/akash3444/shadcn-ui-blocks\",\n    twitter: \"https://twitter.com/akash_3444\",\n  },\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "src/components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/components/ui/separator.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/components/ui/tabs.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/components/ui/tooltip.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst TooltipProvider = TooltipPrimitive.Provider;\n\nconst Tooltip = TooltipPrimitive.Root;\n\nconst TooltipTrigger = TooltipPrimitive.Trigger;\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden font-semibold rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n));\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}