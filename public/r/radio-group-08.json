{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radio-group-08",
  "type": "registry:component",
  "title": "Radio Group with Cards (Style 2)",
  "description": "A radio group component with card-style options (style 2)",
  "dependencies": [
    "@radix-ui/react-radio-group",
    "lucide-react",
    "@radix-ui/react-radio-group",
    "lucide-react",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "src/components/customized/radio-group/radio-group-08.tsx",
      "content": "import React from \"react\";\nimport * as RadioGroup from \"@radix-ui/react-radio-group\";\nimport { CircleCheck, CpuIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst options = [\n  {\n    value: \"4-core\",\n    label: \"4-core CPU\",\n    description: \"32 GB RAM\",\n  },\n  {\n    value: \"6-core\",\n    label: \"6-core CPU\",\n    description: \"32 GB RAM\",\n  },\n  {\n    value: \"8-core\",\n    label: \"8-core CPU\",\n    description: \"32 GB RAM\",\n  },\n];\n\nconst RadioCardsDemo = () => {\n  return (\n    <RadioGroup.Root\n      defaultValue={options[0].value}\n      className=\"max-w-md w-full grid grid-cols-3 gap-4\"\n    >\n      {options.map((option) => (\n        <RadioGroup.Item\n          key={option.value}\n          value={option.value}\n          className={cn(\n            \"relative group ring-[1px] ring-border rounded py-2 px-3 text-start\",\n            \"data-[state=checked]:ring-2 data-[state=checked]:ring-blue-500\"\n          )}\n        >\n          <CircleCheck className=\"absolute top-0 right-0 -translate-y-1/2 translate-x-1/2 h-6 w-6 text-primary fill-blue-500 stroke-white group-data-[state=unchecked]:hidden\" />\n\n          <CpuIcon className=\"mb-2.5 text-muted-foreground\" />\n          <span className=\"font-semibold tracking-tight\">{option.label}</span>\n          <p className=\"text-xs\">{option.description}</p>\n        </RadioGroup.Item>\n      ))}\n    </RadioGroup.Root>\n  );\n};\n\nexport default RadioCardsDemo;\n",
      "type": "registry:component"
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { config } from \"@/config\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function capitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype GroupBy<T, K extends keyof T> = Record<string, T[]>;\n\nexport function groupBy<T, K extends keyof T>(\n  array: T[],\n  key: K\n): GroupBy<T, K> {\n  return array.reduce((acc, item) => {\n    const keyValue = String(item[key]);\n    if (!acc[keyValue]) {\n      acc[keyValue] = [];\n    }\n    acc[keyValue].push(item);\n    return acc;\n  }, {} as GroupBy<T, K>);\n}\n\nexport function absoluteUrl(path: string) {\n  return process.env.NODE_ENV === \"development\"\n    ? `http://localhost:3000${path}`\n    : `https://${config.appUrl}${path}`;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/config.ts",
      "content": "export const config = {\n  appUrl:\n    process.env.NODE_ENV === \"production\"\n      ? process.env.VERCEL_PROJECT_PRODUCTION_URL ??\n        process.env.NEXT_PUBLIC_APP_URL!\n      : \"localhost:3000\",\n  social: {\n    github: \"https://github.com/akash3444/shadcn-ui-blocks\",\n    twitter: \"https://twitter.com/akash_3444\",\n  },\n};\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}