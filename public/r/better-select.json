{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "better-select",
  "type": "registry:ui",
  "title": "Better Select",
  "dependencies": [
    "lucide-react",
    "lucide-react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-dialog",
    "cmdk",
    "@radix-ui/react-icons",
    "@radix-ui/react-popover"
  ],
  "registryDependencies": [
    "command",
    "popover",
    "button"
  ],
  "files": [
    {
      "path": "src/components/extensions/better-select.tsx",
      "content": "\"use client\";\n\nimport { CheckIcon, ChevronDownIcon, Loader2, X } from \"lucide-react\";\nimport * as React from \"react\";\nimport { forwardRef, useEffect, useState } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tCommand,\n\tCommandEmpty,\n\tCommandGroup,\n\tCommandInput,\n\tCommandItem,\n\tCommandList,\n} from \"@/components/ui/command\";\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\ntype Icon =\n\t| React.ComponentType<{ className?: string }>\n\t| React.ReactElement\n\t| string;\n\nconst DisplayIcon = ({\n\ticon,\n\tclassName,\n}: {\n\ticon?: Icon;\n\tclassName?: string;\n}) => {\n\tif (!icon) return null;\n\n\t// Case 1: String (image URL)\n\tif (typeof icon === \"string\") {\n\t\treturn <img src={icon} alt=\"icon\" className=\"w-4 h-4\" />;\n\t}\n\n\t// Case 2: Already rendered ReactElement\n\tif (React.isValidElement(icon)) {\n\t\treturn icon;\n\t}\n\n\t// Case 3: Component type that needs to be rendered\n\tconst Icon = icon;\n\treturn <Icon className={cn(\"size-4\", className)} />;\n};\n\nexport interface Option {\n\tStartIcon?: Icon;\n\n\tvalue: string;\n\tlabel: string;\n\tdisable?: boolean;\n\t/** Group the options by providing key. */\n\t[key: string]: string | boolean | Icon | undefined;\n}\n\nexport function useDebounce<T>(value: T, delay?: number): T {\n\tconst [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n\tuseEffect(() => {\n\t\tconst timer = setTimeout(() => setDebouncedValue(value), delay || 500);\n\n\t\treturn () => {\n\t\t\tclearTimeout(timer);\n\t\t};\n\t}, [value, delay]);\n\n\treturn debouncedValue;\n}\n\ninterface GroupOption {\n\t[key: string]: Option[];\n}\n\nfunction transToGroupOption(options: Option[], groupBy?: string) {\n\tif (options.length === 0) {\n\t\treturn {};\n\t}\n\tif (!groupBy) {\n\t\treturn {\n\t\t\t\"\": options,\n\t\t};\n\t}\n\n\tconst groupOption: GroupOption = {};\n\tfor (const option of options) {\n\t\tconst key = (option[groupBy] as string) || \"\";\n\t\tif (!groupOption[key]) {\n\t\t\tgroupOption[key] = [];\n\t\t}\n\t\tgroupOption[key].push(option);\n\t}\n\treturn groupOption;\n}\n\nexport interface BetterSelectProps {\n\t/** The selected value */\n\tvalue?: string | null;\n\t/** Callback when value changes */\n\tonChange?: (value: string | null) => void;\n\t/** Default options to show */\n\tdefaultOptions?: Option[];\n\t/** Manually controlled options */\n\toptions?: Option[];\n\t/** Placeholder when no value is selected */\n\tplaceholder?: string;\n\t/** Placeholder for search input */\n\tsearchPlaceholder?: string;\n\t/** Message when no options match the search */\n\temptyMessage?: string;\n\t/** Loading component shown during async search */\n\tloadingIndicator?: React.ReactNode;\n\t/** Custom empty component when no options match */\n\temptyIndicator?: React.ReactNode;\n\t/** Debounce time for async search */\n\tdelay?: number;\n\t/** Trigger search when focused */\n\ttriggerSearchOnFocus?: boolean;\n\t/** Async search function */\n\tonSearch?: (value: string) => Promise<Option[]>;\n\t/** Sync search function */\n\tonSearchSync?: (value: string) => Option[];\n\t/** Is the select disabled */\n\tdisabled?: boolean;\n\t/** Group the options by a key */\n\tgroupBy?: string;\n\t/** CSS class for the trigger button */\n\tclassName?: string;\n\t/** PopoverContent alignment */\n\talign?: \"center\" | \"start\" | \"end\";\n\t/** Button variant */\n\tvariant?: \"default\" | \"outline\" | \"secondary\" | \"ghost\";\n\t/** Props for the Command component */\n\tcommandProps?: React.ComponentPropsWithoutRef<typeof Command>;\n\t/** Props for the CommandInput component */\n\tinputProps?: Omit<\n\t\tReact.ComponentPropsWithoutRef<typeof CommandInput>,\n\t\t\"value\" | \"placeholder\" | \"disabled\"\n\t>;\n\t/** Allow user to create an option when no match */\n\tcreatable?: boolean;\n\t/** Callback when a new option is created */\n\tonCreate?: (value: string) => void;\n\t/** Include clear button */\n\tclearable?: boolean;\n\t// Show Search Input\n\tshowSearchInput?: boolean;\n}\n\nexport interface BetterSelectRef {\n\tselectedValue: string | null;\n\tinput: HTMLInputElement | null;\n\tfocus: () => void;\n\treset: () => void;\n}\n\nconst BetterSelect = forwardRef<BetterSelectRef, BetterSelectProps>(\n\t(\n\t\t{\n\t\t\tshowSearchInput = false,\n\t\t\tvalue,\n\t\t\tonChange,\n\t\t\tplaceholder = \"Select an option\",\n\t\t\tsearchPlaceholder = \"Search...\",\n\t\t\temptyMessage = \"No option found.\",\n\t\t\tdefaultOptions = [],\n\t\t\toptions: controlledOptions,\n\t\t\tdelay,\n\t\t\tonSearch,\n\t\t\tonSearchSync,\n\t\t\tloadingIndicator,\n\t\t\temptyIndicator,\n\t\t\tdisabled = false,\n\t\t\tgroupBy,\n\t\t\tclassName,\n\t\t\tvariant = \"outline\",\n\t\t\talign = \"start\",\n\t\t\ttriggerSearchOnFocus = false,\n\t\t\tcommandProps,\n\t\t\tinputProps,\n\t\t\tcreatable = false,\n\t\t\tonCreate,\n\t\t\tclearable = false,\n\t\t},\n\t\tref,\n\t) => {\n\t\tconst [open, setOpen] = useState(false);\n\t\tconst [selectedValue, setSelectedValue] = useState<string | null>(\n\t\t\tvalue || null,\n\t\t);\n\t\tconst [inputValue, setInputValue] = useState(\"\");\n\t\tconst [isLoading, setIsLoading] = useState(false);\n\t\tconst [localOptions, setLocalOptions] = useState<GroupOption>(\n\t\t\ttransToGroupOption(defaultOptions, groupBy),\n\t\t);\n\t\tconst inputRef = React.useRef<HTMLInputElement>(null);\n\t\tconst dropdownRef = React.useRef<HTMLDivElement>(null);\n\t\tconst debouncedSearchTerm = useDebounce(inputValue, delay || 500);\n\n\t\t// For ref forwarding\n\t\tReact.useImperativeHandle(\n\t\t\tref,\n\t\t\t() => ({\n\t\t\t\tselectedValue,\n\t\t\t\tinput: inputRef.current,\n\t\t\t\tfocus: () => inputRef?.current?.focus(),\n\t\t\t\treset: () => {\n\t\t\t\t\tsetSelectedValue(null);\n\t\t\t\t\tonChange?.(null);\n\t\t\t\t},\n\t\t\t}),\n\t\t\t[selectedValue, onChange],\n\t\t);\n\n\t\t// Handle click outside\n\t\tuseEffect(() => {\n\t\t\tconst handleClickOutside = (event: MouseEvent | TouchEvent) => {\n\t\t\t\tif (\n\t\t\t\t\tdropdownRef.current &&\n\t\t\t\t\t!dropdownRef.current.contains(event.target as Node)\n\t\t\t\t) {\n\t\t\t\t\tsetOpen(false);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (open) {\n\t\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t\t\tdocument.addEventListener(\"touchend\", handleClickOutside);\n\t\t\t} else {\n\t\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t\t\tdocument.removeEventListener(\"touchend\", handleClickOutside);\n\t\t\t}\n\n\t\t\treturn () => {\n\t\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t\t\tdocument.removeEventListener(\"touchend\", handleClickOutside);\n\t\t\t};\n\t\t}, [open]);\n\n\t\t// Sync with external value\n\t\tuseEffect(() => {\n\t\t\tif (value !== undefined) {\n\t\t\t\tsetSelectedValue(value);\n\t\t\t}\n\t\t}, [value]);\n\n\t\t// Update options when controlled options change\n\t\tuseEffect(() => {\n\t\t\tif (!controlledOptions || onSearch) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst newOptions = transToGroupOption(controlledOptions, groupBy);\n\t\t\tsetLocalOptions(newOptions);\n\t\t}, [controlledOptions, groupBy, onSearch]);\n\n\t\t// Handle synchronous search\n\t\tuseEffect(() => {\n\t\t\tconst doSearchSync = () => {\n\t\t\t\tconst res = onSearchSync?.(debouncedSearchTerm);\n\t\t\t\tif (res) {\n\t\t\t\t\tsetLocalOptions(transToGroupOption(res, groupBy));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst exec = () => {\n\t\t\t\tif (!onSearchSync || !open) return;\n\n\t\t\t\tif (triggerSearchOnFocus) {\n\t\t\t\t\tdoSearchSync();\n\t\t\t\t}\n\n\t\t\t\tif (debouncedSearchTerm) {\n\t\t\t\t\tdoSearchSync();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\texec();\n\t\t}, [\n\t\t\tdebouncedSearchTerm,\n\t\t\tgroupBy,\n\t\t\tonSearchSync,\n\t\t\topen,\n\t\t\ttriggerSearchOnFocus,\n\t\t]);\n\n\t\t// Handle asynchronous search\n\t\tuseEffect(() => {\n\t\t\tconst doSearch = async () => {\n\t\t\t\tsetIsLoading(true);\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await onSearch?.(debouncedSearchTerm);\n\t\t\t\t\tif (res) {\n\t\t\t\t\t\tsetLocalOptions(transToGroupOption(res, groupBy));\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst exec = async () => {\n\t\t\t\tif (!onSearch || !open) return;\n\n\t\t\t\tif (triggerSearchOnFocus) {\n\t\t\t\t\tawait doSearch();\n\t\t\t\t}\n\n\t\t\t\tif (debouncedSearchTerm) {\n\t\t\t\t\tawait doSearch();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvoid exec();\n\t\t}, [debouncedSearchTerm, groupBy, onSearch, open, triggerSearchOnFocus]);\n\n\t\t// Get the selected option's label\n\t\tconst getSelectedLabel = () => {\n\t\t\tif (!selectedValue) return null;\n\n\t\t\tfor (const [, options] of Object.entries(localOptions)) {\n\t\t\t\tconst found = options.find((option) => option.value === selectedValue);\n\t\t\t\tif (found) return found.label;\n\t\t\t}\n\n\t\t\t// If we're using default/controlled options, check those too\n\t\t\tconst allOptions = [...defaultOptions, ...(controlledOptions || [])];\n\t\t\tconst found = allOptions.find((option) => option.value === selectedValue);\n\n\t\t\treturn found?.label || selectedValue;\n\t\t};\n\n\t\t// Handle creatable item\n\t\tconst CreatableItem = () => {\n\t\t\tif (!creatable || !inputValue || isLoading) return null;\n\n\t\t\t// Check if the input value already exists\n\t\t\tlet exists = false;\n\t\t\tfor (const [, options] of Object.entries(localOptions)) {\n\t\t\t\tif (\n\t\t\t\t\toptions.some(\n\t\t\t\t\t\t(option) =>\n\t\t\t\t\t\t\toption.value === inputValue ||\n\t\t\t\t\t\t\toption.label.toLowerCase() === inputValue.toLowerCase(),\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\texists = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (exists) return null;\n\n\t\t\treturn (\n\t\t\t\t<CommandItem\n\t\t\t\t\tvalue={inputValue}\n\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\tonMouseDown={(e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}}\n\t\t\t\t\tonSelect={(value: string) => {\n\t\t\t\t\t\tif (onCreate) {\n\t\t\t\t\t\t\tonCreate(value);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsetSelectedValue(value);\n\t\t\t\t\t\tonChange?.(value);\n\t\t\t\t\t\tsetOpen(false);\n\t\t\t\t\t\tsetInputValue(\"\");\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Create \"${inputValue}\"`}\n\t\t\t\t</CommandItem>\n\t\t\t);\n\t\t};\n\n\t\treturn (\n\t\t\t<Popover open={open} onOpenChange={setOpen}>\n\t\t\t\t<PopoverTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant={variant}\n\t\t\t\t\t\trole=\"combobox\"\n\t\t\t\t\t\taria-expanded={open}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"justify-between bg-background hover:bg-background px-3 border-input outline-none focus-visible:outline-[3px] outline-offset-0 w-full font-normal\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={() => setOpen(!open)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex items-center gap-1\">\n\t\t\t\t\t\t\t<DisplayIcon\n\t\t\t\t\t\t\t\ticon={\n\t\t\t\t\t\t\t\t\tObject.values(localOptions)\n\t\t\t\t\t\t\t\t\t\t.flat()\n\t\t\t\t\t\t\t\t\t\t.find((option) => option.value === selectedValue)?.StartIcon\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tclassName=\"mr-2\"\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\"truncate\",\n\t\t\t\t\t\t\t\t\t!selectedValue && \"text-muted-foreground\",\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{getSelectedLabel() || placeholder}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"flex items-center gap-1\">\n\t\t\t\t\t\t\t{clearable && selectedValue && (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\t\t\tsetSelectedValue(null);\n\t\t\t\t\t\t\t\t\t\tonChange?.(null);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tclassName=\"text-muted-foreground/80 hover:text-foreground cursor-pointer shrink-0\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<X size={16} className=\" \" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<ChevronDownIcon\n\t\t\t\t\t\t\t\tsize={16}\n\t\t\t\t\t\t\t\tclassName=\"text-muted-foreground/80 shrink-0\"\n\t\t\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Button>\n\t\t\t\t</PopoverTrigger>\n\t\t\t\t<PopoverContent\n\t\t\t\t\tref={dropdownRef}\n\t\t\t\t\tclassName=\"p-0 border-input w-full min-w-[var(--radix-popper-anchor-width)]\"\n\t\t\t\t\talign={align}\n\t\t\t\t>\n\t\t\t\t\t<Command\n\t\t\t\t\t\t{...commandProps}\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-auto overflow-visible bg-transparent\",\n\t\t\t\t\t\t\tcommandProps?.className,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tshouldFilter={\n\t\t\t\t\t\t\tcommandProps?.shouldFilter !== undefined\n\t\t\t\t\t\t\t\t? commandProps.shouldFilter\n\t\t\t\t\t\t\t\t: !onSearch\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t{showSearchInput && (\n\t\t\t\t\t\t\t<CommandInput\n\t\t\t\t\t\t\t\tref={inputRef}\n\t\t\t\t\t\t\t\t{...inputProps}\n\t\t\t\t\t\t\t\tplaceholder={searchPlaceholder}\n\t\t\t\t\t\t\t\tvalue={inputValue}\n\t\t\t\t\t\t\t\tonValueChange={setInputValue}\n\t\t\t\t\t\t\t\tclassName={cn(inputProps?.className)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<CommandList>\n\t\t\t\t\t\t\t{isLoading ? (\n\t\t\t\t\t\t\t\t<div className=\"flex justify-center items-center py-6\">\n\t\t\t\t\t\t\t\t\t{loadingIndicator || (\n\t\t\t\t\t\t\t\t\t\t<Loader2 className=\"w-6 h-6 text-muted-foreground animate-spin\" />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t{emptyIndicator ? (\n\t\t\t\t\t\t\t\t\t\t<CommandEmpty>{emptyIndicator}</CommandEmpty>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<CommandEmpty>{emptyMessage}</CommandEmpty>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{CreatableItem()}\n\t\t\t\t\t\t\t\t\t{Object.entries(localOptions).map(([key, groupOptions]) => (\n\t\t\t\t\t\t\t\t\t\t<CommandGroup\n\t\t\t\t\t\t\t\t\t\t\tkey={key}\n\t\t\t\t\t\t\t\t\t\t\theading={key}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"h-full overflow-auto\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{groupOptions.map((option) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<CommandItem\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={option.value}\n\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={option.disable}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonSelect={(currentValue) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSelectedValue(currentValue);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange?.(currentValue);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetOpen(false);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetInputValue(\"\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"cursor-pointer\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toption.disable &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"cursor-default text-muted-foreground\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<DisplayIcon icon={option.StartIcon} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{option.label}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{selectedValue === option.value && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<CheckIcon size={16} className=\"ml-auto\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t</CommandItem>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</CommandGroup>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</CommandList>\n\t\t\t\t\t</Command>\n\t\t\t\t</PopoverContent>\n\t\t\t</Popover>\n\t\t);\n\t},\n);\n\nBetterSelect.displayName = \"BetterSelect\";\nexport default BetterSelect;\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { config } from \"@/config\";\nimport { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n\treturn twMerge(clsx(inputs));\n}\n\nexport function capitalize(str: string) {\n\treturn str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype GroupBy<T, K extends keyof T> = Record<string, T[]>;\n\nexport function groupBy<T, K extends keyof T>(\n\tarray: T[],\n\tkey: K,\n): GroupBy<T, K> {\n\treturn array.reduce(\n\t\t(acc, item) => {\n\t\t\tconst keyValue = String(item[key]);\n\t\t\tif (!acc[keyValue]) {\n\t\t\t\tacc[keyValue] = [];\n\t\t\t}\n\t\t\tacc[keyValue].push(item);\n\t\t\treturn acc;\n\t\t},\n\t\t{} as GroupBy<T, K>,\n\t);\n}\n\nexport function absoluteUrl(path: string) {\n\treturn process.env.NODE_ENV === \"development\"\n\t\t? `http://localhost:3000${path}`\n\t\t: `https://${config.appUrl}${path}`;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/config.ts",
      "content": "export const config = {\n  appUrl:\n    process.env.NODE_ENV === \"production\"\n      ? process.env.VERCEL_PROJECT_PRODUCTION_URL ??\n        process.env.NEXT_PUBLIC_APP_URL!\n      : \"localhost:3000\",\n  social: {\n    github: \"https://github.com/akash3444/shadcn-ui-blocks\",\n    twitter: \"https://twitter.com/akash_3444\",\n  },\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "src/components/ui/command.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { type DialogProps } from \"@radix-ui/react-dialog\";\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport { cn } from \"@/lib/utils\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { MagnifyingGlassIcon } from \"@radix-ui/react-icons\";\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n));\nCommand.displayName = CommandPrimitive.displayName;\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  // eslint-disable-next-line svg-jsx/camel-case-dash\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <MagnifyingGlassIcon className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n));\n\nCommandInput.displayName = CommandPrimitive.Input.displayName;\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n));\n\nCommandList.displayName = CommandPrimitive.List.displayName;\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n));\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName;\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n));\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName;\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n));\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName;\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n));\n\nCommandItem.displayName = CommandPrimitive.Item.displayName;\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  );\n};\nCommandShortcut.displayName = \"CommandShortcut\";\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/components/ui/dialog.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { cn } from \"@/lib/utils\"\nimport { Cross2Icon } from \"@radix-ui/react-icons\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <Cross2Icon className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/components/ui/popover.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}