{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "better-select",
  "type": "registry:ui",
  "title": "Better Select",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "command",
    "popover",
    "button"
  ],
  "files": [
    {
      "path": "src/components/extensions/better-select.tsx",
      "content": "\"use client\";\n\nimport { CheckIcon, ChevronDownIcon, Loader2, X } from \"lucide-react\";\nimport * as React from \"react\";\nimport { forwardRef, useEffect, useState } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tCommand,\n\tCommandEmpty,\n\tCommandGroup,\n\tCommandInput,\n\tCommandItem,\n\tCommandList,\n} from \"@/components/ui/command\";\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\ntype Icon =\n\t| React.ComponentType<{ className?: string }>\n\t| React.ReactElement\n\t| string;\n\nconst DisplayIcon = ({\n\ticon,\n\tclassName,\n}: {\n\ticon?: Icon;\n\tclassName?: string;\n}) => {\n\tif (!icon) return null;\n\n\t// Case 1: String (image URL)\n\tif (typeof icon === \"string\") {\n\t\treturn <img src={icon} alt=\"icon\" className=\"w-4 h-4\" />;\n\t}\n\n\t// Case 2: Already rendered ReactElement\n\tif (React.isValidElement(icon)) {\n\t\treturn icon;\n\t}\n\n\t// Case 3: Component type that needs to be rendered\n\tconst Icon = icon;\n\treturn <Icon className={cn(\"size-4\", className)} />;\n};\n\nexport interface Option {\n\tStartIcon?: Icon;\n\n\tvalue: string;\n\tlabel: string;\n\tdisable?: boolean;\n\t/** Group the options by providing key. */\n\t[key: string]: string | boolean | Icon | undefined;\n}\n\nexport function useDebounce<T>(value: T, delay?: number): T {\n\tconst [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n\tuseEffect(() => {\n\t\tconst timer = setTimeout(() => setDebouncedValue(value), delay || 500);\n\n\t\treturn () => {\n\t\t\tclearTimeout(timer);\n\t\t};\n\t}, [value, delay]);\n\n\treturn debouncedValue;\n}\n\ninterface GroupOption {\n\t[key: string]: Option[];\n}\n\nfunction transToGroupOption(options: Option[], groupBy?: string) {\n\tif (options.length === 0) {\n\t\treturn {};\n\t}\n\tif (!groupBy) {\n\t\treturn {\n\t\t\t\"\": options,\n\t\t};\n\t}\n\n\tconst groupOption: GroupOption = {};\n\tfor (const option of options) {\n\t\tconst key = (option[groupBy] as string) || \"\";\n\t\tif (!groupOption[key]) {\n\t\t\tgroupOption[key] = [];\n\t\t}\n\t\tgroupOption[key].push(option);\n\t}\n\treturn groupOption;\n}\n\nexport interface BetterSelectProps {\n\t/** The selected value */\n\tvalue?: string | null;\n\t/** Callback when value changes */\n\tonChange?: (value: string | null) => void;\n\t/** Default options to show */\n\tdefaultOptions?: Option[];\n\t/** Manually controlled options */\n\toptions?: Option[];\n\t/** Placeholder when no value is selected */\n\tplaceholder?: string;\n\t/** Placeholder for search input */\n\tsearchPlaceholder?: string;\n\t/** Message when no options match the search */\n\temptyMessage?: string;\n\t/** Loading component shown during async search */\n\tloadingIndicator?: React.ReactNode;\n\t/** Custom empty component when no options match */\n\temptyIndicator?: React.ReactNode;\n\t/** Debounce time for async search */\n\tdelay?: number;\n\t/** Trigger search when focused */\n\ttriggerSearchOnFocus?: boolean;\n\t/** Async search function */\n\tonSearch?: (value: string) => Promise<Option[]>;\n\t/** Sync search function */\n\tonSearchSync?: (value: string) => Option[];\n\t/** Is the select disabled */\n\tdisabled?: boolean;\n\t/** Group the options by a key */\n\tgroupBy?: string;\n\t/** CSS class for the trigger button */\n\tclassName?: string;\n\t/** PopoverContent alignment */\n\talign?: \"center\" | \"start\" | \"end\";\n\t/** Button variant */\n\tvariant?: \"default\" | \"outline\" | \"secondary\" | \"ghost\";\n\t/** Props for the Command component */\n\tcommandProps?: React.ComponentPropsWithoutRef<typeof Command>;\n\t/** Props for the CommandInput component */\n\tinputProps?: Omit<\n\t\tReact.ComponentPropsWithoutRef<typeof CommandInput>,\n\t\t\"value\" | \"placeholder\" | \"disabled\"\n\t>;\n\t/** Allow user to create an option when no match */\n\tcreatable?: boolean;\n\t/** Callback when a new option is created */\n\tonCreate?: (value: string) => void;\n\t/** Include clear button */\n\tclearable?: boolean;\n\t// Show Search Input\n\tshowSearchInput?: boolean;\n}\n\nexport interface BetterSelectRef {\n\tselectedValue: string | null;\n\tinput: HTMLInputElement | null;\n\tfocus: () => void;\n\treset: () => void;\n}\n\nconst BetterSelect = forwardRef<BetterSelectRef, BetterSelectProps>(\n\t(\n\t\t{\n\t\t\tshowSearchInput = false,\n\t\t\tvalue,\n\t\t\tonChange,\n\t\t\tplaceholder = \"Select an option\",\n\t\t\tsearchPlaceholder = \"Search...\",\n\t\t\temptyMessage = \"No option found.\",\n\t\t\tdefaultOptions = [],\n\t\t\toptions: controlledOptions,\n\t\t\tdelay,\n\t\t\tonSearch,\n\t\t\tonSearchSync,\n\t\t\tloadingIndicator,\n\t\t\temptyIndicator,\n\t\t\tdisabled = false,\n\t\t\tgroupBy,\n\t\t\tclassName,\n\t\t\tvariant = \"outline\",\n\t\t\talign = \"start\",\n\t\t\ttriggerSearchOnFocus = false,\n\t\t\tcommandProps,\n\t\t\tinputProps,\n\t\t\tcreatable = false,\n\t\t\tonCreate,\n\t\t\tclearable = false,\n\t\t},\n\t\tref,\n\t) => {\n\t\tconst [open, setOpen] = useState(false);\n\t\tconst [selectedValue, setSelectedValue] = useState<string | null>(\n\t\t\tvalue || null,\n\t\t);\n\t\tconst [inputValue, setInputValue] = useState(\"\");\n\t\tconst [isLoading, setIsLoading] = useState(false);\n\t\tconst [localOptions, setLocalOptions] = useState<GroupOption>(\n\t\t\ttransToGroupOption(defaultOptions, groupBy),\n\t\t);\n\t\tconst inputRef = React.useRef<HTMLInputElement>(null);\n\t\tconst dropdownRef = React.useRef<HTMLDivElement>(null);\n\t\tconst debouncedSearchTerm = useDebounce(inputValue, delay || 500);\n\n\t\t// For ref forwarding\n\t\tReact.useImperativeHandle(\n\t\t\tref,\n\t\t\t() => ({\n\t\t\t\tselectedValue,\n\t\t\t\tinput: inputRef.current,\n\t\t\t\tfocus: () => inputRef?.current?.focus(),\n\t\t\t\treset: () => {\n\t\t\t\t\tsetSelectedValue(null);\n\t\t\t\t\tonChange?.(null);\n\t\t\t\t},\n\t\t\t}),\n\t\t\t[selectedValue, onChange],\n\t\t);\n\n\t\t// Handle click outside\n\t\tuseEffect(() => {\n\t\t\tconst handleClickOutside = (event: MouseEvent | TouchEvent) => {\n\t\t\t\tif (\n\t\t\t\t\tdropdownRef.current &&\n\t\t\t\t\t!dropdownRef.current.contains(event.target as Node)\n\t\t\t\t) {\n\t\t\t\t\tsetOpen(false);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (open) {\n\t\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t\t\tdocument.addEventListener(\"touchend\", handleClickOutside);\n\t\t\t} else {\n\t\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t\t\tdocument.removeEventListener(\"touchend\", handleClickOutside);\n\t\t\t}\n\n\t\t\treturn () => {\n\t\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t\t\tdocument.removeEventListener(\"touchend\", handleClickOutside);\n\t\t\t};\n\t\t}, [open]);\n\n\t\t// Sync with external value\n\t\tuseEffect(() => {\n\t\t\tif (value !== undefined) {\n\t\t\t\tsetSelectedValue(value);\n\t\t\t}\n\t\t}, [value]);\n\n\t\t// Update options when controlled options change\n\t\tuseEffect(() => {\n\t\t\tif (!controlledOptions || onSearch) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst newOptions = transToGroupOption(controlledOptions, groupBy);\n\t\t\tsetLocalOptions(newOptions);\n\t\t}, [controlledOptions, groupBy, onSearch]);\n\n\t\t// Handle synchronous search\n\t\tuseEffect(() => {\n\t\t\tconst doSearchSync = () => {\n\t\t\t\tconst res = onSearchSync?.(debouncedSearchTerm);\n\t\t\t\tif (res) {\n\t\t\t\t\tsetLocalOptions(transToGroupOption(res, groupBy));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst exec = () => {\n\t\t\t\tif (!onSearchSync || !open) return;\n\n\t\t\t\tif (triggerSearchOnFocus) {\n\t\t\t\t\tdoSearchSync();\n\t\t\t\t}\n\n\t\t\t\tif (debouncedSearchTerm) {\n\t\t\t\t\tdoSearchSync();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\texec();\n\t\t}, [\n\t\t\tdebouncedSearchTerm,\n\t\t\tgroupBy,\n\t\t\tonSearchSync,\n\t\t\topen,\n\t\t\ttriggerSearchOnFocus,\n\t\t]);\n\n\t\t// Handle asynchronous search\n\t\tuseEffect(() => {\n\t\t\tconst doSearch = async () => {\n\t\t\t\tsetIsLoading(true);\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await onSearch?.(debouncedSearchTerm);\n\t\t\t\t\tif (res) {\n\t\t\t\t\t\tsetLocalOptions(transToGroupOption(res, groupBy));\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst exec = async () => {\n\t\t\t\tif (!onSearch || !open) return;\n\n\t\t\t\tif (triggerSearchOnFocus) {\n\t\t\t\t\tawait doSearch();\n\t\t\t\t}\n\n\t\t\t\tif (debouncedSearchTerm) {\n\t\t\t\t\tawait doSearch();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvoid exec();\n\t\t}, [debouncedSearchTerm, groupBy, onSearch, open, triggerSearchOnFocus]);\n\n\t\t// Get the selected option's label\n\t\tconst getSelectedLabel = () => {\n\t\t\tif (!selectedValue) return null;\n\n\t\t\tfor (const [, options] of Object.entries(localOptions)) {\n\t\t\t\tconst found = options.find((option) => option.value === selectedValue);\n\t\t\t\tif (found) return found.label;\n\t\t\t}\n\n\t\t\t// If we're using default/controlled options, check those too\n\t\t\tconst allOptions = [...defaultOptions, ...(controlledOptions || [])];\n\t\t\tconst found = allOptions.find((option) => option.value === selectedValue);\n\n\t\t\treturn found?.label || selectedValue;\n\t\t};\n\n\t\t// Handle creatable item\n\t\tconst CreatableItem = () => {\n\t\t\tif (!creatable || !inputValue || isLoading) return null;\n\n\t\t\t// Check if the input value already exists\n\t\t\tlet exists = false;\n\t\t\tfor (const [, options] of Object.entries(localOptions)) {\n\t\t\t\tif (\n\t\t\t\t\toptions.some(\n\t\t\t\t\t\t(option) =>\n\t\t\t\t\t\t\toption.value === inputValue ||\n\t\t\t\t\t\t\toption.label.toLowerCase() === inputValue.toLowerCase(),\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\texists = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (exists) return null;\n\n\t\t\treturn (\n\t\t\t\t<CommandItem\n\t\t\t\t\tvalue={inputValue}\n\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\tonMouseDown={(e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}}\n\t\t\t\t\tonSelect={(value: string) => {\n\t\t\t\t\t\tif (onCreate) {\n\t\t\t\t\t\t\tonCreate(value);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsetSelectedValue(value);\n\t\t\t\t\t\tonChange?.(value);\n\t\t\t\t\t\tsetOpen(false);\n\t\t\t\t\t\tsetInputValue(\"\");\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Create \"${inputValue}\"`}\n\t\t\t\t</CommandItem>\n\t\t\t);\n\t\t};\n\n\t\treturn (\n\t\t\t<Popover open={open} onOpenChange={setOpen}>\n\t\t\t\t<PopoverTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant={variant}\n\t\t\t\t\t\trole=\"combobox\"\n\t\t\t\t\t\taria-expanded={open}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"justify-between bg-background hover:bg-background px-3 border-input outline-none focus-visible:outline-[3px] outline-offset-0 w-full font-normal\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={() => setOpen(!open)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex items-center gap-1\">\n\t\t\t\t\t\t\t<DisplayIcon\n\t\t\t\t\t\t\t\ticon={\n\t\t\t\t\t\t\t\t\tObject.values(localOptions)\n\t\t\t\t\t\t\t\t\t\t.flat()\n\t\t\t\t\t\t\t\t\t\t.find((option) => option.value === selectedValue)?.StartIcon\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tclassName=\"mr-2\"\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\"truncate\",\n\t\t\t\t\t\t\t\t\t!selectedValue && \"text-muted-foreground\",\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{getSelectedLabel() || placeholder}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"flex items-center gap-1\">\n\t\t\t\t\t\t\t{clearable && selectedValue && (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\t\t\tsetSelectedValue(null);\n\t\t\t\t\t\t\t\t\t\tonChange?.(null);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tclassName=\"text-muted-foreground/80 hover:text-foreground cursor-pointer shrink-0\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<X size={16} className=\" \" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<ChevronDownIcon\n\t\t\t\t\t\t\t\tsize={16}\n\t\t\t\t\t\t\t\tclassName=\"text-muted-foreground/80 shrink-0\"\n\t\t\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Button>\n\t\t\t\t</PopoverTrigger>\n\t\t\t\t<PopoverContent\n\t\t\t\t\tref={dropdownRef}\n\t\t\t\t\tclassName=\"p-0 border-input w-full min-w-[var(--radix-popper-anchor-width)]\"\n\t\t\t\t\talign={align}\n\t\t\t\t>\n\t\t\t\t\t<Command\n\t\t\t\t\t\t{...commandProps}\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-auto overflow-visible bg-transparent\",\n\t\t\t\t\t\t\tcommandProps?.className,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tshouldFilter={\n\t\t\t\t\t\t\tcommandProps?.shouldFilter !== undefined\n\t\t\t\t\t\t\t\t? commandProps.shouldFilter\n\t\t\t\t\t\t\t\t: !onSearch\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t{showSearchInput && (\n\t\t\t\t\t\t\t<CommandInput\n\t\t\t\t\t\t\t\tref={inputRef}\n\t\t\t\t\t\t\t\t{...inputProps}\n\t\t\t\t\t\t\t\tplaceholder={searchPlaceholder}\n\t\t\t\t\t\t\t\tvalue={inputValue}\n\t\t\t\t\t\t\t\tonValueChange={setInputValue}\n\t\t\t\t\t\t\t\tclassName={cn(inputProps?.className)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<CommandList>\n\t\t\t\t\t\t\t{isLoading ? (\n\t\t\t\t\t\t\t\t<div className=\"flex justify-center items-center py-6\">\n\t\t\t\t\t\t\t\t\t{loadingIndicator || (\n\t\t\t\t\t\t\t\t\t\t<Loader2 className=\"w-6 h-6 text-muted-foreground animate-spin\" />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t{emptyIndicator ? (\n\t\t\t\t\t\t\t\t\t\t<CommandEmpty>{emptyIndicator}</CommandEmpty>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<CommandEmpty>{emptyMessage}</CommandEmpty>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{CreatableItem()}\n\t\t\t\t\t\t\t\t\t{Object.entries(localOptions).map(([key, groupOptions]) => (\n\t\t\t\t\t\t\t\t\t\t<CommandGroup\n\t\t\t\t\t\t\t\t\t\t\tkey={key}\n\t\t\t\t\t\t\t\t\t\t\theading={key}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"h-full overflow-auto\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{groupOptions.map((option) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<CommandItem\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={option.value}\n\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={option.disable}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonSelect={(currentValue) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSelectedValue(currentValue);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange?.(currentValue);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetOpen(false);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetInputValue(\"\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"cursor-pointer\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toption.disable &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"cursor-default text-muted-foreground\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<DisplayIcon icon={option.StartIcon} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t{option.label}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{selectedValue === option.value && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<CheckIcon size={16} className=\"ml-auto\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t</CommandItem>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</CommandGroup>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</CommandList>\n\t\t\t\t\t</Command>\n\t\t\t\t</PopoverContent>\n\t\t\t</Popover>\n\t\t);\n\t},\n);\n\nBetterSelect.displayName = \"BetterSelect\";\nexport default BetterSelect;\n",
      "type": "registry:ui"
    }
  ]
}