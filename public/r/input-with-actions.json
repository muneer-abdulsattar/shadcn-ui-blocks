{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-with-actions",
  "type": "registry:ui",
  "title": "Input With Actions",
  "registryDependencies": [
    "input",
    "button",
    "select"
  ],
  "files": [
    {
      "path": "src/components/extensions/input-with-actions.tsx",
      "content": "import { Button, type ButtonProps } from \"@/components/ui/button\";\nimport { Input, type InputProps } from \"@/components/ui/input\";\nimport {\n\tSelect,\n\tSelectContent,\n\tSelectGroup,\n\tSelectItem,\n\tSelectLabel,\n\tSelectTrigger,\n\tSelectValue,\n} from \"@/components/ui/select\";\nimport { cn } from \"@/lib/utils\";\nimport React, { Fragment } from \"react\";\n\ntype Icon =\n\t| React.ComponentType<{ className?: string }>\n\t| React.ReactElement\n\t| string;\n\ntype ISelectProps = {\n\tplaceholder?: string;\n\toptions: {\n\t\tvalue?: string;\n\t\tlabel: string;\n\t}[];\n\n\tvalue?: string;\n\tonValueChange?: (value: string) => void;\n};\n\ninterface InputWithActionsProps extends InputProps {\n\tStartSelect?: ISelectProps;\n\tEndSelect?: ISelectProps;\n\n\tStartButton?: ButtonProps;\n\tEndButton?: ButtonProps;\n}\n\nexport default function InputWithActions({\n\tStartButton,\n\tEndButton,\n\tStartSelect,\n\tEndSelect,\n\n\t...props\n}: InputWithActionsProps) {\n\treturn (\n\t\t<div className=\"flex\">\n\t\t\t{StartSelect && (\n\t\t\t\t<Select {...StartSelect}>\n\t\t\t\t\t<SelectTrigger className=\"rounded-r-none w-fit\">\n\t\t\t\t\t\t<SelectValue placeholder={StartSelect.placeholder} />\n\t\t\t\t\t</SelectTrigger>\n\t\t\t\t\t<SelectContent>\n\t\t\t\t\t\t<SelectGroup>\n\t\t\t\t\t\t\t{StartSelect?.options?.map((item) => (\n\t\t\t\t\t\t\t\t<Fragment key={item.label}>\n\t\t\t\t\t\t\t\t\t{item.value ? (\n\t\t\t\t\t\t\t\t\t\t<SelectItem key={item.value} value={item.value}>\n\t\t\t\t\t\t\t\t\t\t\t{item.label}\n\t\t\t\t\t\t\t\t\t\t</SelectItem>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<SelectLabel>{item.label}</SelectLabel>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</SelectGroup>\n\t\t\t\t\t</SelectContent>\n\t\t\t\t</Select>\n\t\t\t)}\n\n\t\t\t<Input\n\t\t\t\t{...props}\n\t\t\t\tclassName={cn(\n\t\t\t\t\t{\n\t\t\t\t\t\t\"rounded-l-none\": StartSelect || StartButton,\n\t\t\t\t\t\t\"rounded-r-none\": EndSelect || EndButton,\n\t\t\t\t\t},\n\t\t\t\t\tprops.className,\n\t\t\t\t)}\n\t\t\t/>\n\n\t\t\t{EndButton && (\n\t\t\t\t<Button\n\t\t\t\t\t{...EndButton}\n\t\t\t\t\tclassName={cn(\"rounded-l-none w-fit\", EndButton.className)}\n\t\t\t\t/>\n\t\t\t)}\n\n\t\t\t{EndSelect && (\n\t\t\t\t<Select {...EndSelect}>\n\t\t\t\t\t<SelectTrigger className=\"rounded-l-none w-fit\">\n\t\t\t\t\t\t<SelectValue placeholder={EndSelect.placeholder} />\n\t\t\t\t\t</SelectTrigger>\n\t\t\t\t\t<SelectContent>\n\t\t\t\t\t\t<SelectGroup>\n\t\t\t\t\t\t\t{EndSelect?.options?.map((item) => (\n\t\t\t\t\t\t\t\t<Fragment key={item.label}>\n\t\t\t\t\t\t\t\t\t{item.value ? (\n\t\t\t\t\t\t\t\t\t\t<SelectItem key={item.value} value={item.value}>\n\t\t\t\t\t\t\t\t\t\t\t{item.label}\n\t\t\t\t\t\t\t\t\t\t</SelectItem>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<SelectLabel>{item.label}</SelectLabel>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</SelectGroup>\n\t\t\t\t\t</SelectContent>\n\t\t\t\t</Select>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n",
      "type": "registry:ui"
    }
  ]
}