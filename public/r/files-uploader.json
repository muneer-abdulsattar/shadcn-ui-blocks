{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "files-uploader",
  "type": "registry:ui",
  "title": "Files Uploader",
  "dependencies": [
    "lucide-react",
    "lucide-react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "."
  ],
  "registryDependencies": [
    "dialog",
    "button"
  ],
  "files": [
    {
      "path": "src/components/extensions/files-uploader/index.tsx",
      "content": "\"use client\";\n\nimport {\n\tAlertCircleIcon,\n\tFileArchiveIcon,\n\tFileIcon,\n\tFileSpreadsheetIcon,\n\tFileTextIcon,\n\tFileUpIcon,\n\tHeadphonesIcon,\n\tImageIcon,\n\tUploadIcon,\n\tVideoIcon,\n\tXIcon,\n} from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n\ttype FileWithPreview,\n\tformatBytes,\n\tuseFileUpload,\n} from \"./use-file-upload\";\n\n/**\n * Determines the appropriate icon based on file type\n */\nconst getFileIcon = (file) => {\n\tconst fileType = file.file instanceof File ? file.file.type : file.file.type;\n\tconst fileName = file.file instanceof File ? file.file.name : file.file.name;\n\n\tif (\n\t\tfileType.includes(\"pdf\") ||\n\t\tfileName.endsWith(\".pdf\") ||\n\t\tfileType.includes(\"word\") ||\n\t\tfileName.endsWith(\".doc\") ||\n\t\tfileName.endsWith(\".docx\")\n\t) {\n\t\treturn <FileTextIcon className=\"opacity-60 size-4\" />;\n\t}\n\tif (\n\t\tfileType.includes(\"zip\") ||\n\t\tfileType.includes(\"archive\") ||\n\t\tfileName.endsWith(\".zip\") ||\n\t\tfileName.endsWith(\".rar\")\n\t) {\n\t\treturn <FileArchiveIcon className=\"opacity-60 size-4\" />;\n\t}\n\tif (\n\t\tfileType.includes(\"excel\") ||\n\t\tfileName.endsWith(\".xls\") ||\n\t\tfileName.endsWith(\".xlsx\")\n\t) {\n\t\treturn <FileSpreadsheetIcon className=\"opacity-60 size-4\" />;\n\t}\n\tif (fileType.includes(\"video/\")) {\n\t\treturn <VideoIcon className=\"opacity-60 size-4\" />;\n\t}\n\tif (fileType.includes(\"audio/\")) {\n\t\treturn <HeadphonesIcon className=\"opacity-60 size-4\" />;\n\t}\n\tif (fileType.startsWith(\"image/\")) {\n\t\treturn <ImageIcon className=\"opacity-60 size-4\" />;\n\t}\n\treturn <FileIcon className=\"opacity-60 size-4\" />;\n};\n\n/**\n * FileUploader - Reusable file upload component with various display options\n *\n * @param {Object} props - Component props\n * @param {React.ReactNode} props.icon - Custom icon to display in the upload area\n * @param {string} props.title - Title text for the upload area\n * @param {string} props.description - Description text for the upload area\n * @param {boolean} props.isInside - Whether to display selected files inside the upload area\n * @param {boolean} props.isGrid - Whether to display files in a grid layout\n * @param {boolean} props.isPreview - Whether to show previews for image files\n * @param {Function} props.beforeUpload - Function to run before file upload\n * @param {Function} props.afterUpload - Function to run after file upload\n * @param {boolean} props.multiple - Whether to allow multiple file selection\n * @param {number} props.maxFiles - Maximum number of files allowed\n * @param {number} props.maxSizeMB - Maximum file size in MB\n * @param {string} props.accept - Accepted file types\n * @param {Array} props.initialFiles - Initial files to display\n * @param {Function} props.onChange - Callback when files change\n * @param {boolean} props.showUploadInfo - Whether to show upload information\n */\n\nconst FileUploader = ({\n\ticon = <FileUpIcon className=\"opacity-60 size-4\" />,\n\ttitle = \"Upload files\",\n\tdescription = \"Drag & drop or click to browse\",\n\tisInside = false,\n\tisGrid = false,\n\tisPreview = true,\n\tonFilesAdded,\n\tonFilesChange,\n\tmultiple = true,\n\tmaxFiles = 10,\n\tmaxSizeMB = 5,\n\taccept = \"image/*\",\n\tshowUploadInfo = false,\n}: {\n\ticon?: React.ReactNode;\n\ttitle?: string;\n\tdescription?: string;\n\tisInside?: boolean;\n\tisGrid?: boolean;\n\tisPreview?: boolean;\n\tonFilesAdded?: (files: FileWithPreview[]) => void;\n\tonFilesChange?: (files: Array<FileWithPreview>) => void;\n\tmultiple?: boolean;\n\tmaxFiles?: number;\n\tmaxSizeMB?: number;\n\taccept?: string;\n\tshowUploadInfo?: boolean;\n}) => {\n\tconst maxSize = maxSizeMB * 1024 * 1024;\n\n\tconst [\n\t\t{ files, isDragging, errors },\n\t\t{\n\t\t\thandleDragEnter,\n\t\t\thandleDragLeave,\n\t\t\thandleDragOver,\n\t\t\thandleDrop,\n\t\t\topenFileDialog,\n\t\t\tremoveFile,\n\t\t\tclearFiles,\n\t\t\tgetInputProps,\n\t\t},\n\t] = useFileUpload({\n\t\taccept,\n\t\tmaxSize,\n\t\tmultiple,\n\t\tmaxFiles,\n\t\tonFilesAdded: onFilesAdded,\n\t\tonFilesChange: onFilesChange,\n\t});\n\n\t// Determine if the component should show image previews\n\tconst shouldShowPreview = (file) => {\n\t\tif (!isPreview) return false;\n\t\tconst fileType =\n\t\t\tfile.file instanceof File ? file.file.type : file.file.type;\n\t\treturn fileType.startsWith(\"image/\");\n\t};\n\n\t// Render the file list based on the isGrid prop\n\tconst renderFileList = () => {\n\t\tif (files.length === 0) return null;\n\n\t\tif (isGrid) {\n\t\t\treturn (\n\t\t\t\t<div className=\"gap-4 grid grid-cols-2 md:grid-cols-3\">\n\t\t\t\t\t{files.map((file) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={file.id}\n\t\t\t\t\t\t\tclassName=\"relative flex flex-col bg-background border rounded-md\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex-1 aspect-square\">\n\t\t\t\t\t\t\t\t{shouldShowPreview(file) ? (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={file.preview}\n\t\t\t\t\t\t\t\t\t\talt={\n\t\t\t\t\t\t\t\t\t\t\tfile.file instanceof File\n\t\t\t\t\t\t\t\t\t\t\t\t? file.file.name\n\t\t\t\t\t\t\t\t\t\t\t\t: file.file.name\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-t-[inherit] size-full object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"flex justify-center items-center h-full\">\n\t\t\t\t\t\t\t\t\t\t{getFileIcon(file)}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={() => removeFile(file.id)}\n\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\tclassName=\"-top-2 -right-2 absolute shadow-none border-2 border-background focus-visible:border-background rounded-full size-6\"\n\t\t\t\t\t\t\t\taria-label=\"Remove file\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<XIcon className=\"size-3.5\" />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-0.5 p-3 border-t min-w-0\">\n\t\t\t\t\t\t\t\t<p className=\"font-medium text-[13px] truncate\">\n\t\t\t\t\t\t\t\t\t{file.file instanceof File ? file.file.name : file.file.name}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p className=\"text-muted-foreground text-xs truncate\">\n\t\t\t\t\t\t\t\t\t{formatBytes(\n\t\t\t\t\t\t\t\t\t\tfile.file instanceof File ? file.file.size : file.file.size,\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"space-y-2\">\n\t\t\t\t{files.map((file) => (\n\t\t\t\t\t<div\n\t\t\t\t\t\tkey={file.id}\n\t\t\t\t\t\tclassName=\"flex justify-between items-center gap-2 bg-background p-2 pe-3 border rounded-lg\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex items-center gap-3 overflow-hidden\">\n\t\t\t\t\t\t\t{shouldShowPreview(file) ? (\n\t\t\t\t\t\t\t\t<div className=\"bg-accent rounded aspect-square shrink-0\">\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={file.preview}\n\t\t\t\t\t\t\t\t\t\talt={\n\t\t\t\t\t\t\t\t\t\t\tfile.file instanceof File\n\t\t\t\t\t\t\t\t\t\t\t\t? file.file.name\n\t\t\t\t\t\t\t\t\t\t\t\t: file.file.name\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-[inherit] size-10 object-cover\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<div className=\"flex justify-center items-center border rounded size-10 aspect-square shrink-0\">\n\t\t\t\t\t\t\t\t\t{getFileIcon(file)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<div className=\"flex flex-col gap-0.5 min-w-0\">\n\t\t\t\t\t\t\t\t<p className=\"font-medium text-[13px] truncate\">\n\t\t\t\t\t\t\t\t\t{file.file instanceof File ? file.file.name : file.file.name}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p className=\"text-muted-foreground text-xs\">\n\t\t\t\t\t\t\t\t\t{formatBytes(\n\t\t\t\t\t\t\t\t\t\tfile.file instanceof File ? file.file.size : file.file.size,\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\tclassName=\"hover:bg-transparent -me-2 size-8 text-muted-foreground/80 hover:text-foreground\"\n\t\t\t\t\t\t\tonClick={() => removeFile(file.id)}\n\t\t\t\t\t\t\taria-label=\"Remove file\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<XIcon className=\"size-4\" aria-hidden=\"true\" />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\n\t\t\t\t{files.length > 1 && (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Button size=\"sm\" variant=\"outline\" onClick={clearFiles}>\n\t\t\t\t\t\t\tRemove all files\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t};\n\n\t// Render the upload area content\n\tconst renderUploadArea = () => {\n\t\tif (isInside && files.length > 0) {\n\t\t\treturn (\n\t\t\t\t<div className=\"flex flex-col gap-3 w-full\">\n\t\t\t\t\t<div className=\"flex justify-between items-center gap-2\">\n\t\t\t\t\t\t<h3 className=\"font-medium text-sm truncate\">\n\t\t\t\t\t\t\tUploaded Files ({files.length})\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\tonClick={openFileDialog}\n\t\t\t\t\t\t\tdisabled={files.length >= maxFiles}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<UploadIcon\n\t\t\t\t\t\t\t\tclassName=\"opacity-60 -ms-0.5 size-3.5\"\n\t\t\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\tAdd more\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t\t{renderFileList()}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"flex flex-col justify-center items-center px-4 py-3 text-center\">\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex justify-center items-center bg-background mb-2 border rounded-full size-11 shrink-0\"\n\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t>\n\t\t\t\t\t{icon}\n\t\t\t\t</div>\n\t\t\t\t<p className=\"mb-1.5 font-medium text-sm\">{title}</p>\n\t\t\t\t<p className=\"text-muted-foreground text-xs\">{description}</p>\n\t\t\t\t{showUploadInfo && (\n\t\t\t\t\t<div className=\"flex flex-wrap justify-center gap-1 mt-2 text-muted-foreground/70 text-xs\">\n\t\t\t\t\t\t{accept && <span>{accept.replace(/,/g, \", \")}</span>}\n\t\t\t\t\t\t{accept && <span>∙</span>}\n\t\t\t\t\t\t{multiple && <span>Max {maxFiles} files</span>}\n\t\t\t\t\t\t{multiple && <span>∙</span>}\n\t\t\t\t\t\t<span>Up to {formatBytes(maxSize)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<Button variant=\"outline\" className=\"mt-4\" onClick={openFileDialog}>\n\t\t\t\t\t<UploadIcon className=\"opacity-60 -ms-1\" aria-hidden=\"true\" />\n\t\t\t\t\t{multiple ? \"Select files\" : \"Select file\"}\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t);\n\t};\n\n\treturn (\n\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t{/* Drop area */}\n\t\t\t<div\n\t\t\t\tonDragEnter={handleDragEnter}\n\t\t\t\tonDragLeave={handleDragLeave}\n\t\t\t\tonDragOver={handleDragOver}\n\t\t\t\tonDrop={handleDrop}\n\t\t\t\tdata-dragging={isDragging || undefined}\n\t\t\t\tdata-files={files.length > 0 || undefined}\n\t\t\t\tclassName=\"relative flex flex-col not-data-[files]:justify-center items-center data-[dragging=true]:bg-accent/50 p-4 border border-input has-[input:focus]:border-ring border-dashed rounded-xl has-[input:focus]:ring-[3px] has-[input:focus]:ring-ring/50 min-h-52 overflow-hidden transition-colors\"\n\t\t\t>\n\t\t\t\t<input\n\t\t\t\t\t{...getInputProps()}\n\t\t\t\t\tclassName=\"sr-only\"\n\t\t\t\t\taria-label={`Upload ${multiple ? \"files\" : \"file\"}`}\n\t\t\t\t/>\n\t\t\t\t{renderUploadArea()}\n\t\t\t</div>\n\n\t\t\t{errors.length > 0 && (\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex items-center gap-1 text-destructive text-xs\"\n\t\t\t\t\trole=\"alert\"\n\t\t\t\t>\n\t\t\t\t\t<AlertCircleIcon className=\"size-3 shrink-0\" />\n\t\t\t\t\t<span>{errors[0]}</span>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{/* File list - shown outside if isInside is false */}\n\t\t\t{!isInside && renderFileList()}\n\t\t</div>\n\t);\n};\n\nexport default FileUploader;\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/extensions/files-uploader/use-file-upload.ts",
      "content": "\"use client\";\n\nimport type React from \"react\";\nimport {\n\ttype ChangeEvent,\n\ttype DragEvent,\n\ttype InputHTMLAttributes,\n\tuseCallback,\n\tuseRef,\n\tuseState,\n} from \"react\";\n\nexport type FileMetadata = {\n\tname: string;\n\tsize: number;\n\ttype: string;\n\turl: string;\n\tid: string;\n};\n\nexport type FileWithPreview = {\n\tfile: File | FileMetadata;\n\tid: string;\n\tpreview?: string;\n};\n\nexport type FileUploadOptions = {\n\tmaxFiles?: number; // Only used when multiple is true, defaults to Infinity\n\tmaxSize?: number; // in bytes\n\taccept?: string;\n\tmultiple?: boolean; // Defaults to false\n\tinitialFiles?: FileMetadata[];\n\tonFilesChange?: (files: FileWithPreview[]) => void; // Callback when files change\n\tonFilesAdded?: (addedFiles: FileWithPreview[]) => void; // Callback when new files are added\n};\n\nexport type FileUploadState = {\n\tfiles: FileWithPreview[];\n\tisDragging: boolean;\n\terrors: string[];\n};\n\nexport type FileUploadActions = {\n\taddFiles: (files: FileList | File[]) => void;\n\tremoveFile: (id: string) => void;\n\tclearFiles: () => void;\n\tclearErrors: () => void;\n\thandleDragEnter: (e: DragEvent<HTMLElement>) => void;\n\thandleDragLeave: (e: DragEvent<HTMLElement>) => void;\n\thandleDragOver: (e: DragEvent<HTMLElement>) => void;\n\thandleDrop: (e: DragEvent<HTMLElement>) => void;\n\thandleFileChange: (e: ChangeEvent<HTMLInputElement>) => void;\n\topenFileDialog: () => void;\n\tgetInputProps: (\n\t\tprops?: InputHTMLAttributes<HTMLInputElement>,\n\t) => InputHTMLAttributes<HTMLInputElement> & {\n\t\tref: React.Ref<HTMLInputElement>;\n\t};\n};\n\nexport const useFileUpload = (\n\toptions: FileUploadOptions = {},\n): [FileUploadState, FileUploadActions] => {\n\tconst {\n\t\tmaxFiles = Number.POSITIVE_INFINITY,\n\t\tmaxSize = Number.POSITIVE_INFINITY,\n\t\taccept = \"*\",\n\t\tmultiple = false,\n\t\tinitialFiles = [],\n\t\tonFilesChange,\n\t\tonFilesAdded,\n\t} = options;\n\n\tconst [state, setState] = useState<FileUploadState>({\n\t\tfiles: initialFiles.map((file) => ({\n\t\t\tfile,\n\t\t\tid: file.id,\n\t\t\tpreview: file.url,\n\t\t})),\n\t\tisDragging: false,\n\t\terrors: [],\n\t});\n\n\tconst inputRef = useRef<HTMLInputElement>(null);\n\n\tconst validateFile = useCallback(\n\t\t(file: File | FileMetadata): string | null => {\n\t\t\tif (file instanceof File) {\n\t\t\t\tif (file.size > maxSize) {\n\t\t\t\t\treturn `File \"${file.name}\" exceeds the maximum size of ${formatBytes(maxSize)}.`;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (file.size > maxSize) {\n\t\t\t\t\treturn `File \"${file.name}\" exceeds the maximum size of ${formatBytes(maxSize)}.`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (accept !== \"*\") {\n\t\t\t\tconst acceptedTypes = accept.split(\",\").map((type) => type.trim());\n\t\t\t\tconst fileType = file instanceof File ? file.type || \"\" : file.type;\n\t\t\t\tconst fileExtension = `.${file instanceof File ? file.name.split(\".\").pop() : file.name.split(\".\").pop()}`;\n\n\t\t\t\tconst isAccepted = acceptedTypes.some((type) => {\n\t\t\t\t\tif (type.startsWith(\".\")) {\n\t\t\t\t\t\treturn fileExtension.toLowerCase() === type.toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\tif (type.endsWith(\"/*\")) {\n\t\t\t\t\t\tconst baseType = type.split(\"/\")[0];\n\t\t\t\t\t\treturn fileType.startsWith(`${baseType}/`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fileType === type;\n\t\t\t\t});\n\n\t\t\t\tif (!isAccepted) {\n\t\t\t\t\treturn `File \"${file instanceof File ? file.name : file.name}\" is not an accepted file type.`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\t\t[accept, maxSize],\n\t);\n\n\tconst createPreview = useCallback(\n\t\t(file: File | FileMetadata): string | undefined => {\n\t\t\tif (file instanceof File) {\n\t\t\t\treturn URL.createObjectURL(file);\n\t\t\t}\n\t\t\treturn file.url;\n\t\t},\n\t\t[],\n\t);\n\n\tconst generateUniqueId = useCallback((file: File | FileMetadata): string => {\n\t\tif (file instanceof File) {\n\t\t\treturn `${file.name}-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n\t\t}\n\t\treturn file.id;\n\t}, []);\n\n\tconst clearFiles = useCallback(() => {\n\t\tsetState((prev) => {\n\t\t\t// Clean up object URLs\n\t\t\tprev.files.forEach((file) => {\n\t\t\t\tif (\n\t\t\t\t\tfile.preview &&\n\t\t\t\t\tfile.file instanceof File &&\n\t\t\t\t\tfile.file.type.startsWith(\"image/\")\n\t\t\t\t) {\n\t\t\t\t\tURL.revokeObjectURL(file.preview);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (inputRef.current) {\n\t\t\t\tinputRef.current.value = \"\";\n\t\t\t}\n\n\t\t\tconst newState = {\n\t\t\t\t...prev,\n\t\t\t\tfiles: [],\n\t\t\t\terrors: [],\n\t\t\t};\n\n\t\t\tonFilesChange?.(newState.files);\n\t\t\treturn newState;\n\t\t});\n\t}, [onFilesChange]);\n\n\tconst addFiles = useCallback(\n\t\t(newFiles: FileList | File[]) => {\n\t\t\tif (!newFiles || newFiles.length === 0) return;\n\n\t\t\tconst newFilesArray = Array.from(newFiles);\n\t\t\tconst errors: string[] = [];\n\n\t\t\t// Clear existing errors when new files are uploaded\n\t\t\tsetState((prev) => ({ ...prev, errors: [] }));\n\n\t\t\t// In single file mode, clear existing files first\n\t\t\tif (!multiple) {\n\t\t\t\tclearFiles();\n\t\t\t}\n\n\t\t\t// Check if adding these files would exceed maxFiles (only in multiple mode)\n\t\t\tif (\n\t\t\t\tmultiple &&\n\t\t\t\tmaxFiles !== Number.POSITIVE_INFINITY &&\n\t\t\t\tstate.files.length + newFilesArray.length > maxFiles\n\t\t\t) {\n\t\t\t\terrors.push(`You can only upload a maximum of ${maxFiles} files.`);\n\t\t\t\tsetState((prev) => ({ ...prev, errors }));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst validFiles: FileWithPreview[] = [];\n\n\t\t\tnewFilesArray.forEach((file) => {\n\t\t\t\t// Check for duplicates\n\t\t\t\tconst isDuplicate = state.files.some(\n\t\t\t\t\t(existingFile) =>\n\t\t\t\t\t\texistingFile.file.name === file.name &&\n\t\t\t\t\t\texistingFile.file.size === file.size,\n\t\t\t\t);\n\n\t\t\t\t// Skip duplicate files silently\n\t\t\t\tif (isDuplicate) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check file size\n\t\t\t\tif (file.size > maxSize) {\n\t\t\t\t\terrors.push(\n\t\t\t\t\t\tmultiple\n\t\t\t\t\t\t\t? `Some files exceed the maximum size of ${formatBytes(maxSize)}.`\n\t\t\t\t\t\t\t: `File exceeds the maximum size of ${formatBytes(maxSize)}.`,\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst error = validateFile(file);\n\t\t\t\tif (error) {\n\t\t\t\t\terrors.push(error);\n\t\t\t\t} else {\n\t\t\t\t\tvalidFiles.push({\n\t\t\t\t\t\tfile,\n\t\t\t\t\t\tid: generateUniqueId(file),\n\t\t\t\t\t\tpreview: createPreview(file),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Only update state if we have valid files to add\n\t\t\tif (validFiles.length > 0) {\n\t\t\t\t// Call the onFilesAdded callback with the newly added valid files\n\t\t\t\tonFilesAdded?.(validFiles);\n\n\t\t\t\tsetState((prev) => {\n\t\t\t\t\tconst newFiles = !multiple\n\t\t\t\t\t\t? validFiles\n\t\t\t\t\t\t: [...prev.files, ...validFiles];\n\t\t\t\t\tonFilesChange?.(newFiles);\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...prev,\n\t\t\t\t\t\tfiles: newFiles,\n\t\t\t\t\t\terrors,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t} else if (errors.length > 0) {\n\t\t\t\tsetState((prev) => ({\n\t\t\t\t\t...prev,\n\t\t\t\t\terrors,\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// Reset input value after handling files\n\t\t\tif (inputRef.current) {\n\t\t\t\tinputRef.current.value = \"\";\n\t\t\t}\n\t\t},\n\t\t[\n\t\t\tstate.files.length,\n\t\t\tmaxFiles,\n\t\t\tmultiple,\n\t\t\tmaxSize,\n\t\t\tvalidateFile,\n\t\t\tcreatePreview,\n\t\t\tgenerateUniqueId,\n\t\t\tclearFiles,\n\t\t\tonFilesChange,\n\t\t\tonFilesAdded,\n\t\t],\n\t);\n\n\tconst removeFile = useCallback(\n\t\t(id: string) => {\n\t\t\tsetState((prev) => {\n\t\t\t\tconst fileToRemove = prev.files.find((file) => file.id === id);\n\t\t\t\tif (\n\t\t\t\t\tfileToRemove &&\n\t\t\t\t\tfileToRemove.preview &&\n\t\t\t\t\tfileToRemove.file instanceof File &&\n\t\t\t\t\tfileToRemove.file.type.startsWith(\"image/\")\n\t\t\t\t) {\n\t\t\t\t\tURL.revokeObjectURL(fileToRemove.preview);\n\t\t\t\t}\n\n\t\t\t\tconst newFiles = prev.files.filter((file) => file.id !== id);\n\t\t\t\tonFilesChange?.(newFiles);\n\n\t\t\t\treturn {\n\t\t\t\t\t...prev,\n\t\t\t\t\tfiles: newFiles,\n\t\t\t\t\terrors: [],\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\t\t[onFilesChange],\n\t);\n\n\tconst clearErrors = useCallback(() => {\n\t\tsetState((prev) => ({\n\t\t\t...prev,\n\t\t\terrors: [],\n\t\t}));\n\t}, []);\n\n\tconst handleDragEnter = useCallback((e: DragEvent<HTMLElement>) => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\t\tsetState((prev) => ({ ...prev, isDragging: true }));\n\t}, []);\n\n\tconst handleDragLeave = useCallback((e: DragEvent<HTMLElement>) => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\n\t\tif (e.currentTarget.contains(e.relatedTarget as Node)) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetState((prev) => ({ ...prev, isDragging: false }));\n\t}, []);\n\n\tconst handleDragOver = useCallback((e: DragEvent<HTMLElement>) => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\t}, []);\n\n\tconst handleDrop = useCallback(\n\t\t(e: DragEvent<HTMLElement>) => {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t\tsetState((prev) => ({ ...prev, isDragging: false }));\n\n\t\t\t// Don't process files if the input is disabled\n\t\t\tif (inputRef.current?.disabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n\t\t\t\t// In single file mode, only use the first file\n\t\t\t\tif (!multiple) {\n\t\t\t\t\tconst file = e.dataTransfer.files[0];\n\t\t\t\t\taddFiles([file]);\n\t\t\t\t} else {\n\t\t\t\t\taddFiles(e.dataTransfer.files);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[addFiles, multiple],\n\t);\n\n\tconst handleFileChange = useCallback(\n\t\t(e: ChangeEvent<HTMLInputElement>) => {\n\t\t\tif (e.target.files && e.target.files.length > 0) {\n\t\t\t\taddFiles(e.target.files);\n\t\t\t}\n\t\t},\n\t\t[addFiles],\n\t);\n\n\tconst openFileDialog = useCallback(() => {\n\t\tif (inputRef.current) {\n\t\t\tinputRef.current.click();\n\t\t}\n\t}, []);\n\n\tconst getInputProps = useCallback(\n\t\t(props: InputHTMLAttributes<HTMLInputElement> = {}) => {\n\t\t\treturn {\n\t\t\t\t...props,\n\t\t\t\ttype: \"file\" as const,\n\t\t\t\tonChange: handleFileChange,\n\t\t\t\taccept: props.accept || accept,\n\t\t\t\tmultiple: props.multiple !== undefined ? props.multiple : multiple,\n\t\t\t\tref: inputRef,\n\t\t\t};\n\t\t},\n\t\t[accept, multiple, handleFileChange],\n\t);\n\n\treturn [\n\t\tstate,\n\t\t{\n\t\t\taddFiles,\n\t\t\tremoveFile,\n\t\t\tclearFiles,\n\t\t\tclearErrors,\n\t\t\thandleDragEnter,\n\t\t\thandleDragLeave,\n\t\t\thandleDragOver,\n\t\t\thandleDrop,\n\t\t\thandleFileChange,\n\t\t\topenFileDialog,\n\t\t\tgetInputProps,\n\t\t},\n\t];\n};\n\n// Helper function to format bytes to human-readable format\nexport const formatBytes = (bytes: number, decimals = 2): string => {\n\tif (bytes === 0) return \"0 Bytes\";\n\n\tconst k = 1024;\n\tconst dm = decimals < 0 ? 0 : decimals;\n\tconst sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n\n\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\n\n\treturn Number.parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + sizes[i];\n};\n",
      "type": "registry:file",
      "target": "src/components/extensions/files-uploader/use-file-upload.ts"
    },
    {
      "path": "src/components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { config } from \"@/config\";\nimport { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n\treturn twMerge(clsx(inputs));\n}\n\nexport function capitalize(str: string) {\n\treturn str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype GroupBy<T, K extends keyof T> = Record<string, T[]>;\n\nexport function groupBy<T, K extends keyof T>(\n\tarray: T[],\n\tkey: K,\n): GroupBy<T, K> {\n\treturn array.reduce(\n\t\t(acc, item) => {\n\t\t\tconst keyValue = String(item[key]);\n\t\t\tif (!acc[keyValue]) {\n\t\t\t\tacc[keyValue] = [];\n\t\t\t}\n\t\t\tacc[keyValue].push(item);\n\t\t\treturn acc;\n\t\t},\n\t\t{} as GroupBy<T, K>,\n\t);\n}\n\nexport function absoluteUrl(path: string) {\n\treturn process.env.NODE_ENV === \"development\"\n\t\t? `http://localhost:3000${path}`\n\t\t: `https://${config.appUrl}${path}`;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/config.ts",
      "content": "export const config = {\n  appUrl:\n    process.env.NODE_ENV === \"production\"\n      ? process.env.VERCEL_PROJECT_PRODUCTION_URL ??\n        process.env.NEXT_PUBLIC_APP_URL!\n      : \"localhost:3000\",\n  social: {\n    github: \"https://github.com/akash3444/shadcn-ui-blocks\",\n    twitter: \"https://twitter.com/akash_3444\",\n  },\n};\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}