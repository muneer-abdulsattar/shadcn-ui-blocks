{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form fields",
  "type": "registry:ui",
  "title": "Form Fields",
  "dependencies": [
    "lucide-react",
    "react-hook-form",
    "@radix-ui/react-label",
    "@radix-ui/react-slot",
    "react-hook-form",
    "class-variance-authority",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "button",
    "input",
    "select",
    "label",
    "radio-group",
    "checkbox",
    "popover",
    "switch",
    "textarea",
    "form"
  ],
  "files": [
    {
      "path": "src/components/extensions/form/controller-field-wrapper.tsx",
      "content": "import {\n\tFormControl,\n\tFormDescription,\n\tFormField,\n\tFormFieldContext,\n\tFormItem,\n\tFormLabel,\n\tFormMessage,\n} from \"@/components/ui/form\";\nimport { cn } from \"@/lib/utils\";\nimport React, { useContext, useId } from \"react\";\nimport {\n\ttype ControllerRenderProps,\n\ttype FieldValues,\n\tuseFormContext,\n} from \"react-hook-form\";\n\nexport interface FieldWrapperProps {\n\tname: string;\n\tclassName?: string;\n\tlabel?: string;\n\tdescription?: string;\n\tchildren:\n\t\t| React.ReactElement<{ id?: string; isError?: boolean }>\n\t\t| ((\n\t\t\t\tfieldProps: ControllerRenderProps<FieldValues, string> & {\n\t\t\t\t\tid: string;\n\t\t\t\t\tisError?: boolean;\n\t\t\t\t},\n\t\t  ) => React.ReactNode);\n\tallowAny?: boolean;\n\tinline?: boolean;\n}\n\nexport function ControlledFieldWrapper({\n\tname,\n\tlabel,\n\tclassName,\n\tdescription,\n\tchildren,\n\tallowAny,\n\tinline = false,\n}: FieldWrapperProps) {\n\tconst id = useId();\n\t// Get the form context from shadcn's Form component\n\tconst fieldContext = useContext(FormFieldContext); // you need to export FormFieldContext from your form component file\n\n\tif (!fieldContext) {\n\t\tthrow new Error(\"FieldWrapper must be used within a Form component\");\n\t}\n\n\tconst { control, getFieldState } = useFormContext();\n\n\t// Check if the field name is valid in the current form\n\ttry {\n\t\t// This will throw an error if the field doesn't exist\n\t\tif (!allowAny) getFieldState(name);\n\t} catch (error) {\n\t\tconsole.error(`Field \"${name}\" does not exist in the form context`);\n\t}\n\n\treturn (\n\t\t<FormField\n\t\t\tname={name}\n\t\t\tcontrol={control}\n\t\t\trender={({ field, fieldState }) => {\n\t\t\t\tconst { invalid } = fieldState;\n\n\t\t\t\treturn (\n\t\t\t\t\t<FormItem className=\"space-y-1\">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\"gap-1\",\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"flex flex-col\": !inline,\n\t\t\t\t\t\t\t\t\t\"flex items-center space-x-1\": inline,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{label && <FormLabel htmlFor={id}>{label}</FormLabel>}\n\t\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t\t{typeof children === \"function\"\n\t\t\t\t\t\t\t\t\t? children({\n\t\t\t\t\t\t\t\t\t\t\t...field,\n\t\t\t\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\t\t\t\tisError: invalid,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t: React.isValidElement(children)\n\t\t\t\t\t\t\t\t\t\t? React.cloneElement(children, {\n\t\t\t\t\t\t\t\t\t\t\t\t...field,\n\t\t\t\t\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t: children}\n\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{description && <FormDescription>{description}</FormDescription>}\n\t\t\t\t\t\t<FormMessage />\n\t\t\t\t\t</FormItem>\n\t\t\t\t);\n\t\t\t}}\n\t\t/>\n\t);\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/extensions/form/controlled-inputs.tsx",
      "content": "import {\n\tControlledFieldWrapper,\n\ttype FieldWrapperProps,\n} from \"@/components/extensions/form/controller-field-wrapper\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { FormControl, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { Input, type InputProps } from \"@/components/ui/input\";\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport {\n\tSelect,\n\tSelectContent,\n\tSelectGroup,\n\tSelectItem,\n\tSelectTrigger,\n\tSelectValue,\n} from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\nimport { CalendarIcon } from \"lucide-react\";\nimport type { ReactNode } from \"react\";\nimport React from \"react\";\n\ninterface ControlledFieldWrapperProps<T>\n\textends Omit<FieldWrapperProps, \"children\"> {\n\tinputProps?: T;\n}\n\ntype InputControllerProps = ControlledFieldWrapperProps<InputProps>;\n\nexport const InputControlled: React.FC<InputControllerProps> = ({\n\tinputProps,\n\t...props\n}) => {\n\treturn (\n\t\t<ControlledFieldWrapper {...props}>\n\t\t\t{(fieldProps) => (\n\t\t\t\t<Input\n\t\t\t\t\t{...inputProps}\n\t\t\t\t\t{...fieldProps}\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\tinputProps?.className,\n\t\t\t\t\t\tfieldProps.isError && \"border-destructive\",\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</ControlledFieldWrapper>\n\t);\n};\n\ntype SelectControllerProps = ControlledFieldWrapperProps<{\n\tplaceholder?: string;\n\tclassName?: string;\n\toptions: Array<\n\t\t| {\n\t\t\t\tlabel: string | React.ReactNode;\n\t\t\t\tvalue: string;\n\t\t\t\tdisabled?: boolean;\n\t\t  }\n\t\t| React.ReactNode\n\t>;\n}>;\n\nexport const SelectControlled: React.FC<SelectControllerProps> = ({\n\tinputProps,\n\t...props\n}) => {\n\treturn (\n\t\t<ControlledFieldWrapper {...props}>\n\t\t\t{(fieldProps) => (\n\t\t\t\t<Select value={fieldProps.value} onValueChange={fieldProps.onChange}>\n\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t<SelectTrigger\n\t\t\t\t\t\t\tid={fieldProps.id}\n\t\t\t\t\t\t\tclassName={cn(inputProps?.className, {\n\t\t\t\t\t\t\t\t\"border-destructive\": fieldProps.isError,\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<SelectValue placeholder={inputProps?.placeholder} />\n\t\t\t\t\t\t</SelectTrigger>\n\t\t\t\t\t</FormControl>\n\t\t\t\t\t<SelectContent>\n\t\t\t\t\t\t<SelectGroup>\n\t\t\t\t\t\t\t{inputProps?.options?.map((option, index) => {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\ttypeof option === \"string\" ||\n\t\t\t\t\t\t\t\t\tReact.isValidElement(option)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\treturn React.isValidElement(option)\n\t\t\t\t\t\t\t\t\t\t? React.cloneElement(option, { key: `option-${index}` })\n\t\t\t\t\t\t\t\t\t\t: option;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\ttypeof option === \"object\" &&\n\t\t\t\t\t\t\t\t\toption !== null &&\n\t\t\t\t\t\t\t\t\t\"label\" in option &&\n\t\t\t\t\t\t\t\t\t\"value\" in option\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<SelectItem\n\t\t\t\t\t\t\t\t\t\t\tkey={`option-${index}`}\n\t\t\t\t\t\t\t\t\t\t\tvalue={option.value}\n\t\t\t\t\t\t\t\t\t\t\tdisabled={option.disabled}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{option.label}\n\t\t\t\t\t\t\t\t\t\t</SelectItem>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t`Invalid option type: ${typeof option}. Expected string, ReactNode, or { label: string, value: string, disabled?: boolean }`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</SelectGroup>\n\t\t\t\t\t</SelectContent>\n\t\t\t\t</Select>\n\t\t\t)}\n\t\t</ControlledFieldWrapper>\n\t);\n};\n\ntype CheckboxControlledProps = ControlledFieldWrapperProps<{\n\tclassName?: string;\n\tbordered?: boolean;\n}>;\n\nexport const CheckboxControlled = ({\n\tinputProps,\n\t...props\n}: CheckboxControlledProps) => {\n\treturn (\n\t\t<div\n\t\t\tclassName={cn(\" gap-2  \", {\n\t\t\t\t\"border rounded-md p-4\": inputProps?.bordered,\n\t\t\t})}\n\t\t>\n\t\t\t<ControlledFieldWrapper\n\t\t\t\tclassName=\"flex-row-reverse w-fit\"\n\t\t\t\tinline\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t{(fieldProps) => (\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tid={fieldProps.id}\n\t\t\t\t\t\tchecked={fieldProps.value}\n\t\t\t\t\t\tonCheckedChange={fieldProps.onChange}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</ControlledFieldWrapper>\n\t\t</div>\n\t);\n};\n\ntype CheckboxGroupControlledProps = ControlledFieldWrapperProps<{\n\tclassName?: string;\n\toptions: Array<{\n\t\tlabel: string | ReactNode;\n\t\tvalue: string;\n\t\tdisabled?: boolean;\n\t}>;\n}>;\n\nexport const CheckboxGroupControlled: React.FC<\n\tCheckboxGroupControlledProps\n> = ({ inputProps, ...props }) => {\n\treturn (\n\t\t<ControlledFieldWrapper {...props} inline={false}>\n\t\t\t{(fieldProps) => (\n\t\t\t\t<div\n\t\t\t\t\tclassName={cn(\"flex  flex-col gap-2 mt-2\", {\n\t\t\t\t\t\t\"flex-row flex-wrap\": props.inline,\n\t\t\t\t\t})}\n\t\t\t\t>\n\t\t\t\t\t{inputProps?.options?.map((option, index) => (\n\t\t\t\t\t\t<FormItem\n\t\t\t\t\t\t\tclassName=\"space-y-1\"\n\t\t\t\t\t\t\tkey={`checkbox-group-${index}-${fieldProps.id}`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\"gap-1 flex items-center space-x-1\",\n\n\t\t\t\t\t\t\t\t\tprops.className,\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\tkey={`checkbox-${index}`}\n\t\t\t\t\t\t\t\t\t\tid={`${fieldProps.id}-${index}`}\n\t\t\t\t\t\t\t\t\t\tchecked={fieldProps.value.includes(option.value)}\n\t\t\t\t\t\t\t\t\t\tonCheckedChange={(checked) => {\n\t\t\t\t\t\t\t\t\t\t\treturn checked\n\t\t\t\t\t\t\t\t\t\t\t\t? fieldProps.onChange([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t...fieldProps.value,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toption.value,\n\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t\t: fieldProps.onChange(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfieldProps.value?.filter(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(value: any) => value !== option.value,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tdisabled={option.disabled}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t<FormLabel htmlFor={`${fieldProps.id}-${index}`}>\n\t\t\t\t\t\t\t\t\t{option.label}\n\t\t\t\t\t\t\t\t</FormLabel>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</ControlledFieldWrapper>\n\t);\n};\n\ntype DatePickerControlledProps = ControlledFieldWrapperProps<{\n\tclassName?: string;\n\tplaceholder?: string;\n}>;\n\nexport const DatePickerControlled: React.FC<DatePickerControlledProps> = ({\n\tinputProps,\n\t...props\n}) => {\n\treturn (\n\t\t<ControlledFieldWrapper {...props}>\n\t\t\t{(fieldProps) => (\n\t\t\t\t<Popover>\n\t\t\t\t\t<PopoverTrigger asChild>\n\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant={\"outline\"}\n\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\" pl-3 text-left font-normal\",\n\t\t\t\t\t\t\t\t\t!fieldProps.value && \"text-muted-foreground\",\n\t\t\t\t\t\t\t\t\tinputProps?.className,\n\t\t\t\t\t\t\t\t\tfieldProps.isError && \"border-destructive\",\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{fieldProps.value ? (\n\t\t\t\t\t\t\t\t\tformat(fieldProps.value, \"dd/MM/yyyy\")\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<span>Pick a date</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<CalendarIcon className=\"opacity-50 ml-auto w-4 h-4\" />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t</PopoverTrigger>\n\t\t\t\t\t<PopoverContent className=\"p-0 w-auto\" align=\"start\">\n\t\t\t\t\t\t<Calendar\n\t\t\t\t\t\t\tmode=\"single\"\n\t\t\t\t\t\t\tselected={fieldProps.value}\n\t\t\t\t\t\t\tonSelect={fieldProps.onChange}\n\t\t\t\t\t\t\tdisabled={(date) =>\n\t\t\t\t\t\t\t\tdate > new Date() || date < new Date(\"1900-01-01\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinitialFocus\n\t\t\t\t\t\t/>\n\t\t\t\t\t</PopoverContent>\n\t\t\t\t</Popover>\n\t\t\t)}\n\t\t</ControlledFieldWrapper>\n\t);\n};\n\ntype RadioGroupControlledProps = ControlledFieldWrapperProps<{\n\tclassName?: string;\n\toptions: Array<{\n\t\tlabel: string | ReactNode;\n\t\tvalue: string;\n\t\tdisabled?: boolean;\n\t}>;\n}>;\n\nexport const RadioGroupControlled: React.FC<RadioGroupControlledProps> = ({\n\tinputProps,\n\t...props\n}) => {\n\treturn (\n\t\t<ControlledFieldWrapper {...props} inline={false}>\n\t\t\t{(fieldProps) => (\n\t\t\t\t<RadioGroup\n\t\t\t\t\tonValueChange={fieldProps.onChange}\n\t\t\t\t\tdefaultValue={fieldProps.value}\n\t\t\t\t\tclassName={cn(\"flex flex-col space-y-1 mt-2\", inputProps?.className)}\n\t\t\t\t>\n\t\t\t\t\t{inputProps?.options?.map((option, index) => (\n\t\t\t\t\t\t<FormItem\n\t\t\t\t\t\t\tkey={`radio-group-${index}-${fieldProps.id}`}\n\t\t\t\t\t\t\tclassName=\"flex items-center space-x-3 space-y-0\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t\t<RadioGroupItem\n\t\t\t\t\t\t\t\t\tdisabled={option.disabled}\n\t\t\t\t\t\t\t\t\tvalue={option.value}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t<FormLabel className=\"font-normal\">{option.label}</FormLabel>\n\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t))}\n\t\t\t\t</RadioGroup>\n\t\t\t)}\n\t\t</ControlledFieldWrapper>\n\t);\n};\n\ntype RadioSwitchControlledProps = ControlledFieldWrapperProps<{\n\tclassName?: string;\n\tbordered?: boolean;\n}>;\n\nexport const RadioSwitchControlled = ({\n\tinputProps,\n\t...props\n}: RadioSwitchControlledProps) => {\n\treturn (\n\t\t<div\n\t\t\tclassName={cn(\" gap-2  \", {\n\t\t\t\t\"border rounded-md p-4\": inputProps?.bordered,\n\t\t\t})}\n\t\t>\n\t\t\t<ControlledFieldWrapper\n\t\t\t\tclassName=\"flex-row-reverse gap-2 w-fit\"\n\t\t\t\tinline\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t{(fieldProps) => (\n\t\t\t\t\t<Switch\n\t\t\t\t\t\tid={fieldProps.id}\n\t\t\t\t\t\tchecked={fieldProps.value}\n\t\t\t\t\t\tonCheckedChange={fieldProps.onChange}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</ControlledFieldWrapper>\n\t\t</div>\n\t);\n};\n\ntype TextAreaControllerProps = ControlledFieldWrapperProps<\n\tReact.ComponentProps<\"textarea\">\n>;\n\nexport const TextAreaControlled: React.FC<TextAreaControllerProps> = ({\n\tinputProps,\n\t...props\n}) => {\n\treturn (\n\t\t<ControlledFieldWrapper {...props}>\n\t\t\t{(fieldProps) => (\n\t\t\t\t<Textarea\n\t\t\t\t\t{...inputProps}\n\t\t\t\t\t{...fieldProps}\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\tinputProps?.className,\n\t\t\t\t\t\tfieldProps.isError && \"border-destructive\",\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</ControlledFieldWrapper>\n\t);\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/ui/form.tsx",
      "content": "\"use client\";\n\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport * as React from \"react\";\nimport {\n\tController,\n\tControllerProps,\n\tFieldPath,\n\tFieldValues,\n\tFormProvider,\n\tuseFormContext,\n} from \"react-hook-form\";\n\nimport { Label } from \"@/components/ui/label\";\nimport { cn } from \"@/lib/utils\";\n\nconst Form = FormProvider;\n\ntype FormFieldContextValue<\n\tTFieldValues extends FieldValues = FieldValues,\n\tTName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n\tname: TName;\n};\n\nexport const FormFieldContext = React.createContext<FormFieldContextValue>(\n\t{} as FormFieldContextValue,\n);\n\nconst FormField = <\n\tTFieldValues extends FieldValues = FieldValues,\n\tTName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n\t...props\n}: ControllerProps<TFieldValues, TName>) => {\n\treturn (\n\t\t<FormFieldContext.Provider value={{ name: props.name }}>\n\t\t\t<Controller {...props} />\n\t\t</FormFieldContext.Provider>\n\t);\n};\n\nconst useFormField = () => {\n\tconst fieldContext = React.useContext(FormFieldContext);\n\tconst itemContext = React.useContext(FormItemContext);\n\tconst { getFieldState, formState } = useFormContext();\n\n\tconst fieldState = getFieldState(fieldContext.name, formState);\n\n\tif (!fieldContext) {\n\t\tthrow new Error(\"useFormField should be used within <FormField>\");\n\t}\n\n\tconst { id } = itemContext;\n\n\treturn {\n\t\tid,\n\t\tname: fieldContext.name,\n\t\tformItemId: `${id}-form-item`,\n\t\tformDescriptionId: `${id}-form-item-description`,\n\t\tformMessageId: `${id}-form-item-message`,\n\t\t...fieldState,\n\t};\n};\n\ntype FormItemContextValue = {\n\tid: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n\t{} as FormItemContextValue,\n);\n\nconst FormItem = React.forwardRef<\n\tHTMLDivElement,\n\tReact.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n\tconst id = React.useId();\n\n\treturn (\n\t\t<FormItemContext.Provider value={{ id }}>\n\t\t\t<div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n\t\t</FormItemContext.Provider>\n\t);\n});\nFormItem.displayName = \"FormItem\";\n\nconst FormLabel = React.forwardRef<\n\tReact.ElementRef<typeof LabelPrimitive.Root>,\n\tReact.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n\tconst { error, formItemId } = useFormField();\n\n\treturn (\n\t\t<Label\n\t\t\tref={ref}\n\t\t\tclassName={cn(error && \"text-destructive\", className)}\n\t\t\thtmlFor={formItemId}\n\t\t\t{...props}\n\t\t/>\n\t);\n});\nFormLabel.displayName = \"FormLabel\";\n\nconst FormControl = React.forwardRef<\n\tReact.ElementRef<typeof Slot>,\n\tReact.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n\tconst { error, formItemId, formDescriptionId, formMessageId } =\n\t\tuseFormField();\n\n\treturn (\n\t\t<Slot\n\t\t\tref={ref}\n\t\t\tid={formItemId}\n\t\t\taria-describedby={\n\t\t\t\t!error\n\t\t\t\t\t? `${formDescriptionId}`\n\t\t\t\t\t: `${formDescriptionId} ${formMessageId}`\n\t\t\t}\n\t\t\taria-invalid={!!error}\n\t\t\t{...props}\n\t\t/>\n\t);\n});\nFormControl.displayName = \"FormControl\";\n\nconst FormDescription = React.forwardRef<\n\tHTMLParagraphElement,\n\tReact.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n\tconst { formDescriptionId } = useFormField();\n\n\treturn (\n\t\t<p\n\t\t\tref={ref}\n\t\t\tid={formDescriptionId}\n\t\t\tclassName={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n});\nFormDescription.displayName = \"FormDescription\";\n\nconst FormMessage = React.forwardRef<\n\tHTMLParagraphElement,\n\tReact.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n\tconst { error, formMessageId } = useFormField();\n\tconst body = error ? String(error?.message) : children;\n\n\tif (!body) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<p\n\t\t\tref={ref}\n\t\t\tid={formMessageId}\n\t\t\tclassName={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n\t\t\t{...props}\n\t\t>\n\t\t\t{body}\n\t\t</p>\n\t);\n});\nFormMessage.displayName = \"FormMessage\";\n\nexport {\n\tForm,\n\tFormControl,\n\tFormDescription,\n\tFormField,\n\tFormItem,\n\tFormLabel,\n\tFormMessage,\n\tuseFormField,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/components/ui/label.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { config } from \"@/config\";\nimport { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n\treturn twMerge(clsx(inputs));\n}\n\nexport function capitalize(str: string) {\n\treturn str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype GroupBy<T, K extends keyof T> = Record<string, T[]>;\n\nexport function groupBy<T, K extends keyof T>(\n\tarray: T[],\n\tkey: K,\n): GroupBy<T, K> {\n\treturn array.reduce(\n\t\t(acc, item) => {\n\t\t\tconst keyValue = String(item[key]);\n\t\t\tif (!acc[keyValue]) {\n\t\t\t\tacc[keyValue] = [];\n\t\t\t}\n\t\t\tacc[keyValue].push(item);\n\t\t\treturn acc;\n\t\t},\n\t\t{} as GroupBy<T, K>,\n\t);\n}\n\nexport function absoluteUrl(path: string) {\n\treturn process.env.NODE_ENV === \"development\"\n\t\t? `http://localhost:3000${path}`\n\t\t: `https://${config.appUrl}${path}`;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/config.ts",
      "content": "export const config = {\n  appUrl:\n    process.env.NODE_ENV === \"production\"\n      ? process.env.VERCEL_PROJECT_PRODUCTION_URL ??\n        process.env.NEXT_PUBLIC_APP_URL!\n      : \"localhost:3000\",\n  social: {\n    github: \"https://github.com/akash3444/shadcn-ui-blocks\",\n    twitter: \"https://twitter.com/akash_3444\",\n  },\n};\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}