{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "timeline-01",
  "type": "registry:block",
  "title": "Timeline 01",
  "description": "A simple timeline block",
  "dependencies": [
    "lucide-react",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "lucide-react"
  ],
  "registryDependencies": [
    "badge"
  ],
  "files": [
    {
      "path": "src/blocks/timeline-01/timeline-01.tsx",
      "content": "import { Badge } from \"@/components/ui/badge\";\nimport { Building2, Calendar } from \"lucide-react\";\n\nconst experiences = [\n  {\n    title: \"Senior Full Stack Developer\",\n    company: \"TechCorp Solutions\",\n    period: \"2023 - Present\",\n    description:\n      \"Led the development of enterprise-scale web applications, mentored junior developers, and implemented best practices for code quality and performance optimization.\",\n    technologies: [\"React\", \"Node.js\", \"TypeScript\", \"AWS\", \"MongoDB\"],\n  },\n  {\n    title: \"Full Stack Developer\",\n    company: \"Digital Innovations Inc\",\n    period: \"2021 - 2023\",\n    description:\n      \"Developed and maintained multiple client projects, implemented responsive designs, and integrated third-party APIs for enhanced functionality.\",\n    technologies: [\"React\", \"Express.js\", \"PostgreSQL\", \"Docker\", \"Redis\"],\n  },\n  {\n    title: \"Frontend Developer\",\n    company: \"WebTech Studios\",\n    period: \"2018 - 2021\",\n    description:\n      \"Created responsive and interactive user interfaces, collaborated with designers, and optimized application performance.\",\n    technologies: [\"React\", \"JavaScript\", \"SASS\", \"Webpack\", \"Jest\"],\n  },\n];\n\nexport default function Timeline() {\n  return (\n    <div className=\"max-w-screen-sm mx-auto py-12 md:py-20 px-6\">\n      <div className=\"relative ml-3\">\n        {/* Timeline line */}\n        <div className=\"absolute left-0 top-4 bottom-0 border-l-2\" />\n\n        {experiences.map(\n          ({ company, description, period, technologies, title }, index) => (\n            <div key={index} className=\"relative pl-8 pb-12 last:pb-0\">\n              {/* Timeline dot */}\n              <div className=\"absolute h-3 w-3 -translate-x-1/2 left-px top-3 rounded-full border-2 border-primary bg-background\" />\n\n              {/* Content */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex-shrink-0 h-9 w-9 bg-accent rounded-full flex items-center justify-center\">\n                    <Building2 className=\"h-5 w-5 text-muted-foreground\" />\n                  </div>\n                  <span className=\"text-base sm:text-lg font-semibold\">\n                    {company}\n                  </span>\n                </div>\n                <div>\n                  <h3 className=\"text-lg sm:text-xl font-medium\">{title}</h3>\n                  <div className=\"flex items-center gap-2 mt-1 text-sm\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span>{period}</span>\n                  </div>\n                </div>\n                <p className=\"text-sm sm:text-base text-muted-foreground\">\n                  {description}\n                </p>\n                <div className=\"flex flex-wrap gap-2\">\n                  {technologies.map((tech) => (\n                    <Badge\n                      key={tech}\n                      variant=\"secondary\"\n                      className=\"rounded-full\"\n                    >\n                      {tech}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )\n        )}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:block",
      "target": "components/timeline-01/timeline-01.tsx"
    },
    {
      "path": "src/components/ui/badge.tsx",
      "content": "import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 focus:ring-offset-background\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { config } from \"@/config\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function capitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype GroupBy<T, K extends keyof T> = Record<string, T[]>;\n\nexport function groupBy<T, K extends keyof T>(\n  array: T[],\n  key: K\n): GroupBy<T, K> {\n  return array.reduce((acc, item) => {\n    const keyValue = String(item[key]);\n    if (!acc[keyValue]) {\n      acc[keyValue] = [];\n    }\n    acc[keyValue].push(item);\n    return acc;\n  }, {} as GroupBy<T, K>);\n}\n\nexport function absoluteUrl(path: string) {\n  return process.env.NODE_ENV === \"development\"\n    ? `http://localhost:3000${path}`\n    : `https://${config.appUrl}${path}`;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/config.ts",
      "content": "export const config = {\n  appUrl:\n    process.env.NODE_ENV === \"production\"\n      ? process.env.VERCEL_PROJECT_PRODUCTION_URL ??\n        process.env.NEXT_PUBLIC_APP_URL!\n      : \"localhost:3000\",\n  social: {\n    github: \"https://github.com/akash3444/shadcn-ui-blocks\",\n    twitter: \"https://twitter.com/akash_3444\",\n  },\n};\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}