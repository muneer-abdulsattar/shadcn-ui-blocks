{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "debug",
  "type": "registry:ui",
  "title": "Debug Component",
  "dependencies": [
    "react-syntax-highlighter"
  ],
  "devDependencies": [
    "@types/react-syntax-highlighter"
  ],
  "files": [
    {
      "path": "src/components/extensions/debug.tsx",
      "content": "\"use client\";\n\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipProvider,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport {\n\tCheck,\n\tChevronDown,\n\tChevronRight,\n\tChevronUp,\n\tCopy,\n\tMoreHorizontal,\n} from \"lucide-react\";\nimport * as React from \"react\";\n\ntype JsonViewerProps = {\n\tdata: any;\n\trootName?: string;\n\tdefaultExpanded?: boolean;\n\tclassName?: string;\n};\n\nexport default function Debug({\n\tdata,\n\trootName = \"root\",\n\tdefaultExpanded = true,\n\tclassName,\n}: JsonViewerProps) {\n\treturn (\n\t\t<TooltipProvider>\n\t\t\t<div className={cn(\"font-mono text-sm \", className)}>\n\t\t\t\t<JsonNode\n\t\t\t\t\tname={rootName}\n\t\t\t\t\tdata={data}\n\t\t\t\t\tisRoot={true}\n\t\t\t\t\tdefaultExpanded={defaultExpanded}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</TooltipProvider>\n\t);\n}\n\ntype JsonNodeProps = {\n\tname: string;\n\tdata: any;\n\tisRoot?: boolean;\n\tdefaultExpanded?: boolean;\n\tlevel?: number;\n};\n\nfunction JsonNode({\n\tname,\n\tdata,\n\tisRoot = false,\n\tdefaultExpanded = true,\n\tlevel = 0,\n}: JsonNodeProps) {\n\tconst [isExpanded, setIsExpanded] = React.useState(defaultExpanded);\n\tconst [isCopied, setIsCopied] = React.useState(false);\n\n\tconst handleToggle = () => {\n\t\tsetIsExpanded(!isExpanded);\n\t};\n\n\tconst copyToClipboard = (e: React.MouseEvent) => {\n\t\te.stopPropagation();\n\t\tnavigator.clipboard.writeText(JSON.stringify(data, null, 2));\n\t\tsetIsCopied(true);\n\t\tsetTimeout(() => setIsCopied(false), 2000);\n\t};\n\n\tconst dataType =\n\t\tdata === null ? \"null\" : Array.isArray(data) ? \"array\" : typeof data;\n\tconst isExpandable =\n\t\tdata !== null &&\n\t\tdata !== undefined &&\n\t\t!(data instanceof Date) &&\n\t\t(dataType === \"object\" || dataType === \"array\");\n\tconst itemCount =\n\t\tisExpandable && data !== null && data !== undefined\n\t\t\t? Object.keys(data).length\n\t\t\t: 0;\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cn(\"pl-4 group/object\", level > 0 && \"border-l border-border\")}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"flex items-center gap-1 py-1 hover:bg-muted/50 rounded px-1 -ml-4 cursor-pointer group/property\",\n\t\t\t\t\tisRoot && \"text-primary font-semibold\",\n\t\t\t\t)}\n\t\t\t\tonClick={isExpandable ? handleToggle : undefined}\n\t\t\t>\n\t\t\t\t{isExpandable ? (\n\t\t\t\t\t<div className=\"flex justify-center items-center w-4 h-4\">\n\t\t\t\t\t\t{isExpanded ? (\n\t\t\t\t\t\t\t<ChevronDown className=\"w-3.5 h-3.5 text-muted-foreground\" />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<ChevronRight className=\"w-3.5 h-3.5 text-muted-foreground\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"w-4\" />\n\t\t\t\t)}\n\n\t\t\t\t<span className=\"text-primary\">{name}</span>\n\n\t\t\t\t<span className=\"text-muted-foreground\">\n\t\t\t\t\t{isExpandable ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{dataType === \"array\" ? \"[\" : \"{\"}\n\t\t\t\t\t\t\t{!isExpanded && (\n\t\t\t\t\t\t\t\t<span className=\"text-muted-foreground\">\n\t\t\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t\t\t{itemCount} {itemCount === 1 ? \"item\" : \"items\"}{\" \"}\n\t\t\t\t\t\t\t\t\t{dataType === \"array\" ? \"]\" : \"}\"}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t\":\"\n\t\t\t\t\t)}\n\t\t\t\t</span>\n\n\t\t\t\t{!isExpandable && <JsonValue data={data} />}\n\n\t\t\t\t{!isExpandable && <div className=\"w-3.5\" />}\n\n\t\t\t\t<button\n\t\t\t\t\tonClick={copyToClipboard}\n\t\t\t\t\tclassName=\"hover:bg-muted opacity-0 group-hover/property:opacity-100 ml-auto p-1 rounded\"\n\t\t\t\t\ttitle=\"Copy to clipboard\"\n\t\t\t\t>\n\t\t\t\t\t{isCopied ? (\n\t\t\t\t\t\t<Check className=\"w-3.5 h-3.5 text-green-500\" />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Copy className=\"w-3.5 h-3.5 text-muted-foreground\" />\n\t\t\t\t\t)}\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{isExpandable && isExpanded && data !== null && data !== undefined && (\n\t\t\t\t<div className=\"pl-4\">\n\t\t\t\t\t{Object.keys(data).map((key) => (\n\t\t\t\t\t\t<JsonNode\n\t\t\t\t\t\t\tkey={key}\n\t\t\t\t\t\t\tname={dataType === \"array\" ? `${key}` : key}\n\t\t\t\t\t\t\tdata={data[key]}\n\t\t\t\t\t\t\tlevel={level + 1}\n\t\t\t\t\t\t\tdefaultExpanded={level < 1}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t\t<div className=\"py-1 pl-4 text-muted-foreground\">\n\t\t\t\t\t\t{dataType === \"array\" ? \"]\" : \"}\"}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\n// Update the JsonValue function to make the entire row clickable with an expand icon\nfunction JsonValue({ data }: { data: any }) {\n\tconst [isExpanded, setIsExpanded] = React.useState(false);\n\tconst dataType = typeof data;\n\tconst TEXT_LIMIT = 80; // Character limit before truncation\n\n\tif (data === null) {\n\t\treturn <span className=\"text-rose-500\">null</span>;\n\t}\n\n\tif (data === undefined) {\n\t\treturn <span className=\"text-muted-foreground\">undefined</span>;\n\t}\n\n\tif (data instanceof Date) {\n\t\treturn <span className=\"text-purple-500\">{data.toISOString()}</span>;\n\t}\n\n\tswitch (dataType) {\n\t\tcase \"string\":\n\t\t\tif (data.length > TEXT_LIMIT) {\n\t\t\t\treturn (\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"group relative flex flex-1 items-center text-emerald-500 cursor-pointer\"\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\tsetIsExpanded(!isExpanded);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{`\"`}\n\t\t\t\t\t\t{isExpanded ? (\n\t\t\t\t\t\t\t<span className=\"inline-block max-w-full\">{data}</span>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Tooltip delayDuration={300}>\n\t\t\t\t\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t\t\t\t\t<span className=\"inline-block max-w-full\">\n\t\t\t\t\t\t\t\t\t\t{data.substring(0, TEXT_LIMIT)}...\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</TooltipTrigger>\n\t\t\t\t\t\t\t\t<TooltipContent\n\t\t\t\t\t\t\t\t\tside=\"bottom\"\n\t\t\t\t\t\t\t\t\tclassName=\"p-2 max-w-md text-xs break-words\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{data}\n\t\t\t\t\t\t\t\t</TooltipContent>\n\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{`\"`}\n\t\t\t\t\t\t<div className=\"top-1/2 right-0 absolute opacity-0 group-hover:opacity-100 transition-opacity -translate-y-1/2 translate-x-[calc(100%+4px)]\">\n\t\t\t\t\t\t\t{isExpanded ? (\n\t\t\t\t\t\t\t\t<ChevronUp className=\"w-3 h-3 text-muted-foreground\" />\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<MoreHorizontal className=\"w-3 h-3 text-muted-foreground\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn <span className=\"text-emerald-500\">{`\"${data}\"`}</span>;\n\t\tcase \"number\":\n\t\t\treturn <span className=\"text-amber-500\">{data}</span>;\n\t\tcase \"boolean\":\n\t\t\treturn <span className=\"text-blue-500\">{data.toString()}</span>;\n\t\tdefault:\n\t\t\treturn <span>{String(data)}</span>;\n\t}\n}\n",
      "type": "registry:ui"
    }
  ]
}