{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkbox-10",
  "type": "registry:component",
  "title": "Multi Color Picker Checkbox",
  "description": "A multi color picker checkbox component",
  "dependencies": [
    "lucide-react",
    "@radix-ui/react-checkbox",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-checkbox",
    "lucide-react"
  ],
  "files": [
    {
      "path": "src/components/customized/checkbox/checkbox-10.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\";\nimport { CircleCheck } from \"lucide-react\";\n\nconst colors = [\"indigo\", \"rose\", \"sky\", \"green\", \"orange\"];\n\nconst CheckboxCardDemo = () => {\n  return (\n    <div className=\"flex items-center flex-wrap gap-2\">\n      {colors.map((color) => (\n        <CheckboxPrimitive.Root\n          key={color}\n          defaultChecked={color === \"indigo\"}\n          className={cn(\"h-8 w-8 rounded-full\", {\n            \"bg-indigo-500 text-indigo-500\": color === \"indigo\",\n            \"bg-rose-500 text-rose-500\": color === \"rose\",\n            \"bg-sky-500 text-sky-500\": color === \"sky\",\n            \"bg-green-500 text-green-500\": color === \"green\",\n            \"bg-orange-500 text-orange-500\": color === \"orange\",\n          })}\n        >\n          <CheckboxPrimitive.Indicator className=\"h-full w-full flex items-center justify-center\">\n            <CircleCheck className=\"h-5 w-5 fill-white stroke-current\" />\n          </CheckboxPrimitive.Indicator>\n        </CheckboxPrimitive.Root>\n      ))}\n    </div>\n  );\n};\n\nexport default CheckboxCardDemo;\n",
      "type": "registry:component"
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { config } from \"@/config\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function capitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype GroupBy<T, K extends keyof T> = Record<string, T[]>;\n\nexport function groupBy<T, K extends keyof T>(\n  array: T[],\n  key: K\n): GroupBy<T, K> {\n  return array.reduce((acc, item) => {\n    const keyValue = String(item[key]);\n    if (!acc[keyValue]) {\n      acc[keyValue] = [];\n    }\n    acc[keyValue].push(item);\n    return acc;\n  }, {} as GroupBy<T, K>);\n}\n\nexport function absoluteUrl(path: string) {\n  return process.env.NODE_ENV === \"development\"\n    ? `http://localhost:3000${path}`\n    : `https://${config.appUrl}${path}`;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/config.ts",
      "content": "export const config = {\n  appUrl:\n    process.env.NODE_ENV === \"production\"\n      ? process.env.VERCEL_PROJECT_PRODUCTION_URL ??\n        process.env.NEXT_PUBLIC_APP_URL!\n      : \"localhost:3000\",\n  social: {\n    github: \"https://github.com/akash3444/shadcn-ui-blocks\",\n    twitter: \"https://twitter.com/akash_3444\",\n  },\n};\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}