{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "progress-09",
  "type": "registry:component",
  "title": "Circular Progress with Custom Label",
  "description": "A circular progress component with custom label",
  "dependencies": [
    "@radix-ui/react-slider",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "src/components/customized/progress/progress-09.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { Slider } from \"@/components/ui/slider\";\nimport { cn } from \"@/lib/utils\";\n\ninterface CircularProgressProps {\n  value: number;\n  renderLabel?: (progress: number) => number | string;\n  size?: number;\n  strokeWidth?: number;\n  circleStrokeWidth?: number;\n  progressStrokeWidth?: number;\n  shape?: \"square\" | \"round\";\n  className?: string;\n  progressClassName?: string;\n  labelClassName?: string;\n  showLabel?: boolean;\n}\n\nconst CircularProgress = ({\n  value,\n  renderLabel,\n  className,\n  progressClassName,\n  labelClassName,\n  showLabel,\n  shape = \"round\",\n  size = 100,\n  strokeWidth,\n  circleStrokeWidth = 10,\n  progressStrokeWidth = 10,\n}: CircularProgressProps) => {\n  const radius = size / 2 - 10;\n  const circumference = Math.ceil(3.14 * radius * 2);\n  const percentage = Math.ceil(circumference * ((100 - value) / 100));\n\n  const viewBox = `-${size * 0.125} -${size * 0.125} ${size * 1.25} ${\n    size * 1.25\n  }`;\n\n  return (\n    <div className=\"relative\">\n      <svg\n        width={size}\n        height={size}\n        viewBox={viewBox}\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        style={{ transform: \"rotate(-90deg)\" }}\n        className=\"relative\"\n      >\n        {/* Base Circle */}\n        <circle\n          r={radius}\n          cx={size / 2}\n          cy={size / 2}\n          fill=\"transparent\"\n          strokeWidth={strokeWidth ?? circleStrokeWidth}\n          strokeDasharray={circumference}\n          strokeDashoffset=\"0\"\n          className={cn(\"stroke-primary/25\", className)}\n        />\n\n        {/* Progress */}\n        <circle\n          r={radius}\n          cx={size / 2}\n          cy={size / 2}\n          strokeWidth={strokeWidth ?? progressStrokeWidth}\n          strokeLinecap={shape}\n          strokeDashoffset={percentage}\n          fill=\"transparent\"\n          strokeDasharray={circumference}\n          className={cn(\"stroke-primary\", progressClassName)}\n        />\n      </svg>\n      {showLabel && (\n        <div\n          className={cn(\n            \"absolute inset-0 flex items-center justify-center text-md\",\n            labelClassName\n          )}\n        >\n          {renderLabel ? renderLabel(value) : value}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default function CircularProgressWithCustomLabelDemo() {\n  const [progress, setProgress] = React.useState([13]);\n\n  return (\n    <div className=\"max-w-xs mx-auto w-full flex flex-col items-center\">\n      <CircularProgress\n        value={progress[0]}\n        size={120}\n        strokeWidth={10}\n        showLabel\n        labelClassName=\"text-xl font-bold\"\n        renderLabel={(progress) => `${progress}%`}\n      />\n      <Slider\n        defaultValue={progress}\n        max={100}\n        step={1}\n        onValueChange={setProgress}\n        className=\"mt-6\"\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ui/slider.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { config } from \"@/config\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function capitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype GroupBy<T, K extends keyof T> = Record<string, T[]>;\n\nexport function groupBy<T, K extends keyof T>(\n  array: T[],\n  key: K\n): GroupBy<T, K> {\n  return array.reduce((acc, item) => {\n    const keyValue = String(item[key]);\n    if (!acc[keyValue]) {\n      acc[keyValue] = [];\n    }\n    acc[keyValue].push(item);\n    return acc;\n  }, {} as GroupBy<T, K>);\n}\n\nexport function absoluteUrl(path: string) {\n  return process.env.NODE_ENV === \"development\"\n    ? `http://localhost:3000${path}`\n    : `https://${config.appUrl}${path}`;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/config.ts",
      "content": "export const config = {\n  appUrl:\n    process.env.NODE_ENV === \"production\"\n      ? process.env.VERCEL_PROJECT_PRODUCTION_URL ??\n        process.env.NEXT_PUBLIC_APP_URL!\n      : \"localhost:3000\",\n  social: {\n    github: \"https://github.com/akash3444/shadcn-ui-blocks\",\n    twitter: \"https://twitter.com/akash_3444\",\n  },\n};\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}