{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-with-icons",
  "type": "registry:ui",
  "title": "Input With Icons",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "input"
  ],
  "files": [
    {
      "path": "src/components/extensions/input-with-icons.tsx",
      "content": "import { Input, type InputProps } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport React, { type ButtonHTMLAttributes } from \"react\";\n\ntype Icon =\n\t| React.ComponentType<{ className?: string }>\n\t| React.ReactElement\n\t| string;\n\ntype TailwindSpacingString =\n\t| \"px\"\n\t| \"0\"\n\t| \"0.5\"\n\t| \"1\"\n\t| \"1.5\"\n\t| \"2\"\n\t| \"2.5\"\n\t| \"3\"\n\t| \"3.5\"\n\t| \"4\"\n\t| \"5\"\n\t| \"6\"\n\t| \"7\"\n\t| \"8\"\n\t| \"9\"\n\t| \"10\"\n\t| \"11\"\n\t| \"12\"\n\t| \"14\"\n\t| \"16\"\n\t| \"20\"\n\t| \"24\"\n\t| \"28\"\n\t| \"32\"\n\t| \"36\"\n\t| \"40\"\n\t| \"44\"\n\t| \"48\"\n\t| \"52\"\n\t| \"56\"\n\t| \"60\"\n\t| \"64\"\n\t| \"72\"\n\t| \"80\"\n\t| \"96\";\n\nconst DisplayIcon = ({\n\ticon,\n\tclassName,\n}: {\n\ticon?: Icon;\n\tclassName?: string;\n}) => {\n\tif (!icon) return null;\n\n\t// Case 1: String (image URL)\n\tif (typeof icon === \"string\") {\n\t\treturn <img src={icon} alt=\"icon\" className=\"w-4 h-4\" />;\n\t}\n\n\t// Case 2: Already rendered ReactElement\n\tif (React.isValidElement(icon)) {\n\t\treturn icon;\n\t}\n\n\t// Case 3: Component type that needs to be rendered\n\tconst Icon = icon;\n\treturn <Icon className={cn(\"size-4\", className)} />;\n};\n\ninterface InputWithIconsProps extends InputProps {\n\tStartIcon?: Icon;\n\tEndIcon?: Icon;\n\tStartButton?: { icon: Icon } & ButtonHTMLAttributes<HTMLButtonElement>;\n\tEndButton?: { icon: Icon } & ButtonHTMLAttributes<HTMLButtonElement>;\n\tEndSize?: TailwindSpacingString;\n\tStartSize?: TailwindSpacingString;\n}\n\nexport default function InputWithIcons({\n\tStartIcon,\n\tEndIcon,\n\tEndSize,\n\tStartSize,\n\tStartButton,\n\tEndButton,\n\t...props\n}: InputWithIconsProps) {\n\treturn (\n\t\t<div className=\"relative\">\n\t\t\t{EndIcon && (\n\t\t\t\t<div className=\"absolute inset-y-0 flex justify-center items-center peer-disabled:opacity-50 pe-3 text-muted-foreground/80 pointer-events-none end-0\">\n\t\t\t\t\t<DisplayIcon icon={EndIcon} />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t{EndButton && (\n\t\t\t\t<button\n\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\tclassName=\"focus:z-10 absolute inset-y-0 flex justify-center items-center disabled:opacity-50 focus-visible:border-ring rounded-e-md outline-none focus-visible:ring-[3px] focus-visible:ring-ring/50 w-9 h-full text-muted-foreground/80 hover:text-foreground transition-[color,box-shadow] disabled:cursor-not-allowed disabled:pointer-events-none end-0\"\n\t\t\t\t\taria-label=\"Subscribe\"\n\t\t\t\t\t{...EndButton}\n\t\t\t\t>\n\t\t\t\t\t<DisplayIcon icon={EndButton.icon} />\n\t\t\t\t</button>\n\t\t\t)}\n\n\t\t\t<Input\n\t\t\t\t{...props}\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"peer \",\n\t\t\t\t\t{\n\t\t\t\t\t\t\"ps-9\": StartIcon || StartButton,\n\t\t\t\t\t\t\"pe-9\": EndIcon || EndButton,\n\t\t\t\t\t},\n\t\t\t\t\tStartSize && `ps-${StartSize}`,\n\t\t\t\t\tEndSize && `pe-${EndSize}`,\n\t\t\t\t\tprops.className,\n\t\t\t\t)}\n\t\t\t/>\n\n\t\t\t{StartButton && (\n\t\t\t\t<button\n\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\tclassName=\"focus:z-10 absolute inset-y-0 flex justify-center items-center disabled:opacity-50 focus-visible:border-ring rounded-s-md outline-none focus-visible:ring-[3px] focus-visible:ring-ring/50 w-9 h-full text-muted-foreground/80 hover:text-foreground transition-[color,box-shadow] disabled:cursor-not-allowed disabled:pointer-events-none start-0\"\n\t\t\t\t\taria-label=\"Subscribe\"\n\t\t\t\t\t{...StartButton}\n\t\t\t\t>\n\t\t\t\t\t<DisplayIcon icon={StartButton.icon} />\n\t\t\t\t</button>\n\t\t\t)}\n\n\t\t\t{StartIcon && (\n\t\t\t\t<div className=\"absolute inset-y-0 flex justify-center items-center peer-disabled:opacity-50 ps-3 text-muted-foreground/80 pointer-events-none start-0\">\n\t\t\t\t\t<DisplayIcon icon={StartIcon} />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { config } from \"@/config\";\nimport { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n\treturn twMerge(clsx(inputs));\n}\n\nexport function capitalize(str: string) {\n\treturn str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype GroupBy<T, K extends keyof T> = Record<string, T[]>;\n\nexport function groupBy<T, K extends keyof T>(\n\tarray: T[],\n\tkey: K,\n): GroupBy<T, K> {\n\treturn array.reduce(\n\t\t(acc, item) => {\n\t\t\tconst keyValue = String(item[key]);\n\t\t\tif (!acc[keyValue]) {\n\t\t\t\tacc[keyValue] = [];\n\t\t\t}\n\t\t\tacc[keyValue].push(item);\n\t\t\treturn acc;\n\t\t},\n\t\t{} as GroupBy<T, K>,\n\t);\n}\n\nexport function absoluteUrl(path: string) {\n\treturn process.env.NODE_ENV === \"development\"\n\t\t? `http://localhost:3000${path}`\n\t\t: `https://${config.appUrl}${path}`;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/config.ts",
      "content": "export const config = {\n  appUrl:\n    process.env.NODE_ENV === \"production\"\n      ? process.env.VERCEL_PROJECT_PRODUCTION_URL ??\n        process.env.NEXT_PUBLIC_APP_URL!\n      : \"localhost:3000\",\n  social: {\n    github: \"https://github.com/akash3444/shadcn-ui-blocks\",\n    twitter: \"https://twitter.com/akash_3444\",\n  },\n};\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}