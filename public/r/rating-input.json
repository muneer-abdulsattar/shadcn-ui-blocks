{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "rating-input",
  "type": "registry:ui",
  "title": "rating Input",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "src/components/extensions/rating-input.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Star } from \"lucide-react\";\nimport React, { useState } from \"react\";\n\nconst ratingVariants = {\n\tdefault: {\n\t\tstar: \"text-foreground\",\n\t\temptyStar: \"text-muted-foreground\",\n\t},\n\tdestructive: {\n\t\tstar: \"text-red-500\",\n\t\temptyStar: \"text-red-200\",\n\t},\n\tyellow: {\n\t\tstar: \"text-yellow-500\",\n\t\temptyStar: \"text-yellow-200\",\n\t},\n};\n\ninterface RatingProps extends React.HTMLAttributes<HTMLDivElement> {\n\trating: number;\n\ttotalStars?: number;\n\tsize?: number;\n\tfill?: boolean;\n\tIcon?: React.ReactElement;\n\tvariant?: keyof typeof ratingVariants;\n\tonRatingChange?: (rating: number) => void;\n\tshowText?: boolean; // Add showText prop\n\tdisabled?: boolean;\n}\n\nexport const RatingInput = ({\n\trating: initialRating,\n\ttotalStars = 5,\n\tsize = 20,\n\tfill = true,\n\tIcon = <Star />,\n\tvariant = \"default\",\n\tonRatingChange,\n\tshowText = false,\n\tdisabled = false,\n\t...props\n}: RatingProps) => {\n\tconst [hoverRating, setHoverRating] = useState<number | null>(null);\n\tconst [currentRating, setCurrentRating] = useState(initialRating);\n\tconst [isHovering, setIsHovering] = useState(false);\n\n\tconst handleMouseEnter = (event: React.MouseEvent<HTMLDivElement>) => {\n\t\tif (!disabled) {\n\t\t\tsetIsHovering(true);\n\t\t\tconst starIndex = parseInt(\n\t\t\t\t(event.currentTarget as HTMLDivElement).dataset.starIndex || \"0\",\n\t\t\t);\n\t\t\tsetHoverRating(starIndex);\n\t\t}\n\t};\n\n\tconst handleMouseLeave = () => {\n\t\tsetIsHovering(false);\n\t\tsetHoverRating(null);\n\t};\n\n\tconst handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\n\t\tif (!disabled) {\n\t\t\tconst starIndex = parseInt(\n\t\t\t\t(event.currentTarget as HTMLDivElement).dataset.starIndex || \"0\",\n\t\t\t);\n\t\t\tsetCurrentRating(starIndex);\n\t\t\tsetHoverRating(null);\n\t\t\tif (onRatingChange) {\n\t\t\t\tonRatingChange(starIndex);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst displayRating = disabled\n\t\t? initialRating\n\t\t: (hoverRating ?? currentRating);\n\tconst fullStars = Math.floor(displayRating);\n\tconst partialStar =\n\t\tdisplayRating % 1 > 0 ? (\n\t\t\t<PartialStar\n\t\t\t\tfillPercentage={displayRating % 1}\n\t\t\t\tsize={size}\n\t\t\t\tclassName={cn(ratingVariants[variant].star)}\n\t\t\t\tIcon={Icon}\n\t\t\t/>\n\t\t) : null;\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cn(\"flex w-fit flex-col gap-2\", {\n\t\t\t\t\"pointer-events-none\": disabled,\n\t\t\t})}\n\t\t\tonMouseLeave={handleMouseLeave}\n\t\t\t{...props}\n\t\t>\n\t\t\t<div className=\"flex items-center\" onMouseEnter={handleMouseEnter}>\n\t\t\t\t{[...Array(fullStars)].map((_, i) =>\n\t\t\t\t\tReact.cloneElement(Icon, {\n\t\t\t\t\t\tkey: i,\n\t\t\t\t\t\tsize,\n\t\t\t\t\t\tclassName: cn(\n\t\t\t\t\t\t\tfill ? \"fill-current stroke-1\" : \"fill-transparent\",\n\t\t\t\t\t\t\tratingVariants[variant].star,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tonClick: handleClick,\n\t\t\t\t\t\tonMouseEnter: handleMouseEnter,\n\t\t\t\t\t\t\"data-star-index\": i + 1,\n\t\t\t\t\t}),\n\t\t\t\t)}\n\t\t\t\t{partialStar}\n\t\t\t\t{[\n\t\t\t\t\t...Array(Math.max(0, totalStars - fullStars - (partialStar ? 1 : 0))),\n\t\t\t\t].map((_, i) =>\n\t\t\t\t\tReact.cloneElement(Icon, {\n\t\t\t\t\t\tkey: i + fullStars + 1,\n\t\t\t\t\t\tsize,\n\t\t\t\t\t\tclassName: cn(\"stroke-1\", ratingVariants[variant].emptyStar),\n\t\t\t\t\t\tonClick: handleClick,\n\t\t\t\t\t\tonMouseEnter: handleMouseEnter,\n\t\t\t\t\t\t\"data-star-index\": i + fullStars + 1,\n\t\t\t\t\t}),\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t{showText && (\n\t\t\t\t<span className=\"font-semibold text-muted-foreground text-xs\">\n\t\t\t\t\tCurrent Rating: {`${currentRating}`}\n\t\t\t\t</span>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\ninterface PartialStarProps {\n\tfillPercentage: number;\n\tsize: number;\n\tclassName?: string;\n\tIcon: React.ReactElement;\n}\n\nconst PartialStar = ({\n\tfillPercentage,\n\tsize,\n\tclassName,\n\tIcon,\n}: PartialStarProps) => {\n\treturn (\n\t\t<div style={{ position: \"relative\", display: \"inline-block\" }}>\n\t\t\t{React.cloneElement(Icon, {\n\t\t\t\tsize,\n\t\t\t\tclassName: cn(\"fill-transparent\", className),\n\t\t\t})}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\ttop: 0,\n\t\t\t\t\toverflow: \"hidden\",\n\t\t\t\t\twidth: `${fillPercentage * 100}%`,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{React.cloneElement(Icon, {\n\t\t\t\t\tsize,\n\t\t\t\t\tclassName: cn(\"fill-current\", className),\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n",
      "type": "registry:ui"
    }
  ]
}