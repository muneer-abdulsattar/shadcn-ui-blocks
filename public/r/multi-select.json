{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multi-select",
  "type": "registry:ui",
  "title": "Multi Select",
  "dependencies": [
    "cmdk",
    "lucide-react"
  ],
  "registryDependencies": [
    "badge",
    "command"
  ],
  "files": [
    {
      "path": "src/components/extensions/multi-select.tsx",
      "content": "\"use client\";\n\nimport { Command as CommandPrimitive, useCommandState } from \"cmdk\";\nimport { X } from \"lucide-react\";\nimport * as React from \"react\";\nimport { forwardRef, useEffect } from \"react\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n\tCommand,\n\tCommandGroup,\n\tCommandItem,\n\tCommandList,\n} from \"@/components/ui/command\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface Option {\n\tvalue: string;\n\tlabel: string;\n\tdisable?: boolean;\n\t/** fixed option that can't be removed. */\n\tfixed?: boolean;\n\t/** Group the options by providing key. */\n\t[key: string]: string | boolean | undefined;\n}\ninterface GroupOption {\n\t[key: string]: Option[];\n}\n\ninterface MultiSelectProps {\n\tvalue?: Option[];\n\tdefaultOptions?: Option[];\n\t/** manually controlled options */\n\toptions?: Option[];\n\tplaceholder?: string;\n\t/** Loading component. */\n\tloadingIndicator?: React.ReactNode;\n\t/** Empty component. */\n\temptyIndicator?: React.ReactNode;\n\t/** Debounce time for async search. Only work with `onSearch`. */\n\tdelay?: number;\n\t/**\n\t * Only work with `onSearch` prop. Trigger search when `onFocus`.\n\t * For example, when user click on the input, it will trigger the search to get initial options.\n\t **/\n\ttriggerSearchOnFocus?: boolean;\n\t/** async search */\n\tonSearch?: (value: string) => Promise<Option[]>;\n\t/**\n\t * sync search. This search will not showing loadingIndicator.\n\t * The rest props are the same as async search.\n\t * i.e.: creatable, groupBy, delay.\n\t **/\n\tonSearchSync?: (value: string) => Option[];\n\tonChange?: (options: Option[]) => void;\n\t/** Limit the maximum number of selected options. */\n\tmaxSelected?: number;\n\t/** When the number of selected options exceeds the limit, the onMaxSelected will be called. */\n\tonMaxSelected?: (maxLimit: number) => void;\n\t/** Hide the placeholder when there are options selected. */\n\thidePlaceholderWhenSelected?: boolean;\n\tdisabled?: boolean;\n\t/** Group the options base on provided key. */\n\tgroupBy?: string;\n\tclassName?: string;\n\tbadgeClassName?: string;\n\t/**\n\t * First item selected is a default behavior by cmdk. That is why the default is true.\n\t * This is a workaround solution by add a dummy item.\n\t *\n\t * @reference: https://github.com/pacocoursey/cmdk/issues/171\n\t */\n\tselectFirstItem?: boolean;\n\t/** Allow user to create option when there is no option matched. */\n\tcreatable?: boolean;\n\n\t/** The `onCreate` function will be called when user create a new option. */\n\tonCreate?: (value: string) => void;\n\t/** Props of `Command` */\n\tcommandProps?: React.ComponentPropsWithoutRef<typeof Command>;\n\t/** Props of `CommandInput` */\n\tinputProps?: Omit<\n\t\tReact.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>,\n\t\t\"value\" | \"placeholder\" | \"disabled\"\n\t>;\n\t/** hide the clear all button. */\n\thideClearAllButton?: boolean;\n}\n\nexport interface MultiSelectRef {\n\tselectedValue: Option[];\n\tinput: HTMLInputElement;\n\tfocus: () => void;\n\treset: () => void;\n}\n\nexport function useDebounce<T>(value: T, delay?: number): T {\n\tconst [debouncedValue, setDebouncedValue] = React.useState<T>(value);\n\n\tuseEffect(() => {\n\t\tconst timer = setTimeout(() => setDebouncedValue(value), delay || 500);\n\n\t\treturn () => {\n\t\t\tclearTimeout(timer);\n\t\t};\n\t}, [value, delay]);\n\n\treturn debouncedValue;\n}\n\nfunction transToGroupOption(options: Option[], groupBy?: string) {\n\tif (options.length === 0) {\n\t\treturn {};\n\t}\n\tif (!groupBy) {\n\t\treturn {\n\t\t\t\"\": options,\n\t\t};\n\t}\n\n\tconst groupOption: GroupOption = {};\n\tfor (const option of options) {\n\t\tconst key = (option[groupBy] as string) || \"\";\n\t\tif (!groupOption[key]) {\n\t\t\tgroupOption[key] = [];\n\t\t}\n\t\tgroupOption[key].push(option);\n\t}\n\treturn groupOption;\n}\n\nfunction removePickedOption(groupOption: GroupOption, picked: Option[]) {\n\tconst cloneOption = JSON.parse(JSON.stringify(groupOption)) as GroupOption;\n\n\tfor (const [key, value] of Object.entries(cloneOption)) {\n\t\tcloneOption[key] = value.filter(\n\t\t\t(val) => !picked.find((p) => p.value === val.value),\n\t\t);\n\t}\n\treturn cloneOption;\n}\n\nfunction isOptionsExist(groupOption: GroupOption, targetOption: Option[]) {\n\tfor (const [, value] of Object.entries(groupOption)) {\n\t\tif (\n\t\t\tvalue.some((option) => targetOption.find((p) => p.value === option.value))\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * The `CommandEmpty` of shadcn/ui will cause the cmdk empty not rendering correctly.\n * So we create one and copy the `Empty` implementation from `cmdk`.\n *\n * @reference: https://github.com/hsuanyi-chou/shadcn-ui-expansions/issues/34#issuecomment-1949561607\n **/\nconst CommandEmpty = forwardRef<\n\tHTMLDivElement,\n\tReact.ComponentProps<typeof CommandPrimitive.Empty>\n>(({ className, ...props }, forwardedRef) => {\n\tconst render = useCommandState((state) => state.filtered.count === 0);\n\n\tif (!render) return null;\n\n\treturn (\n\t\t<div\n\t\t\tref={forwardedRef}\n\t\t\tclassName={cn(\"py-6 text-center text-sm\", className)}\n\t\t\tcmdk-empty=\"\"\n\t\t\trole=\"presentation\"\n\t\t\t{...props}\n\t\t/>\n\t);\n});\n\nCommandEmpty.displayName = \"CommandEmpty\";\n\nconst MultiSelect = React.forwardRef<MultiSelectRef, MultiSelectProps>(\n\t(\n\t\t{\n\t\t\tvalue,\n\t\t\tonChange,\n\t\t\tplaceholder,\n\t\t\tdefaultOptions: arrayDefaultOptions = [],\n\t\t\toptions: arrayOptions,\n\t\t\tdelay,\n\t\t\tonSearch,\n\t\t\tonSearchSync,\n\t\t\tloadingIndicator,\n\t\t\temptyIndicator,\n\t\t\tmaxSelected = Number.MAX_SAFE_INTEGER,\n\t\t\tonMaxSelected,\n\t\t\thidePlaceholderWhenSelected,\n\t\t\tdisabled,\n\t\t\tgroupBy,\n\t\t\tclassName,\n\t\t\tbadgeClassName,\n\t\t\tselectFirstItem = true,\n\t\t\tcreatable = false,\n\t\t\tonCreate,\n\t\t\ttriggerSearchOnFocus = false,\n\t\t\tcommandProps,\n\t\t\tinputProps,\n\t\t\thideClearAllButton = false,\n\t\t}: MultiSelectProps,\n\t\tref: React.Ref<MultiSelectRef>,\n\t) => {\n\t\tconst inputRef = React.useRef<HTMLInputElement>(null);\n\t\tconst [open, setOpen] = React.useState(false);\n\t\tconst [onScrollbar, setOnScrollbar] = React.useState(false);\n\t\tconst [isLoading, setIsLoading] = React.useState(false);\n\t\tconst dropdownRef = React.useRef<HTMLDivElement>(null); // Added this\n\n\t\tconst [selected, setSelected] = React.useState<Option[]>(value || []);\n\t\tconst [options, setOptions] = React.useState<GroupOption>(\n\t\t\ttransToGroupOption(arrayDefaultOptions, groupBy),\n\t\t);\n\t\tconst [inputValue, setInputValue] = React.useState(\"\");\n\t\tconst debouncedSearchTerm = useDebounce(inputValue, delay || 500);\n\n\t\tReact.useImperativeHandle(\n\t\t\tref,\n\t\t\t() => ({\n\t\t\t\tselectedValue: [...selected],\n\t\t\t\tinput: inputRef.current as HTMLInputElement,\n\t\t\t\tfocus: () => inputRef?.current?.focus(),\n\t\t\t\treset: () => setSelected([]),\n\t\t\t}),\n\t\t\t[selected],\n\t\t);\n\n\t\tconst handleClickOutside = (event: MouseEvent | TouchEvent) => {\n\t\t\tif (\n\t\t\t\tdropdownRef.current &&\n\t\t\t\t!dropdownRef.current.contains(event.target as Node) &&\n\t\t\t\tinputRef.current &&\n\t\t\t\t!inputRef.current.contains(event.target as Node)\n\t\t\t) {\n\t\t\t\tsetOpen(false);\n\t\t\t\tinputRef.current.blur();\n\t\t\t}\n\t\t};\n\n\t\tconst handleUnselect = React.useCallback(\n\t\t\t(option: Option) => {\n\t\t\t\tconst newOptions = selected.filter((s) => s.value !== option.value);\n\t\t\t\tsetSelected(newOptions);\n\t\t\t\tonChange?.(newOptions);\n\t\t\t},\n\t\t\t[onChange, selected],\n\t\t);\n\n\t\tconst handleKeyDown = React.useCallback(\n\t\t\t(e: React.KeyboardEvent<HTMLDivElement>) => {\n\t\t\t\tconst input = inputRef.current;\n\t\t\t\tif (input) {\n\t\t\t\t\tif (e.key === \"Delete\" || e.key === \"Backspace\") {\n\t\t\t\t\t\tif (input.value === \"\" && selected.length > 0) {\n\t\t\t\t\t\t\tconst lastSelectOption = selected[selected.length - 1];\n\t\t\t\t\t\t\t// If last item is fixed, we should not remove it.\n\t\t\t\t\t\t\tif (!lastSelectOption.fixed) {\n\t\t\t\t\t\t\t\thandleUnselect(selected[selected.length - 1]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// This is not a default behavior of the <input /> field\n\t\t\t\t\tif (e.key === \"Escape\") {\n\t\t\t\t\t\tinput.blur();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t[handleUnselect, selected],\n\t\t);\n\n\t\tuseEffect(() => {\n\t\t\tif (open) {\n\t\t\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\t\t\tdocument.addEventListener(\"touchend\", handleClickOutside);\n\t\t\t} else {\n\t\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t\t\tdocument.removeEventListener(\"touchend\", handleClickOutside);\n\t\t\t}\n\n\t\t\treturn () => {\n\t\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t\t\tdocument.removeEventListener(\"touchend\", handleClickOutside);\n\t\t\t};\n\t\t}, [open]);\n\n\t\tuseEffect(() => {\n\t\t\tif (value) {\n\t\t\t\tsetSelected(value);\n\t\t\t}\n\t\t}, [value]);\n\n\t\tuseEffect(() => {\n\t\t\t/** If `onSearch` is provided, do not trigger options updated. */\n\t\t\tif (!arrayOptions || onSearch) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst newOption = transToGroupOption(arrayOptions || [], groupBy);\n\t\t\tif (JSON.stringify(newOption) !== JSON.stringify(options)) {\n\t\t\t\tsetOptions(newOption);\n\t\t\t}\n\t\t}, [arrayDefaultOptions, arrayOptions, groupBy, onSearch, options]);\n\n\t\tuseEffect(() => {\n\t\t\t/** sync search */\n\n\t\t\tconst doSearchSync = () => {\n\t\t\t\tconst res = onSearchSync?.(debouncedSearchTerm);\n\t\t\t\tsetOptions(transToGroupOption(res || [], groupBy));\n\t\t\t};\n\n\t\t\tconst exec = async () => {\n\t\t\t\tif (!onSearchSync || !open) return;\n\n\t\t\t\tif (triggerSearchOnFocus) {\n\t\t\t\t\tdoSearchSync();\n\t\t\t\t}\n\n\t\t\t\tif (debouncedSearchTerm) {\n\t\t\t\t\tdoSearchSync();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvoid exec();\n\t\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\t}, [debouncedSearchTerm, groupBy, open, triggerSearchOnFocus]);\n\n\t\tuseEffect(() => {\n\t\t\t/** async search */\n\n\t\t\tconst doSearch = async () => {\n\t\t\t\tsetIsLoading(true);\n\t\t\t\tconst res = await onSearch?.(debouncedSearchTerm);\n\t\t\t\tsetOptions(transToGroupOption(res || [], groupBy));\n\t\t\t\tsetIsLoading(false);\n\t\t\t};\n\n\t\t\tconst exec = async () => {\n\t\t\t\tif (!onSearch || !open) return;\n\n\t\t\t\tif (triggerSearchOnFocus) {\n\t\t\t\t\tawait doSearch();\n\t\t\t\t}\n\n\t\t\t\tif (debouncedSearchTerm) {\n\t\t\t\t\tawait doSearch();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvoid exec();\n\t\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\t}, [debouncedSearchTerm, groupBy, open, triggerSearchOnFocus]);\n\n\t\tconst CreatableItem = () => {\n\t\t\tif (!creatable) return undefined;\n\t\t\tif (\n\t\t\t\tisOptionsExist(options, [{ value: inputValue, label: inputValue }]) ||\n\t\t\t\tselected.find((s) => s.value === inputValue)\n\t\t\t) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst Item = (\n\t\t\t\t<CommandItem\n\t\t\t\t\tvalue={inputValue}\n\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\tonMouseDown={(e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}}\n\t\t\t\t\tonSelect={(value: string) => {\n\t\t\t\t\t\tif (selected.length >= maxSelected) {\n\t\t\t\t\t\t\tonMaxSelected?.(selected.length);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetInputValue(\"\");\n\t\t\t\t\t\tif (onCreate) {\n\t\t\t\t\t\t\tonCreate?.(value);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst newOptions = [...selected, { value, label: value }];\n\t\t\t\t\t\tsetSelected(newOptions);\n\t\t\t\t\t\tonChange?.(newOptions);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Create \"${inputValue}\"`}\n\t\t\t\t</CommandItem>\n\t\t\t);\n\n\t\t\t// For normal creatable\n\t\t\tif (!onSearch && inputValue.length > 0) {\n\t\t\t\treturn Item;\n\t\t\t}\n\n\t\t\t// For async search creatable. avoid showing creatable item before loading at first.\n\t\t\tif (onSearch && debouncedSearchTerm.length > 0 && !isLoading) {\n\t\t\t\treturn Item;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t};\n\n\t\tconst EmptyItem = React.useCallback(() => {\n\t\t\tif (!emptyIndicator) return undefined;\n\n\t\t\t// For async search that showing emptyIndicator\n\t\t\tif (onSearch && !creatable && Object.keys(options).length === 0) {\n\t\t\t\treturn (\n\t\t\t\t\t<CommandItem value=\"-\" disabled>\n\t\t\t\t\t\t{emptyIndicator}\n\t\t\t\t\t</CommandItem>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn <CommandEmpty>{emptyIndicator}</CommandEmpty>;\n\t\t}, [creatable, emptyIndicator, onSearch, options]);\n\n\t\tconst selectables = React.useMemo<GroupOption>(\n\t\t\t() => removePickedOption(options, selected),\n\t\t\t[options, selected],\n\t\t);\n\n\t\t/** Avoid Creatable Selector freezing or lagging when paste a long string. */\n\t\tconst commandFilter = React.useCallback(() => {\n\t\t\tif (commandProps?.filter) {\n\t\t\t\treturn commandProps.filter;\n\t\t\t}\n\n\t\t\tif (creatable) {\n\t\t\t\treturn (value: string, search: string) => {\n\t\t\t\t\treturn value.toLowerCase().includes(search.toLowerCase()) ? 1 : -1;\n\t\t\t\t};\n\t\t\t}\n\t\t\t// Using default filter in `cmdk`. We don't have to provide it.\n\t\t\treturn undefined;\n\t\t}, [creatable, commandProps?.filter]);\n\n\t\treturn (\n\t\t\t<Command\n\t\t\t\tref={dropdownRef}\n\t\t\t\t{...commandProps}\n\t\t\t\tonKeyDown={(e) => {\n\t\t\t\t\thandleKeyDown(e);\n\t\t\t\t\tcommandProps?.onKeyDown?.(e);\n\t\t\t\t}}\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"h-auto overflow-visible bg-transparent\",\n\t\t\t\t\tcommandProps?.className,\n\t\t\t\t)}\n\t\t\t\tshouldFilter={\n\t\t\t\t\tcommandProps?.shouldFilter !== undefined\n\t\t\t\t\t\t? commandProps.shouldFilter\n\t\t\t\t\t\t: !onSearch\n\t\t\t\t} // When onSearch is provided, we don't want to filter the options. You can still override it.\n\t\t\t\tfilter={commandFilter()}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\"min-h-10 rounded-md border border-input text-base ring-offset-background focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2 md:text-sm\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"px-3 py-2\": selected.length !== 0,\n\t\t\t\t\t\t\t\"cursor-text\": !disabled && selected.length !== 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tclassName,\n\t\t\t\t\t)}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tif (disabled) return;\n\t\t\t\t\t\tinputRef?.current?.focus();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"relative flex flex-wrap gap-1\">\n\t\t\t\t\t\t{selected.map((option) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Badge\n\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\"data-[disabled]:bg-muted-foreground data-[disabled]:text-muted data-[disabled]:hover:bg-muted-foreground\",\n\t\t\t\t\t\t\t\t\t\t\"data-[fixed]:bg-muted-foreground data-[fixed]:text-muted data-[fixed]:hover:bg-muted-foreground\",\n\t\t\t\t\t\t\t\t\t\tbadgeClassName,\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\tdata-fixed={option.fixed}\n\t\t\t\t\t\t\t\t\tdata-disabled={disabled || undefined}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{option.label}\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\t\"ml-1 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n\t\t\t\t\t\t\t\t\t\t\t(disabled || option.fixed) && \"hidden\",\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\tonKeyDown={(e) => {\n\t\t\t\t\t\t\t\t\t\t\tif (e.key === \"Enter\") {\n\t\t\t\t\t\t\t\t\t\t\t\thandleUnselect(option);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonMouseDown={(e) => {\n\t\t\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleUnselect(option)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<X className=\"w-3 h-3 text-muted-foreground hover:text-foreground\" />\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t{/* Avoid having the \"Search\" Icon */}\n\t\t\t\t\t\t<CommandPrimitive.Input\n\t\t\t\t\t\t\t{...inputProps}\n\t\t\t\t\t\t\tref={inputRef}\n\t\t\t\t\t\t\tvalue={inputValue}\n\t\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\t\tonValueChange={(value) => {\n\t\t\t\t\t\t\t\tsetInputValue(value);\n\t\t\t\t\t\t\t\tinputProps?.onValueChange?.(value);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonBlur={(event) => {\n\t\t\t\t\t\t\t\tif (!onScrollbar) {\n\t\t\t\t\t\t\t\t\tsetOpen(false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tinputProps?.onBlur?.(event);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonFocus={(event) => {\n\t\t\t\t\t\t\t\tsetOpen(true);\n\t\t\t\t\t\t\t\tinputProps?.onFocus?.(event);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t\t\thidePlaceholderWhenSelected && selected.length !== 0\n\t\t\t\t\t\t\t\t\t? \"\"\n\t\t\t\t\t\t\t\t\t: placeholder\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\"flex-1 bg-transparent outline-none placeholder:text-muted-foreground\",\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"w-full\": hidePlaceholderWhenSelected,\n\t\t\t\t\t\t\t\t\t\"px-3 py-2\": selected.length === 0,\n\t\t\t\t\t\t\t\t\t\"ml-1\": selected.length !== 0,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tinputProps?.className,\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetSelected(selected.filter((s) => s.fixed));\n\t\t\t\t\t\t\t\tonChange?.(selected.filter((s) => s.fixed));\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\"absolute right-0 h-6 w-6 p-0\",\n\t\t\t\t\t\t\t\t(hideClearAllButton ||\n\t\t\t\t\t\t\t\t\tdisabled ||\n\t\t\t\t\t\t\t\t\tselected.length < 1 ||\n\t\t\t\t\t\t\t\t\tselected.filter((s) => s.fixed).length === selected.length) &&\n\t\t\t\t\t\t\t\t\t\"hidden\",\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<X />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"relative\">\n\t\t\t\t\t{open && (\n\t\t\t\t\t\t<CommandList\n\t\t\t\t\t\t\tclassName=\"top-1 z-10 absolute bg-popover shadow-md border rounded-md outline-none w-full text-popover-foreground animate-in\"\n\t\t\t\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\t\t\t\tsetOnScrollbar(false);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\t\t\t\tsetOnScrollbar(true);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonMouseUp={() => {\n\t\t\t\t\t\t\t\tinputRef?.current?.focus();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{isLoading ? (\n\t\t\t\t\t\t\t\t<>{loadingIndicator}</>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t{EmptyItem()}\n\t\t\t\t\t\t\t\t\t{CreatableItem()}\n\t\t\t\t\t\t\t\t\t{!selectFirstItem && (\n\t\t\t\t\t\t\t\t\t\t<CommandItem value=\"-\" className=\"hidden\" />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{Object.entries(selectables).map(([key, dropdowns]) => (\n\t\t\t\t\t\t\t\t\t\t<CommandGroup\n\t\t\t\t\t\t\t\t\t\t\tkey={key}\n\t\t\t\t\t\t\t\t\t\t\theading={key}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"h-full overflow-auto\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t{dropdowns.map((option) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<CommandItem\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={option.label}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={option.disable}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonSelect={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (selected.length >= maxSelected) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonMaxSelected?.(selected.length);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetInputValue(\"\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst newOptions = [...selected, option];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSelected(newOptions);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange?.(newOptions);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"cursor-pointer\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toption.disable &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"cursor-default text-muted-foreground\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{option.label}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</CommandItem>\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t</CommandGroup>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</CommandList>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</Command>\n\t\t);\n\t},\n);\n\nMultiSelect.displayName = \"MultiSelect\";\nexport default MultiSelect;\n",
      "type": "registry:ui"
    }
  ]
}