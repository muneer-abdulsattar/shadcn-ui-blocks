{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "avatar-07",
  "type": "registry:component",
  "title": "Avatar Color",
  "description": "Different colors of avatar component",
  "dependencies": [
    "@radix-ui/react-avatar",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "avatar"
  ],
  "files": [
    {
      "path": "src/components/customized/avatar/avatar-07.tsx",
      "content": "import { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\n\nexport default function AvatarColorDemo() {\n  return (\n    <div className=\"grid gap-4\">\n      <div className=\"flex items-center gap-4\">\n        <Avatar>\n          <AvatarFallback className=\"bg-slate-500 text-white\">\n            CN\n          </AvatarFallback>\n        </Avatar>\n        <Avatar>\n          <AvatarFallback className=\"bg-indigo-500 text-white\">\n            CN\n          </AvatarFallback>\n        </Avatar>\n        <Avatar>\n          <AvatarFallback className=\"bg-rose-500 text-white\">CN</AvatarFallback>\n        </Avatar>\n        <Avatar>\n          <AvatarFallback className=\"bg-cyan-500 text-white\">CN</AvatarFallback>\n        </Avatar>\n        <Avatar>\n          <AvatarFallback className=\"bg-green-500 text-white\">\n            CN\n          </AvatarFallback>\n        </Avatar>\n      </div>\n      <div className=\"flex items-center gap-4\">\n        <Avatar>\n          <AvatarFallback className=\"bg-slate-500/25 text-slate-500\">\n            CN\n          </AvatarFallback>\n        </Avatar>\n        <Avatar>\n          <AvatarFallback className=\"bg-indigo-500/25 text-indigo-500\">\n            CN\n          </AvatarFallback>\n        </Avatar>\n        <Avatar>\n          <AvatarFallback className=\"bg-rose-500/25 text-rose-500\">\n            CN\n          </AvatarFallback>\n        </Avatar>\n        <Avatar>\n          <AvatarFallback className=\"bg-cyan-500/25 text-cyan-500\">\n            CN\n          </AvatarFallback>\n        </Avatar>\n        <Avatar>\n          <AvatarFallback className=\"bg-green-500/25 text-green-500\">\n            CN\n          </AvatarFallback>\n        </Avatar>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ui/avatar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { config } from \"@/config\";\nimport { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n\treturn twMerge(clsx(inputs));\n}\n\nexport function capitalize(str: string) {\n\treturn str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype GroupBy<T, K extends keyof T> = Record<string, T[]>;\n\nexport function groupBy<T, K extends keyof T>(\n\tarray: T[],\n\tkey: K,\n): GroupBy<T, K> {\n\treturn array.reduce(\n\t\t(acc, item) => {\n\t\t\tconst keyValue = String(item[key]);\n\t\t\tif (!acc[keyValue]) {\n\t\t\t\tacc[keyValue] = [];\n\t\t\t}\n\t\t\tacc[keyValue].push(item);\n\t\t\treturn acc;\n\t\t},\n\t\t{} as GroupBy<T, K>,\n\t);\n}\n\nexport function absoluteUrl(path: string) {\n\treturn process.env.NODE_ENV === \"development\"\n\t\t? `http://localhost:3000${path}`\n\t\t: `https://${config.appUrl}${path}`;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/config.ts",
      "content": "export const config = {\n  appUrl:\n    process.env.NODE_ENV === \"production\"\n      ? process.env.VERCEL_PROJECT_PRODUCTION_URL ??\n        process.env.NEXT_PUBLIC_APP_URL!\n      : \"localhost:3000\",\n  social: {\n    github: \"https://github.com/akash3444/shadcn-ui-blocks\",\n    twitter: \"https://twitter.com/akash_3444\",\n  },\n};\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}