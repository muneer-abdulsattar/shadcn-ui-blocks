{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "number-input",
  "type": "registry:ui",
  "title": "Number Input",
  "dependencies": [
    "react-number-format",
    "lucide-react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "lucide-react",
    "react-number-format"
  ],
  "registryDependencies": [
    "input",
    "button"
  ],
  "files": [
    {
      "path": "src/components/extensions/number-input.tsx",
      "content": "\"use client\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport { ChevronDown, ChevronUp } from \"lucide-react\";\nimport { forwardRef, useCallback, useEffect, useState } from \"react\";\nimport { NumericFormat, NumericFormatProps } from \"react-number-format\";\n\nexport interface NumberInputProps\n\textends Omit<NumericFormatProps, \"value\" | \"onValueChange\"> {\n\tstepper?: number;\n\tenableArrowButtons?: boolean;\n\tthousandSeparator?: string;\n\tplaceholder?: string;\n\tdefaultValue?: number;\n\tmin?: number;\n\tmax?: number;\n\tvalue?: number; // Controlled value\n\tsuffix?: string;\n\tprefix?: string;\n\tonValueChange?: (value: number | undefined) => void;\n\tfixedDecimalScale?: boolean;\n\tdecimalScale?: number;\n}\n\nconst NumberInput = forwardRef<HTMLInputElement, NumberInputProps>(\n\t(\n\t\t{\n\t\t\tenableArrowButtons = false,\n\t\t\tstepper,\n\t\t\tthousandSeparator,\n\t\t\tplaceholder,\n\t\t\tdefaultValue,\n\t\t\tmin = Number.NEGATIVE_INFINITY,\n\t\t\tmax = Number.POSITIVE_INFINITY,\n\t\t\tonValueChange,\n\t\t\tfixedDecimalScale = false,\n\t\t\tdecimalScale = 0,\n\t\t\tsuffix,\n\t\t\tprefix,\n\t\t\tvalue: controlledValue,\n\t\t\t...props\n\t\t},\n\t\tref,\n\t) => {\n\t\tconst [value, setValue] = useState<number | undefined>(\n\t\t\tcontrolledValue ?? defaultValue,\n\t\t);\n\n\t\tconst handleIncrement = useCallback(() => {\n\t\t\tsetValue((prev) =>\n\t\t\t\tprev === undefined\n\t\t\t\t\t? (stepper ?? 1)\n\t\t\t\t\t: Math.min(prev + (stepper ?? 1), max),\n\t\t\t);\n\t\t}, [stepper, max]);\n\n\t\tconst handleDecrement = useCallback(() => {\n\t\t\tsetValue((prev) =>\n\t\t\t\tprev === undefined\n\t\t\t\t\t? -(stepper ?? 1)\n\t\t\t\t\t: Math.max(prev - (stepper ?? 1), min),\n\t\t\t);\n\t\t}, [stepper, min]);\n\n\t\tuseEffect(() => {\n\t\t\tconst handleKeyDown = (e: KeyboardEvent) => {\n\t\t\t\tif (\n\t\t\t\t\tdocument.activeElement ===\n\t\t\t\t\t(ref as React.RefObject<HTMLInputElement>)?.current\n\t\t\t\t) {\n\t\t\t\t\tif (e.key === \"ArrowUp\") {\n\t\t\t\t\t\thandleIncrement();\n\t\t\t\t\t} else if (e.key === \"ArrowDown\") {\n\t\t\t\t\t\thandleDecrement();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\twindow.addEventListener(\"keydown\", handleKeyDown);\n\n\t\t\treturn () => {\n\t\t\t\twindow.removeEventListener(\"keydown\", handleKeyDown);\n\t\t\t};\n\t\t}, [handleIncrement, handleDecrement, ref]);\n\n\t\tuseEffect(() => {\n\t\t\tif (controlledValue !== undefined) {\n\t\t\t\tsetValue(controlledValue);\n\t\t\t}\n\t\t}, [controlledValue]);\n\n\t\tconst handleChange = (values: {\n\t\t\tvalue: string;\n\t\t\tfloatValue: number | undefined;\n\t\t}) => {\n\t\t\tconst newValue =\n\t\t\t\tvalues.floatValue === undefined ? undefined : values.floatValue;\n\t\t\tsetValue(newValue);\n\t\t\tif (onValueChange) {\n\t\t\t\tonValueChange(newValue);\n\t\t\t}\n\t\t};\n\n\t\tconst handleBlur = () => {\n\t\t\tif (value !== undefined) {\n\t\t\t\tif (value < min) {\n\t\t\t\t\tsetValue(min);\n\t\t\t\t\tconst inputRef = (ref as React.RefObject<HTMLInputElement>)?.current;\n\t\t\t\t\tif (inputRef) {\n\t\t\t\t\t\tinputRef.value = String(min);\n\t\t\t\t\t}\n\t\t\t\t} else if (value > max) {\n\t\t\t\t\tsetValue(max);\n\t\t\t\t\tconst inputRef = (ref as React.RefObject<HTMLInputElement>)?.current;\n\t\t\t\t\tif (inputRef) {\n\t\t\t\t\t\tinputRef.value = String(max);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn (\n\t\t\t<div className=\"flex items-center\">\n\t\t\t\t<NumericFormat\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tonValueChange={handleChange}\n\t\t\t\t\tthousandSeparator={thousandSeparator}\n\t\t\t\t\tdecimalScale={decimalScale}\n\t\t\t\t\tfixedDecimalScale={fixedDecimalScale}\n\t\t\t\t\tallowNegative={min < 0}\n\t\t\t\t\tvalueIsNumericString\n\t\t\t\t\tonBlur={handleBlur}\n\t\t\t\t\tmax={max}\n\t\t\t\t\tmin={min}\n\t\t\t\t\tsuffix={suffix}\n\t\t\t\t\tprefix={prefix}\n\t\t\t\t\tcustomInput={Input}\n\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\"relative [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none [appearance:textfield]\",\n\t\t\t\t\t\tenableArrowButtons && \"rounded-r-none\",\n\t\t\t\t\t)}\n\t\t\t\t\tgetInputRef={ref}\n\t\t\t\t\t{...props}\n\t\t\t\t/>\n\t\t\t\t{enableArrowButtons && (\n\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\taria-label=\"Increase value\"\n\t\t\t\t\t\t\tclassName=\"focus-visible:relative px-2 border-input border-b-[0.5px] border-l-0 rounded-l-none rounded-br-none h-4\"\n\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\tonClick={handleIncrement}\n\t\t\t\t\t\t\tdisabled={value === max}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ChevronUp size={15} />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\taria-label=\"Decrease value\"\n\t\t\t\t\t\t\tclassName=\"focus-visible:relative px-2 border-input border-t-[0.5px] border-l-0 rounded-l-none rounded-tr-none h-4\"\n\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\tonClick={handleDecrement}\n\t\t\t\t\t\t\tdisabled={value === min}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ChevronDown size={15} />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t},\n);\n\nNumberInput.displayName = \"NumberInput\";\nexport default NumberInput;\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { config } from \"@/config\";\nimport { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n\treturn twMerge(clsx(inputs));\n}\n\nexport function capitalize(str: string) {\n\treturn str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype GroupBy<T, K extends keyof T> = Record<string, T[]>;\n\nexport function groupBy<T, K extends keyof T>(\n\tarray: T[],\n\tkey: K,\n): GroupBy<T, K> {\n\treturn array.reduce(\n\t\t(acc, item) => {\n\t\t\tconst keyValue = String(item[key]);\n\t\t\tif (!acc[keyValue]) {\n\t\t\t\tacc[keyValue] = [];\n\t\t\t}\n\t\t\tacc[keyValue].push(item);\n\t\t\treturn acc;\n\t\t},\n\t\t{} as GroupBy<T, K>,\n\t);\n}\n\nexport function absoluteUrl(path: string) {\n\treturn process.env.NODE_ENV === \"development\"\n\t\t? `http://localhost:3000${path}`\n\t\t: `https://${config.appUrl}${path}`;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/config.ts",
      "content": "export const config = {\n  appUrl:\n    process.env.NODE_ENV === \"production\"\n      ? process.env.VERCEL_PROJECT_PRODUCTION_URL ??\n        process.env.NEXT_PUBLIC_APP_URL!\n      : \"localhost:3000\",\n  social: {\n    github: \"https://github.com/akash3444/shadcn-ui-blocks\",\n    twitter: \"https://twitter.com/akash_3444\",\n  },\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "src/components/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}