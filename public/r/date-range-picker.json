{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-range-picker",
  "type": "registry:ui",
  "title": "Profile Image Uploader",
  "files": [
    {
      "path": "src/components/extensions/date-range-picker/index.tsx",
      "content": "/* eslint-disable max-lines */\n\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n\tSelect,\n\tSelectContent,\n\tSelectItem,\n\tSelectTrigger,\n\tSelectValue,\n} from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { cn } from \"@/lib/utils\";\nimport {\n\tCheckIcon,\n\tChevronDownIcon,\n\tChevronUpIcon,\n} from \"@radix-ui/react-icons\";\nimport { type FC, type JSX, useEffect, useRef, useState } from \"react\";\nimport { DateInput } from \"./date-input\";\n\nexport interface DateRangePickerProps {\n\t/** Click handler for applying the updates from DateRangePicker. */\n\tonUpdate?: (values: { range: DateRange; rangeCompare?: DateRange }) => void;\n\t/** Initial value for start date */\n\tinitialDateFrom?: Date | string;\n\t/** Initial value for end date */\n\tinitialDateTo?: Date | string;\n\t/** Initial value for start date for compare */\n\tinitialCompareFrom?: Date | string;\n\t/** Initial value for end date for compare */\n\tinitialCompareTo?: Date | string;\n\t/** Alignment of popover */\n\talign?: \"start\" | \"center\" | \"end\";\n\t/** Option for locale */\n\tlocale?: string;\n\t/** Option for showing compare feature */\n\tshowCompare?: boolean;\n}\n\nconst formatDate = (date: Date, locale = \"en-us\"): string => {\n\treturn date.toLocaleDateString(locale, {\n\t\tmonth: \"short\",\n\t\tday: \"numeric\",\n\t\tyear: \"numeric\",\n\t});\n};\n\nconst getDateAdjustedForTimezone = (dateInput: Date | string): Date => {\n\tif (typeof dateInput === \"string\") {\n\t\t// Split the date string to get year, month, and day parts\n\t\tconst parts = dateInput.split(\"-\").map((part) => Number.parseInt(part, 10));\n\t\t// Create a new Date object using the local timezone\n\t\t// Note: Month is 0-indexed, so subtract 1 from the month part\n\t\tconst date = new Date(parts[0], parts[1] - 1, parts[2]);\n\t\treturn date;\n\t}\n\n\t// If dateInput is already a Date object, return it directly\n\treturn dateInput;\n};\n\ninterface DateRange {\n\tfrom: Date;\n\tto: Date | undefined;\n}\n\ninterface Preset {\n\tname: string;\n\tlabel: string;\n}\n\n// Define presets\nconst PRESETS: Preset[] = [\n\t{ name: \"today\", label: \"Today\" },\n\t{ name: \"yesterday\", label: \"Yesterday\" },\n\t{ name: \"last7\", label: \"Last 7 days\" },\n\t{ name: \"last14\", label: \"Last 14 days\" },\n\t{ name: \"last30\", label: \"Last 30 days\" },\n\t{ name: \"thisWeek\", label: \"This Week\" },\n\t{ name: \"lastWeek\", label: \"Last Week\" },\n\t{ name: \"thisMonth\", label: \"This Month\" },\n\t{ name: \"lastMonth\", label: \"Last Month\" },\n\t{ name: \"thisYear\", label: \"This Year\" },\n\t{ name: \"lastYear\", label: \"Last Year\" },\n];\n\n/** The DateRangePicker component allows a user to select a range of dates */\nexport const DateRangePicker: FC<DateRangePickerProps> = ({\n\tinitialDateFrom = new Date(new Date().setHours(0, 0, 0, 0)),\n\tinitialDateTo,\n\tinitialCompareFrom,\n\tinitialCompareTo,\n\n\tonUpdate,\n\talign = \"end\",\n\tlocale = \"en-US\",\n\tshowCompare = false,\n}): JSX.Element => {\n\tconst [isOpen, setIsOpen] = useState(false);\n\n\tconst [range, setRange] = useState<DateRange>({\n\t\tfrom: getDateAdjustedForTimezone(initialDateFrom),\n\t\tto: initialDateTo\n\t\t\t? getDateAdjustedForTimezone(initialDateTo)\n\t\t\t: getDateAdjustedForTimezone(initialDateFrom),\n\t});\n\tconst [rangeCompare, setRangeCompare] = useState<DateRange | undefined>(\n\t\tinitialCompareFrom\n\t\t\t? {\n\t\t\t\t\tfrom: new Date(new Date(initialCompareFrom).setHours(0, 0, 0, 0)),\n\t\t\t\t\tto: initialCompareTo\n\t\t\t\t\t\t? new Date(new Date(initialCompareTo).setHours(0, 0, 0, 0))\n\t\t\t\t\t\t: new Date(new Date(initialCompareFrom).setHours(0, 0, 0, 0)),\n\t\t\t\t}\n\t\t\t: undefined,\n\t);\n\n\t// Refs to store the values of range and rangeCompare when the date picker is opened\n\tconst openedRangeRef = useRef<DateRange | undefined>(undefined);\n\tconst openedRangeCompareRef = useRef<DateRange | undefined>(undefined);\n\n\tconst [selectedPreset, setSelectedPreset] = useState<string | undefined>(\n\t\tundefined,\n\t);\n\n\tconst [isSmallScreen, setIsSmallScreen] = useState(\n\t\ttypeof window !== \"undefined\" ? window.innerWidth < 960 : false,\n\t);\n\n\tuseEffect(() => {\n\t\tconst handleResize = (): void => {\n\t\t\tsetIsSmallScreen(window.innerWidth < 960);\n\t\t};\n\n\t\twindow.addEventListener(\"resize\", handleResize);\n\n\t\t// Clean up event listener on unmount\n\t\treturn () => {\n\t\t\twindow.removeEventListener(\"resize\", handleResize);\n\t\t};\n\t}, []);\n\n\tconst getPresetRange = (presetName: string): DateRange => {\n\t\tconst preset = PRESETS.find(({ name }) => name === presetName);\n\t\tif (!preset) throw new Error(`Unknown date range preset: ${presetName}`);\n\t\tconst from = new Date();\n\t\tconst to = new Date();\n\t\tconst first = from.getDate() - from.getDay();\n\n\t\tswitch (preset.name) {\n\t\t\tcase \"today\":\n\t\t\t\tfrom.setHours(0, 0, 0, 0);\n\t\t\t\tto.setHours(23, 59, 59, 999);\n\t\t\t\tbreak;\n\t\t\tcase \"yesterday\":\n\t\t\t\tfrom.setDate(from.getDate() - 1);\n\t\t\t\tfrom.setHours(0, 0, 0, 0);\n\t\t\t\tto.setDate(to.getDate() - 1);\n\t\t\t\tto.setHours(23, 59, 59, 999);\n\t\t\t\tbreak;\n\t\t\tcase \"last7\":\n\t\t\t\tfrom.setDate(from.getDate() - 6);\n\t\t\t\tfrom.setHours(0, 0, 0, 0);\n\t\t\t\tto.setHours(23, 59, 59, 999);\n\t\t\t\tbreak;\n\t\t\tcase \"last14\":\n\t\t\t\tfrom.setDate(from.getDate() - 13);\n\t\t\t\tfrom.setHours(0, 0, 0, 0);\n\t\t\t\tto.setHours(23, 59, 59, 999);\n\t\t\t\tbreak;\n\t\t\tcase \"last30\":\n\t\t\t\tfrom.setDate(from.getDate() - 29);\n\t\t\t\tfrom.setHours(0, 0, 0, 0);\n\t\t\t\tto.setHours(23, 59, 59, 999);\n\t\t\t\tbreak;\n\t\t\tcase \"thisWeek\":\n\t\t\t\tfrom.setDate(first);\n\t\t\t\tfrom.setHours(0, 0, 0, 0);\n\t\t\t\tto.setHours(23, 59, 59, 999);\n\t\t\t\tbreak;\n\t\t\tcase \"lastWeek\":\n\t\t\t\tfrom.setDate(from.getDate() - 7 - from.getDay());\n\t\t\t\tto.setDate(to.getDate() - to.getDay() - 1);\n\t\t\t\tfrom.setHours(0, 0, 0, 0);\n\t\t\t\tto.setHours(23, 59, 59, 999);\n\t\t\t\tbreak;\n\t\t\tcase \"thisMonth\":\n\t\t\t\tfrom.setDate(1);\n\t\t\t\tfrom.setHours(0, 0, 0, 0);\n\t\t\t\tto.setHours(23, 59, 59, 999);\n\t\t\t\tbreak;\n\t\t\tcase \"lastMonth\":\n\t\t\t\tfrom.setMonth(from.getMonth() - 1);\n\t\t\t\tfrom.setDate(1);\n\t\t\t\tfrom.setHours(0, 0, 0, 0);\n\t\t\t\tto.setDate(0);\n\t\t\t\tto.setHours(23, 59, 59, 999);\n\t\t\t\tbreak;\n\t\t\tcase \"thisYear\":\n\t\t\t\tfrom.setMonth(0);\n\t\t\t\tfrom.setDate(1);\n\t\t\t\tfrom.setHours(0, 0, 0, 0);\n\t\t\t\tto.setHours(23, 59, 59, 999);\n\t\t\t\tbreak;\n\t\t\tcase \"lastYear\":\n\t\t\t\tfrom.setFullYear(from.getFullYear() - 1);\n\t\t\t\tfrom.setMonth(0);\n\t\t\t\tfrom.setDate(1);\n\t\t\t\tfrom.setHours(0, 0, 0, 0);\n\t\t\t\tto.setFullYear(to.getFullYear() - 1);\n\t\t\t\tto.setMonth(11);\n\t\t\t\tto.setDate(31);\n\t\t\t\tto.setHours(23, 59, 59, 999);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn { from, to };\n\t};\n\n\tconst setPreset = (preset: string): void => {\n\t\tconst range = getPresetRange(preset);\n\t\tsetRange(range);\n\t\tif (rangeCompare) {\n\t\t\tconst rangeCompare = {\n\t\t\t\tfrom: new Date(\n\t\t\t\t\trange.from.getFullYear() - 1,\n\t\t\t\t\trange.from.getMonth(),\n\t\t\t\t\trange.from.getDate(),\n\t\t\t\t),\n\t\t\t\tto: range.to\n\t\t\t\t\t? new Date(\n\t\t\t\t\t\t\trange.to.getFullYear() - 1,\n\t\t\t\t\t\t\trange.to.getMonth(),\n\t\t\t\t\t\t\trange.to.getDate(),\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined,\n\t\t\t};\n\t\t\tsetRangeCompare(rangeCompare);\n\t\t}\n\t};\n\n\tconst checkPreset = (): void => {\n\t\tfor (const preset of PRESETS) {\n\t\t\tconst presetRange = getPresetRange(preset.name);\n\n\t\t\tconst normalizedRangeFrom = new Date(range.from);\n\t\t\tnormalizedRangeFrom.setHours(0, 0, 0, 0);\n\t\t\tconst normalizedPresetFrom = new Date(\n\t\t\t\tpresetRange.from.setHours(0, 0, 0, 0),\n\t\t\t);\n\n\t\t\tconst normalizedRangeTo = new Date(range.to ?? 0);\n\t\t\tnormalizedRangeTo.setHours(0, 0, 0, 0);\n\t\t\tconst normalizedPresetTo = new Date(\n\t\t\t\tpresetRange.to?.setHours(0, 0, 0, 0) ?? 0,\n\t\t\t);\n\n\t\t\tif (\n\t\t\t\tnormalizedRangeFrom.getTime() === normalizedPresetFrom.getTime() &&\n\t\t\t\tnormalizedRangeTo.getTime() === normalizedPresetTo.getTime()\n\t\t\t) {\n\t\t\t\tsetSelectedPreset(preset.name);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tsetSelectedPreset(undefined);\n\t};\n\n\tconst resetValues = (): void => {\n\t\tsetRange({\n\t\t\tfrom:\n\t\t\t\ttypeof initialDateFrom === \"string\"\n\t\t\t\t\t? getDateAdjustedForTimezone(initialDateFrom)\n\t\t\t\t\t: initialDateFrom,\n\t\t\tto: initialDateTo\n\t\t\t\t? typeof initialDateTo === \"string\"\n\t\t\t\t\t? getDateAdjustedForTimezone(initialDateTo)\n\t\t\t\t\t: initialDateTo\n\t\t\t\t: typeof initialDateFrom === \"string\"\n\t\t\t\t\t? getDateAdjustedForTimezone(initialDateFrom)\n\t\t\t\t\t: initialDateFrom,\n\t\t});\n\t\tsetRangeCompare(\n\t\t\tinitialCompareFrom\n\t\t\t\t? {\n\t\t\t\t\t\tfrom:\n\t\t\t\t\t\t\ttypeof initialCompareFrom === \"string\"\n\t\t\t\t\t\t\t\t? getDateAdjustedForTimezone(initialCompareFrom)\n\t\t\t\t\t\t\t\t: initialCompareFrom,\n\t\t\t\t\t\tto: initialCompareTo\n\t\t\t\t\t\t\t? typeof initialCompareTo === \"string\"\n\t\t\t\t\t\t\t\t? getDateAdjustedForTimezone(initialCompareTo)\n\t\t\t\t\t\t\t\t: initialCompareTo\n\t\t\t\t\t\t\t: typeof initialCompareFrom === \"string\"\n\t\t\t\t\t\t\t\t? getDateAdjustedForTimezone(initialCompareFrom)\n\t\t\t\t\t\t\t\t: initialCompareFrom,\n\t\t\t\t\t}\n\t\t\t\t: undefined,\n\t\t);\n\t};\n\n\tuseEffect(() => {\n\t\tcheckPreset();\n\t}, [range]);\n\n\tconst PresetButton = ({\n\t\tpreset,\n\t\tlabel,\n\t\tisSelected,\n\t}: {\n\t\tpreset: string;\n\t\tlabel: string;\n\t\tisSelected: boolean;\n\t}): JSX.Element => (\n\t\t<Button\n\t\t\tsize={\"sm\"}\n\t\t\tclassName={cn(isSelected && \"pointer-events-none\")}\n\t\t\tvariant=\"ghost\"\n\t\t\tonClick={() => {\n\t\t\t\tsetPreset(preset);\n\t\t\t}}\n\t\t>\n\t\t\t<>\n\t\t\t\t<span className={cn(\"pr-2 opacity-0\", isSelected && \"opacity-70\")}>\n\t\t\t\t\t<CheckIcon width={18} height={18} />\n\t\t\t\t</span>\n\t\t\t\t{label}\n\t\t\t</>\n\t\t</Button>\n\t);\n\n\t// Helper function to check if two date ranges are equal\n\tconst areRangesEqual = (a?: DateRange, b?: DateRange): boolean => {\n\t\tif (!a || !b) return a === b; // If either is undefined, return true if both are undefined\n\t\treturn (\n\t\t\ta.from.getTime() === b.from.getTime() &&\n\t\t\t(!a.to || !b.to || a.to.getTime() === b.to.getTime())\n\t\t);\n\t};\n\n\tuseEffect(() => {\n\t\tif (isOpen) {\n\t\t\topenedRangeRef.current = range;\n\t\t\topenedRangeCompareRef.current = rangeCompare;\n\t\t}\n\t}, [isOpen]);\n\n\treturn (\n\t\t<Popover\n\t\t\tmodal={true}\n\t\t\topen={isOpen}\n\t\t\tonOpenChange={(open: boolean) => {\n\t\t\t\tif (!open) {\n\t\t\t\t\tresetValues();\n\t\t\t\t}\n\t\t\t\tsetIsOpen(open);\n\t\t\t}}\n\t\t>\n\t\t\t<PopoverTrigger asChild>\n\t\t\t\t<Button size={\"lg\"} variant=\"outline\">\n\t\t\t\t\t<div className=\"text-right\">\n\t\t\t\t\t\t<div className=\"py-1\">\n\t\t\t\t\t\t\t<div>{`${formatDate(range.from, locale)}${\n\t\t\t\t\t\t\t\trange.to != null ? ` - ${formatDate(range.to, locale)}` : \"\"\n\t\t\t\t\t\t\t}`}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{rangeCompare != null && (\n\t\t\t\t\t\t\t<div className=\"opacity-60 -mt-1 text-xs\">\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\tvs. {formatDate(rangeCompare.from, locale)}\n\t\t\t\t\t\t\t\t\t{rangeCompare.to != null\n\t\t\t\t\t\t\t\t\t\t? ` - ${formatDate(rangeCompare.to, locale)}`\n\t\t\t\t\t\t\t\t\t\t: \"\"}\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"opacity-60 -mr-2 pl-1 scale-125\">\n\t\t\t\t\t\t{isOpen ? (\n\t\t\t\t\t\t\t<ChevronUpIcon width={24} />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<ChevronDownIcon width={24} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</Button>\n\t\t\t</PopoverTrigger>\n\t\t\t<PopoverContent align={align} className=\"w-auto\">\n\t\t\t\t<div className=\"flex py-2\">\n\t\t\t\t\t<div className=\"flex\">\n\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t<div className=\"flex lg:flex-row flex-col justify-end items-center lg:items-start gap-2 px-3 pb-4 lg:pb-0\">\n\t\t\t\t\t\t\t\t{showCompare && (\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-2 py-1 pr-4\">\n\t\t\t\t\t\t\t\t\t\t<Switch\n\t\t\t\t\t\t\t\t\t\t\tdefaultChecked={Boolean(rangeCompare)}\n\t\t\t\t\t\t\t\t\t\t\tonCheckedChange={(checked: boolean) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (checked) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (!range.to) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetRange({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrom: range.from,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tto: range.from,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetRangeCompare({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrom: new Date(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trange.from.getFullYear(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trange.from.getMonth(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trange.from.getDate() - 365,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tto: range.to\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? new Date(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trange.to.getFullYear() - 1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trange.to.getMonth(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trange.to.getDate(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: new Date(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trange.from.getFullYear() - 1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trange.from.getMonth(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trange.from.getDate(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetRangeCompare(undefined);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tid=\"compare-mode\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Label htmlFor=\"compare-mode\">Compare</Label>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t\t\t\t\t\t<DateInput\n\t\t\t\t\t\t\t\t\t\t\tvalue={range.from}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(date) => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst toDate =\n\t\t\t\t\t\t\t\t\t\t\t\t\trange.to == null || date > range.to ? date : range.to;\n\t\t\t\t\t\t\t\t\t\t\t\tsetRange((prevRange) => ({\n\t\t\t\t\t\t\t\t\t\t\t\t\t...prevRange,\n\t\t\t\t\t\t\t\t\t\t\t\t\tfrom: date,\n\t\t\t\t\t\t\t\t\t\t\t\t\tto: toDate,\n\t\t\t\t\t\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<div className=\"py-1\">-</div>\n\t\t\t\t\t\t\t\t\t\t<DateInput\n\t\t\t\t\t\t\t\t\t\t\tvalue={range.to}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(date) => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst fromDate = date < range.from ? date : range.from;\n\t\t\t\t\t\t\t\t\t\t\t\tsetRange((prevRange) => ({\n\t\t\t\t\t\t\t\t\t\t\t\t\t...prevRange,\n\t\t\t\t\t\t\t\t\t\t\t\t\tfrom: fromDate,\n\t\t\t\t\t\t\t\t\t\t\t\t\tto: date,\n\t\t\t\t\t\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t{rangeCompare != null && (\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t<DateInput\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={rangeCompare?.from}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(date) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (rangeCompare) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst compareToDate =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trangeCompare.to == null || date > rangeCompare.to\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? date\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: rangeCompare.to;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetRangeCompare((prevRangeCompare) => ({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t...prevRangeCompare,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrom: date,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tto: compareToDate,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetRangeCompare({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrom: date,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tto: new Date(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"py-1\">-</div>\n\t\t\t\t\t\t\t\t\t\t\t<DateInput\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={rangeCompare?.to}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(date) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (rangeCompare?.from) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst compareFromDate =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdate < rangeCompare.from\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? date\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: rangeCompare.from;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetRangeCompare({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t...rangeCompare,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfrom: compareFromDate,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tto: date,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{isSmallScreen && (\n\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\tdefaultValue={selectedPreset}\n\t\t\t\t\t\t\t\t\tonValueChange={(value) => {\n\t\t\t\t\t\t\t\t\t\tsetPreset(value);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<SelectTrigger className=\"mx-auto mb-2 w-[180px]\">\n\t\t\t\t\t\t\t\t\t\t<SelectValue placeholder=\"Select...\" />\n\t\t\t\t\t\t\t\t\t</SelectTrigger>\n\t\t\t\t\t\t\t\t\t<SelectContent>\n\t\t\t\t\t\t\t\t\t\t{PRESETS.map((preset) => (\n\t\t\t\t\t\t\t\t\t\t\t<SelectItem key={preset.name} value={preset.name}>\n\t\t\t\t\t\t\t\t\t\t\t\t{preset.label}\n\t\t\t\t\t\t\t\t\t\t\t</SelectItem>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</SelectContent>\n\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<Calendar\n\t\t\t\t\t\t\t\t\tmode=\"range\"\n\t\t\t\t\t\t\t\t\tonSelect={(value: { from?: Date; to?: Date } | undefined) => {\n\t\t\t\t\t\t\t\t\t\tif (value?.from != null) {\n\t\t\t\t\t\t\t\t\t\t\tsetRange({ from: value.from, to: value?.to });\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tselected={range}\n\t\t\t\t\t\t\t\t\tnumberOfMonths={isSmallScreen ? 1 : 2}\n\t\t\t\t\t\t\t\t\tdefaultMonth={\n\t\t\t\t\t\t\t\t\t\tnew Date(\n\t\t\t\t\t\t\t\t\t\t\tnew Date().setMonth(\n\t\t\t\t\t\t\t\t\t\t\t\tnew Date().getMonth() - (isSmallScreen ? 0 : 1),\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{!isSmallScreen && (\n\t\t\t\t\t\t<div className=\"flex flex-col items-end gap-1\">\n\t\t\t\t\t\t\t<div className=\"flex flex-col items-end gap-1 w-full\">\n\t\t\t\t\t\t\t\t{PRESETS.map((preset) => (\n\t\t\t\t\t\t\t\t\t<PresetButton\n\t\t\t\t\t\t\t\t\t\tkey={preset.name}\n\t\t\t\t\t\t\t\t\t\tpreset={preset.name}\n\t\t\t\t\t\t\t\t\t\tlabel={preset.label}\n\t\t\t\t\t\t\t\t\t\tisSelected={selectedPreset === preset.name}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex justify-end gap-2 py-2 pr-4\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetIsOpen(false);\n\t\t\t\t\t\t\tresetValues();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t>\n\t\t\t\t\t\tCancel\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetIsOpen(false);\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!areRangesEqual(range, openedRangeRef.current) ||\n\t\t\t\t\t\t\t\t!areRangesEqual(rangeCompare, openedRangeCompareRef.current)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tonUpdate?.({ range, rangeCompare });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tUpdate\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</PopoverContent>\n\t\t</Popover>\n\t);\n};\n\nDateRangePicker.displayName = \"DateRangePicker\";\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/extensions/date-range-picker/date-input.tsx",
      "content": "import React, { useEffect, useRef } from \"react\";\n\ninterface DateInputProps {\n\tvalue?: Date;\n\tonChange: (date: Date) => void;\n}\n\ninterface DateParts {\n\tday: number;\n\tmonth: number;\n\tyear: number;\n}\n\nconst DateInput: React.FC<DateInputProps> = ({ value, onChange }) => {\n\tconst [date, setDate] = React.useState<DateParts>(() => {\n\t\tconst d = value ? new Date(value) : new Date();\n\t\treturn {\n\t\t\tday: d.getDate(),\n\t\t\tmonth: d.getMonth() + 1, // JavaScript months are 0-indexed\n\t\t\tyear: d.getFullYear(),\n\t\t};\n\t});\n\n\tconst monthRef = useRef<HTMLInputElement | null>(null);\n\tconst dayRef = useRef<HTMLInputElement | null>(null);\n\tconst yearRef = useRef<HTMLInputElement | null>(null);\n\n\tuseEffect(() => {\n\t\tconst d = value ? new Date(value) : new Date();\n\t\tsetDate({\n\t\t\tday: d.getDate(),\n\t\t\tmonth: d.getMonth() + 1,\n\t\t\tyear: d.getFullYear(),\n\t\t});\n\t}, [value]);\n\n\tconst validateDate = (field: keyof DateParts, value: number): boolean => {\n\t\tif (\n\t\t\t(field === \"day\" && (value < 1 || value > 31)) ||\n\t\t\t(field === \"month\" && (value < 1 || value > 12)) ||\n\t\t\t(field === \"year\" && (value < 1000 || value > 9999))\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Validate the day of the month\n\t\tconst newDate = { ...date, [field]: value };\n\t\tconst d = new Date(newDate.year, newDate.month - 1, newDate.day);\n\t\treturn (\n\t\t\td.getFullYear() === newDate.year &&\n\t\t\td.getMonth() + 1 === newDate.month &&\n\t\t\td.getDate() === newDate.day\n\t\t);\n\t};\n\n\tconst handleInputChange =\n\t\t(field: keyof DateParts) => (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\tconst newValue = e.target.value ? Number(e.target.value) : \"\";\n\t\t\tconst isValid =\n\t\t\t\ttypeof newValue === \"number\" && validateDate(field, newValue);\n\n\t\t\t// If the new value is valid, update the date\n\t\t\tconst newDate = { ...date, [field]: newValue };\n\t\t\tsetDate(newDate);\n\n\t\t\t// only call onChange when the entry is valid\n\t\t\tif (isValid) {\n\t\t\t\tonChange(new Date(newDate.year, newDate.month - 1, newDate.day));\n\t\t\t}\n\t\t};\n\n\tconst initialDate = useRef<DateParts>(date);\n\n\tconst handleBlur =\n\t\t(field: keyof DateParts) =>\n\t\t(e: React.FocusEvent<HTMLInputElement>): void => {\n\t\t\tif (!e.target.value) {\n\t\t\t\tsetDate(initialDate.current);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst newValue = Number(e.target.value);\n\t\t\tconst isValid = validateDate(field, newValue);\n\n\t\t\tif (!isValid) {\n\t\t\t\tsetDate(initialDate.current);\n\t\t\t} else {\n\t\t\t\t// If the new value is valid, update the initial value\n\t\t\t\tinitialDate.current = { ...date, [field]: newValue };\n\t\t\t}\n\t\t};\n\n\tconst handleKeyDown =\n\t\t(field: keyof DateParts) => (e: React.KeyboardEvent<HTMLInputElement>) => {\n\t\t\t// Allow command (or control) combinations\n\t\t\tif (e.metaKey || e.ctrlKey) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prevent non-numeric characters, excluding allowed keys\n\t\t\tif (\n\t\t\t\t!/^[0-9]$/.test(e.key) &&\n\t\t\t\t![\n\t\t\t\t\t\"ArrowUp\",\n\t\t\t\t\t\"ArrowDown\",\n\t\t\t\t\t\"ArrowLeft\",\n\t\t\t\t\t\"ArrowRight\",\n\t\t\t\t\t\"Delete\",\n\t\t\t\t\t\"Tab\",\n\t\t\t\t\t\"Backspace\",\n\t\t\t\t\t\"Enter\",\n\t\t\t\t].includes(e.key)\n\t\t\t) {\n\t\t\t\te.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (e.key === \"ArrowUp\") {\n\t\t\t\te.preventDefault();\n\t\t\t\tlet newDate = { ...date };\n\n\t\t\t\tif (field === \"day\") {\n\t\t\t\t\tif (date[field] === new Date(date.year, date.month, 0).getDate()) {\n\t\t\t\t\t\tnewDate = { ...newDate, day: 1, month: (date.month % 12) + 1 };\n\t\t\t\t\t\tif (newDate.month === 1) newDate.year += 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewDate.day += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (field === \"month\") {\n\t\t\t\t\tif (date[field] === 12) {\n\t\t\t\t\t\tnewDate = { ...newDate, month: 1, year: date.year + 1 };\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewDate.month += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (field === \"year\") {\n\t\t\t\t\tnewDate.year += 1;\n\t\t\t\t}\n\n\t\t\t\tsetDate(newDate);\n\t\t\t\tonChange(new Date(newDate.year, newDate.month - 1, newDate.day));\n\t\t\t} else if (e.key === \"ArrowDown\") {\n\t\t\t\te.preventDefault();\n\t\t\t\tlet newDate = { ...date };\n\n\t\t\t\tif (field === \"day\") {\n\t\t\t\t\tif (date[field] === 1) {\n\t\t\t\t\t\tnewDate.month -= 1;\n\t\t\t\t\t\tif (newDate.month === 0) {\n\t\t\t\t\t\t\tnewDate.month = 12;\n\t\t\t\t\t\t\tnewDate.year -= 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewDate.day = new Date(newDate.year, newDate.month, 0).getDate();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewDate.day -= 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (field === \"month\") {\n\t\t\t\t\tif (date[field] === 1) {\n\t\t\t\t\t\tnewDate = { ...newDate, month: 12, year: date.year - 1 };\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewDate.month -= 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (field === \"year\") {\n\t\t\t\t\tnewDate.year -= 1;\n\t\t\t\t}\n\n\t\t\t\tsetDate(newDate);\n\t\t\t\tonChange(new Date(newDate.year, newDate.month - 1, newDate.day));\n\t\t\t}\n\n\t\t\tif (e.key === \"ArrowRight\") {\n\t\t\t\tif (\n\t\t\t\t\te.currentTarget.selectionStart === e.currentTarget.value.length ||\n\t\t\t\t\t(e.currentTarget.selectionStart === 0 &&\n\t\t\t\t\t\te.currentTarget.selectionEnd === e.currentTarget.value.length)\n\t\t\t\t) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tif (field === \"month\") dayRef.current?.focus();\n\t\t\t\t\tif (field === \"day\") yearRef.current?.focus();\n\t\t\t\t}\n\t\t\t} else if (e.key === \"ArrowLeft\") {\n\t\t\t\tif (\n\t\t\t\t\te.currentTarget.selectionStart === 0 ||\n\t\t\t\t\t(e.currentTarget.selectionStart === 0 &&\n\t\t\t\t\t\te.currentTarget.selectionEnd === e.currentTarget.value.length)\n\t\t\t\t) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tif (field === \"day\") monthRef.current?.focus();\n\t\t\t\t\tif (field === \"year\") dayRef.current?.focus();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\treturn (\n\t\t<div className=\"flex items-center px-1 border rounded-lg min-h-8 text-sm\">\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tref={monthRef}\n\t\t\t\tmax={12}\n\t\t\t\tmaxLength={2}\n\t\t\t\tvalue={date.month.toString()}\n\t\t\t\tonChange={handleInputChange(\"month\")}\n\t\t\t\tonKeyDown={handleKeyDown(\"month\")}\n\t\t\t\tonFocus={(e) => {\n\t\t\t\t\tif (window.innerWidth > 1024) {\n\t\t\t\t\t\te.target.select();\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tonBlur={handleBlur(\"month\")}\n\t\t\t\tclassName=\"p-0 border-none outline-none w-6 text-center\"\n\t\t\t\tplaceholder=\"M\"\n\t\t\t/>\n\t\t\t<span className=\"opacity-20 -mx-px\">/</span>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tref={dayRef}\n\t\t\t\tmax={31}\n\t\t\t\tmaxLength={2}\n\t\t\t\tvalue={date.day.toString()}\n\t\t\t\tonChange={handleInputChange(\"day\")}\n\t\t\t\tonKeyDown={handleKeyDown(\"day\")}\n\t\t\t\tonFocus={(e) => {\n\t\t\t\t\tif (window.innerWidth > 1024) {\n\t\t\t\t\t\te.target.select();\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tonBlur={handleBlur(\"day\")}\n\t\t\t\tclassName=\"p-0 border-none outline-none w-7 text-center\"\n\t\t\t\tplaceholder=\"D\"\n\t\t\t/>\n\t\t\t<span className=\"opacity-20 -mx-px\">/</span>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tref={yearRef}\n\t\t\t\tmax={9999}\n\t\t\t\tmaxLength={4}\n\t\t\t\tvalue={date.year.toString()}\n\t\t\t\tonChange={handleInputChange(\"year\")}\n\t\t\t\tonKeyDown={handleKeyDown(\"year\")}\n\t\t\t\tonFocus={(e) => {\n\t\t\t\t\tif (window.innerWidth > 1024) {\n\t\t\t\t\t\te.target.select();\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tonBlur={handleBlur(\"year\")}\n\t\t\t\tclassName=\"p-0 border-none outline-none w-12 text-center\"\n\t\t\t\tplaceholder=\"YYYY\"\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nDateInput.displayName = \"DateInput\";\n\nexport { DateInput };\n",
      "type": "registry:file",
      "target": "src/components/extensions/date-range-picker/date-input.tsx"
    }
  ]
}